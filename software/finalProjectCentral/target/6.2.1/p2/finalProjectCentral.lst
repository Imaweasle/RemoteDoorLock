
c:/Users/ungal/EE1301/RemoteDoorLock-main/software/finalProjectCentral/target/6.2.1/p2/finalProjectCentral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f8000  085f8000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f8018  085f8018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f8a68  085f80a8  00008a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00007588  023f8a70  085f80b0  00008a70  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007a88c  085ff638  0001a88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006f8  1007a904  1007a904  0002a904  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff6b0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000904  085ff6b4  085ff6b4  0001f6b4  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f6b4  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001e92e0  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00017294  00000000  00000000  002092e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00078738  00000000  00000000  00220574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003bc8  00000000  00000000  00298cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00013578  00000000  00000000  0029c874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b47c  00000000  00000000  002afdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00057a75  00000000  00000000  002db268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017e4c7  00000000  00000000  00332cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000b128  00000000  00000000  004b11a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f8018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f8018:	4813      	ldr	r0, [pc, #76]	; (85f8068 <module_user_pre_init+0x50>)
 85f801a:	4914      	ldr	r1, [pc, #80]	; (85f806c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f801c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f801e:	4288      	cmp	r0, r1
 85f8020:	d005      	beq.n	85f802e <module_user_pre_init+0x16>
 85f8022:	4a13      	ldr	r2, [pc, #76]	; (85f8070 <module_user_pre_init+0x58>)
 85f8024:	4282      	cmp	r2, r0
 85f8026:	d002      	beq.n	85f802e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f8028:	4b12      	ldr	r3, [pc, #72]	; (85f8074 <module_user_pre_init+0x5c>)
 85f802a:	1a12      	subs	r2, r2, r0
 85f802c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f802e:	4812      	ldr	r0, [pc, #72]	; (85f8078 <module_user_pre_init+0x60>)
 85f8030:	4a12      	ldr	r2, [pc, #72]	; (85f807c <module_user_pre_init+0x64>)
 85f8032:	2100      	movs	r1, #0
 85f8034:	4b12      	ldr	r3, [pc, #72]	; (85f8080 <module_user_pre_init+0x68>)
 85f8036:	1a12      	subs	r2, r2, r0
 85f8038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f803a:	4812      	ldr	r0, [pc, #72]	; (85f8084 <module_user_pre_init+0x6c>)
 85f803c:	4912      	ldr	r1, [pc, #72]	; (85f8088 <module_user_pre_init+0x70>)
 85f803e:	4288      	cmp	r0, r1
 85f8040:	d005      	beq.n	85f804e <module_user_pre_init+0x36>
 85f8042:	4a12      	ldr	r2, [pc, #72]	; (85f808c <module_user_pre_init+0x74>)
 85f8044:	4282      	cmp	r2, r0
 85f8046:	d002      	beq.n	85f804e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f8048:	4b0a      	ldr	r3, [pc, #40]	; (85f8074 <module_user_pre_init+0x5c>)
 85f804a:	1a12      	subs	r2, r2, r0
 85f804c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f804e:	4810      	ldr	r0, [pc, #64]	; (85f8090 <module_user_pre_init+0x78>)
 85f8050:	4910      	ldr	r1, [pc, #64]	; (85f8094 <module_user_pre_init+0x7c>)
 85f8052:	4288      	cmp	r0, r1
 85f8054:	d005      	beq.n	85f8062 <module_user_pre_init+0x4a>
 85f8056:	4a10      	ldr	r2, [pc, #64]	; (85f8098 <module_user_pre_init+0x80>)
 85f8058:	4282      	cmp	r2, r0
 85f805a:	d002      	beq.n	85f8062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f805c:	4b05      	ldr	r3, [pc, #20]	; (85f8074 <module_user_pre_init+0x5c>)
 85f805e:	1a12      	subs	r2, r2, r0
 85f8060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f8062:	4801      	ldr	r0, [pc, #4]	; (85f8068 <module_user_pre_init+0x50>)
 85f8064:	bd08      	pop	{r3, pc}
 85f8066:	bf00      	nop
 85f8068:	1007a88c 	.word	0x1007a88c
 85f806c:	085ff638 	.word	0x085ff638
 85f8070:	1007a904 	.word	0x1007a904
 85f8074:	10110d2d 	.word	0x10110d2d
 85f8078:	1007a904 	.word	0x1007a904
 85f807c:	1007affc 	.word	0x1007affc
 85f8080:	10110ea1 	.word	0x10110ea1
 85f8084:	023f8a68 	.word	0x023f8a68
 85f8088:	085f80a8 	.word	0x085f80a8
 85f808c:	023f8a70 	.word	0x023f8a70
 85f8090:	023f8a70 	.word	0x023f8a70
 85f8094:	085f80b0 	.word	0x085f80b0
 85f8098:	023ffff8 	.word	0x023ffff8

085f809c <dynalib_preinit>:
 85f809c:	085f8019 00000000                       .._.....

Disassembly of section .psram_text:

023f8a70 <strcmp>:
 23f8a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f8a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f8a78:	2a01      	cmp	r2, #1
 23f8a7a:	bf28      	it	cs
 23f8a7c:	429a      	cmpcs	r2, r3
 23f8a7e:	d0f7      	beq.n	23f8a70 <strcmp>
 23f8a80:	1ad0      	subs	r0, r2, r3
 23f8a82:	4770      	bx	lr

023f8a84 <strlen>:
 23f8a84:	4603      	mov	r3, r0
 23f8a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f8a8a:	2a00      	cmp	r2, #0
 23f8a8c:	d1fb      	bne.n	23f8a86 <strlen+0x2>
 23f8a8e:	1a18      	subs	r0, r3, r0
 23f8a90:	3801      	subs	r0, #1
 23f8a92:	4770      	bx	lr

023f8a94 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f8a94:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f8a96:	f005 f90d 	bl	23fdcb4 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f8a9a:	2500      	movs	r5, #0
 23f8a9c:	4e05      	ldr	r6, [pc, #20]	; (23f8ab4 <module_user_init+0x20>)
 23f8a9e:	4c06      	ldr	r4, [pc, #24]	; (23f8ab8 <module_user_init+0x24>)
 23f8aa0:	1ba4      	subs	r4, r4, r6
 23f8aa2:	08a4      	lsrs	r4, r4, #2
 23f8aa4:	42ac      	cmp	r4, r5
 23f8aa6:	d100      	bne.n	23f8aaa <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f8aa8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f8aaa:	f856 3b04 	ldr.w	r3, [r6], #4
 23f8aae:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f8ab0:	3501      	adds	r5, #1
 23f8ab2:	e7f7      	b.n	23f8aa4 <module_user_init+0x10>
 23f8ab4:	023fffd0 	.word	0x023fffd0
 23f8ab8:	023ffff8 	.word	0x023ffff8

023f8abc <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f8abc:	f000 b900 	b.w	23f8cc0 <setup>

023f8ac0 <module_user_loop>:
}

void module_user_loop() {
 23f8ac0:	b508      	push	{r3, lr}
    loop();
 23f8ac2:	f000 fb9b 	bl	23f91fc <loop>
    _post_loop();
}
 23f8ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f8aca:	f005 b8ab 	b.w	23fdc24 <_post_loop>

023f8ace <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f8ace:	f001 b9d1 	b.w	23f9e74 <malloc>

023f8ad2 <_Znaj>:
 23f8ad2:	f001 b9cf 	b.w	23f9e74 <malloc>

023f8ad6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f8ad6:	f001 b9db 	b.w	23f9e90 <free>
	...

023f8adc <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f8adc:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f8ade:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f8ae0:	4a02      	ldr	r2, [pc, #8]	; (23f8aec <__cxa_pure_virtual+0x10>)
 23f8ae2:	4903      	ldr	r1, [pc, #12]	; (23f8af0 <__cxa_pure_virtual+0x14>)
 23f8ae4:	f001 f814 	bl	23f9b10 <panic_>
  while (1);
 23f8ae8:	e7fe      	b.n	23f8ae8 <__cxa_pure_virtual+0xc>
 23f8aea:	bf00      	nop
 23f8aec:	023f95b5 	.word	0x023f95b5
 23f8af0:	023ff560 	.word	0x023ff560

023f8af4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f8af4:	7800      	ldrb	r0, [r0, #0]
 23f8af6:	fab0 f080 	clz	r0, r0
 23f8afa:	0940      	lsrs	r0, r0, #5
 23f8afc:	4770      	bx	lr

023f8afe <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f8afe:	2301      	movs	r3, #1
 23f8b00:	7003      	strb	r3, [r0, #0]
 23f8b02:	4770      	bx	lr

023f8b04 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 23f8b04:	6810      	ldr	r0, [r2, #0]
 23f8b06:	4770      	bx	lr

023f8b08 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f8b08:	4770      	bx	lr
	...

023f8b0c <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isReconnectSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_RECONNECT_IMMEDIATELY);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
 23f8b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f8b0e:	4b07      	ldr	r3, [pc, #28]	; (23f8b2c <_ZN10CloudClass7publishEPKc.isra.0+0x20>)
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
 23f8b10:	223c      	movs	r2, #60	; 0x3c
 23f8b12:	781b      	ldrb	r3, [r3, #0]
inline particle::Future<bool> CloudClass::publish(const char* name) {
 23f8b14:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
 23f8b16:	f88d 3008 	strb.w	r3, [sp, #8]
 23f8b1a:	2300      	movs	r3, #0
 23f8b1c:	e9cd 3200 	strd	r3, r2, [sp]
 23f8b20:	461a      	mov	r2, r3
 23f8b22:	f005 fa73 	bl	23fe00c <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
 23f8b26:	4620      	mov	r0, r4
 23f8b28:	b004      	add	sp, #16
 23f8b2a:	bd10      	pop	{r4, pc}
 23f8b2c:	1007a960 	.word	0x1007a960

023f8b30 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f8b30:	b510      	push	{r4, lr}
 23f8b32:	4604      	mov	r4, r0
 23f8b34:	4b09      	ldr	r3, [pc, #36]	; (23f8b5c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f8b36:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f8b38:	f004 f9ec 	bl	23fcf14 <_ZN5spark10LogManager8instanceEv>
 23f8b3c:	4621      	mov	r1, r4
 23f8b3e:	f004 fc35 	bl	23fd3ac <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f8b42:	f005 fc8b 	bl	23fe45c <_Z16_fetch_usbserialv>
 23f8b46:	f005 fc7d 	bl	23fe444 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f8b4a:	4620      	mov	r0, r4
 23f8b4c:	4b04      	ldr	r3, [pc, #16]	; (23f8b60 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f8b4e:	f840 3b04 	str.w	r3, [r0], #4
 23f8b52:	f004 fab5 	bl	23fd0c0 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f8b56:	4620      	mov	r0, r4
 23f8b58:	bd10      	pop	{r4, pc}
 23f8b5a:	bf00      	nop
 23f8b5c:	023ff824 	.word	0x023ff824
 23f8b60:	023ff80c 	.word	0x023ff80c

023f8b64 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f8b64:	b510      	push	{r4, lr}
 23f8b66:	4604      	mov	r4, r0
    }
 23f8b68:	f7ff ffe2 	bl	23f8b30 <_ZN5spark16SerialLogHandlerD1Ev>
 23f8b6c:	4620      	mov	r0, r4
 23f8b6e:	2124      	movs	r1, #36	; 0x24
 23f8b70:	f7ff ffb1 	bl	23f8ad6 <_ZdlPvj>
 23f8b74:	4620      	mov	r0, r4
 23f8b76:	bd10      	pop	{r4, pc}

023f8b78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23f8b78:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23f8b7a:	6843      	ldr	r3, [r0, #4]
    {
 23f8b7c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23f8b7e:	3b01      	subs	r3, #1
 23f8b80:	6043      	str	r3, [r0, #4]
 23f8b82:	b963      	cbnz	r3, 23f8b9e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23f8b84:	6803      	ldr	r3, [r0, #0]
 23f8b86:	689b      	ldr	r3, [r3, #8]
 23f8b88:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f8b8a:	68a3      	ldr	r3, [r4, #8]
 23f8b8c:	3b01      	subs	r3, #1
 23f8b8e:	60a3      	str	r3, [r4, #8]
 23f8b90:	b92b      	cbnz	r3, 23f8b9e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23f8b92:	6823      	ldr	r3, [r4, #0]
 23f8b94:	4620      	mov	r0, r4
        }
    }
 23f8b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23f8b9a:	68db      	ldr	r3, [r3, #12]
 23f8b9c:	4718      	bx	r3
    }
 23f8b9e:	bd10      	pop	{r4, pc}

023f8ba0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23f8ba0:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f8ba2:	f04f 0c20 	mov.w	ip, #32
 23f8ba6:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23f8ba8:	b500      	push	{lr}
 23f8baa:	b08c      	sub	sp, #48	; 0x30
 23f8bac:	aa0d      	add	r2, sp, #52	; 0x34
 23f8bae:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f8bb2:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8bb6:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f8bba:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8bbc:	6801      	ldr	r1, [r0, #0]
 23f8bbe:	aa04      	add	r2, sp, #16
 23f8bc0:	201e      	movs	r0, #30
 23f8bc2:	f000 ffc1 	bl	23f9b48 <log_message_v>
}
 23f8bc6:	b00c      	add	sp, #48	; 0x30
 23f8bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 23f8bcc:	b003      	add	sp, #12
 23f8bce:	4770      	bx	lr

023f8bd0 <_Z10handleDataPKhjRKN8particle13BlePeerDeviceEPv>:
  else {
    return false;
  }
}

void handleData(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) { // Handles data from Peripheral (outside of door)
 23f8bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (len > 0) {
 23f8bd2:	460a      	mov	r2, r1
 23f8bd4:	b181      	cbz	r1, 23f8bf8 <_Z10handleDataPKhjRKN8particle13BlePeerDeviceEPv+0x28>
    doorState = String((const char*)data, len); // can probably call an decryption function here if we want
 23f8bd6:	4c09      	ldr	r4, [pc, #36]	; (23f8bfc <_Z10handleDataPKhjRKN8particle13BlePeerDeviceEPv+0x2c>)
 23f8bd8:	4601      	mov	r1, r0
 23f8bda:	4668      	mov	r0, sp
 23f8bdc:	f001 fa93 	bl	23fa106 <_ZN6StringC1EPKcj>
 23f8be0:	4669      	mov	r1, sp
 23f8be2:	4620      	mov	r0, r4
 23f8be4:	f001 fade 	bl	23fa1a4 <_ZN6StringaSEOS_>
 23f8be8:	4668      	mov	r0, sp
 23f8bea:	f001 fa2d 	bl	23fa048 <_ZN6StringD1Ev>
    Log.info("Door status: %s", doorState.c_str());
 23f8bee:	6822      	ldr	r2, [r4, #0]
 23f8bf0:	4903      	ldr	r1, [pc, #12]	; (23f8c00 <_Z10handleDataPKhjRKN8particle13BlePeerDeviceEPv+0x30>)
 23f8bf2:	4804      	ldr	r0, [pc, #16]	; (23f8c04 <_Z10handleDataPKhjRKN8particle13BlePeerDeviceEPv+0x34>)
 23f8bf4:	f7ff ffd4 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
  }
}
 23f8bf8:	b004      	add	sp, #16
 23f8bfa:	bd10      	pop	{r4, pc}
 23f8bfc:	1007a968 	.word	0x1007a968
 23f8c00:	023ff575 	.word	0x023ff575
 23f8c04:	1007ae74 	.word	0x1007ae74

023f8c08 <_Z14forceDoorState6String>:

int forceDoorState(String command1) { // Handles data from cloud
 23f8c08:	b510      	push	{r4, lr}
    operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    int compareTo(const String &s) const;
    unsigned char equals(const String &s) const;
    unsigned char equals(const char *cstr) const;
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f8c0a:	4910      	ldr	r1, [pc, #64]	; (23f8c4c <_Z14forceDoorState6String+0x44>)
 23f8c0c:	4604      	mov	r4, r0
 23f8c0e:	f001 fb2e 	bl	23fa26e <_ZNK6String6equalsEPKc>
  if (command1 == "locked") {
 23f8c12:	b158      	cbz	r0, 23f8c2c <_Z14forceDoorState6String+0x24>
    doorState = "locked";
 23f8c14:	4c0e      	ldr	r4, [pc, #56]	; (23f8c50 <_Z14forceDoorState6String+0x48>)
 23f8c16:	490d      	ldr	r1, [pc, #52]	; (23f8c4c <_Z14forceDoorState6String+0x44>)
    Log.info("Door State Forced: %s", doorState.c_str());
    return 1;
  }
  else if (command1 == "unlocked") {
    doorState = "unlocked";
 23f8c18:	4620      	mov	r0, r4
 23f8c1a:	f001 facb 	bl	23fa1b4 <_ZN6StringaSEPKc>
    Log.info("Door State Forced: %s", doorState.c_str());
 23f8c1e:	480d      	ldr	r0, [pc, #52]	; (23f8c54 <_Z14forceDoorState6String+0x4c>)
 23f8c20:	6822      	ldr	r2, [r4, #0]
 23f8c22:	490d      	ldr	r1, [pc, #52]	; (23f8c58 <_Z14forceDoorState6String+0x50>)
 23f8c24:	f7ff ffbc 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
    return 1;
 23f8c28:	2001      	movs	r0, #1
  }
  else {
    Log.info("Invalid Command: %s", command1.c_str());
    return -1;
  }
}
 23f8c2a:	bd10      	pop	{r4, pc}
 23f8c2c:	4620      	mov	r0, r4
 23f8c2e:	490b      	ldr	r1, [pc, #44]	; (23f8c5c <_Z14forceDoorState6String+0x54>)
 23f8c30:	f001 fb1d 	bl	23fa26e <_ZNK6String6equalsEPKc>
  else if (command1 == "unlocked") {
 23f8c34:	b110      	cbz	r0, 23f8c3c <_Z14forceDoorState6String+0x34>
    doorState = "unlocked";
 23f8c36:	4c06      	ldr	r4, [pc, #24]	; (23f8c50 <_Z14forceDoorState6String+0x48>)
 23f8c38:	4908      	ldr	r1, [pc, #32]	; (23f8c5c <_Z14forceDoorState6String+0x54>)
 23f8c3a:	e7ed      	b.n	23f8c18 <_Z14forceDoorState6String+0x10>
    Log.info("Invalid Command: %s", command1.c_str());
 23f8c3c:	4805      	ldr	r0, [pc, #20]	; (23f8c54 <_Z14forceDoorState6String+0x4c>)
 23f8c3e:	6822      	ldr	r2, [r4, #0]
 23f8c40:	4907      	ldr	r1, [pc, #28]	; (23f8c60 <_Z14forceDoorState6String+0x58>)
 23f8c42:	f7ff ffad 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
    return -1;
 23f8c46:	f04f 30ff 	mov.w	r0, #4294967295
 23f8c4a:	e7ee      	b.n	23f8c2a <_Z14forceDoorState6String+0x22>
 23f8c4c:	023ff72b 	.word	0x023ff72b
 23f8c50:	1007a968 	.word	0x1007a968
 23f8c54:	1007ae74 	.word	0x1007ae74
 23f8c58:	023ff585 	.word	0x023ff585
 23f8c5c:	023ff59b 	.word	0x023ff59b
 23f8c60:	023ff5a4 	.word	0x023ff5a4

023f8c64 <_Z16forceManualState6String>:

int forceManualState(String command2) { // Handles data from cloud
 23f8c64:	b510      	push	{r4, lr}
 23f8c66:	4910      	ldr	r1, [pc, #64]	; (23f8ca8 <_Z16forceManualState6String+0x44>)
 23f8c68:	4604      	mov	r4, r0
 23f8c6a:	f001 fb00 	bl	23fa26e <_ZNK6String6equalsEPKc>
  if (command2 == "locked") {
 23f8c6e:	b158      	cbz	r0, 23f8c88 <_Z16forceManualState6String+0x24>
    manualState = "locked";
 23f8c70:	4c0e      	ldr	r4, [pc, #56]	; (23f8cac <_Z16forceManualState6String+0x48>)
 23f8c72:	490d      	ldr	r1, [pc, #52]	; (23f8ca8 <_Z16forceManualState6String+0x44>)
    Log.info("Manual State Forced: %s", manualState.c_str());
    return 1;
  }
  else if (command2 == "unlocked") {
    manualState = "unlocked";
 23f8c74:	4620      	mov	r0, r4
 23f8c76:	f001 fa9d 	bl	23fa1b4 <_ZN6StringaSEPKc>
    Log.info("Manual State Forced: %s", manualState.c_str());
 23f8c7a:	480d      	ldr	r0, [pc, #52]	; (23f8cb0 <_Z16forceManualState6String+0x4c>)
 23f8c7c:	6822      	ldr	r2, [r4, #0]
 23f8c7e:	490d      	ldr	r1, [pc, #52]	; (23f8cb4 <_Z16forceManualState6String+0x50>)
 23f8c80:	f7ff ff8e 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
    return 1;
 23f8c84:	2001      	movs	r0, #1
  }
  else {
    Log.info("Invalid Command: %s", command2.c_str());
    return -1;
  }
}
 23f8c86:	bd10      	pop	{r4, pc}
 23f8c88:	4620      	mov	r0, r4
 23f8c8a:	490b      	ldr	r1, [pc, #44]	; (23f8cb8 <_Z16forceManualState6String+0x54>)
 23f8c8c:	f001 faef 	bl	23fa26e <_ZNK6String6equalsEPKc>
  else if (command2 == "unlocked") {
 23f8c90:	b110      	cbz	r0, 23f8c98 <_Z16forceManualState6String+0x34>
    manualState = "unlocked";
 23f8c92:	4c06      	ldr	r4, [pc, #24]	; (23f8cac <_Z16forceManualState6String+0x48>)
 23f8c94:	4908      	ldr	r1, [pc, #32]	; (23f8cb8 <_Z16forceManualState6String+0x54>)
 23f8c96:	e7ed      	b.n	23f8c74 <_Z16forceManualState6String+0x10>
    Log.info("Invalid Command: %s", command2.c_str());
 23f8c98:	4805      	ldr	r0, [pc, #20]	; (23f8cb0 <_Z16forceManualState6String+0x4c>)
 23f8c9a:	6822      	ldr	r2, [r4, #0]
 23f8c9c:	4907      	ldr	r1, [pc, #28]	; (23f8cbc <_Z16forceManualState6String+0x58>)
 23f8c9e:	f7ff ff7f 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
    return -1;
 23f8ca2:	f04f 30ff 	mov.w	r0, #4294967295
 23f8ca6:	e7ee      	b.n	23f8c86 <_Z16forceManualState6String+0x22>
 23f8ca8:	023ff72b 	.word	0x023ff72b
 23f8cac:	1007a9ac 	.word	0x1007a9ac
 23f8cb0:	1007ae74 	.word	0x1007ae74
 23f8cb4:	023ff5b8 	.word	0x023ff5b8
 23f8cb8:	023ff59b 	.word	0x023ff59b
 23f8cbc:	023ff5a4 	.word	0x023ff5a4

023f8cc0 <setup>:
void setup() {
 23f8cc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Serial.begin(9600);
 23f8cc2:	f005 fbcb 	bl	23fe45c <_Z16_fetch_usbserialv>
 23f8cc6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f8cca:	f005 fbb7 	bl	23fe43c <_ZN9USBSerial5beginEl>
  pinMode(ledPin, OUTPUT);
 23f8cce:	2101      	movs	r1, #1
 23f8cd0:	2004      	movs	r0, #4
 23f8cd2:	f005 ffd3 	bl	23fec7c <pinMode>
  BLE.on(); // initialize bluetooth
 23f8cd6:	f002 f863 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f8cda:	f002 f8ab 	bl	23fae34 <_ZNK8particle14BleLocalDevice2onEv>
  notifyChar.onDataReceived(handleData, &notifyChar); // calls handleData on recieved data with notify characteristic
 23f8cde:	4a28      	ldr	r2, [pc, #160]	; (23f8d80 <setup+0xc0>)
 23f8ce0:	4928      	ldr	r1, [pc, #160]	; (23f8d84 <setup+0xc4>)
 23f8ce2:	4610      	mov	r0, r2
 23f8ce4:	f003 f8e6 	bl	23fbeb4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
  pinMode(PH, OUTPUT);
 23f8ce8:	2101      	movs	r1, #1
 23f8cea:	4608      	mov	r0, r1
 23f8cec:	f005 ffc6 	bl	23fec7c <pinMode>
  pinMode(EN, OUTPUT);
 23f8cf0:	2101      	movs	r1, #1
 23f8cf2:	200e      	movs	r0, #14
 23f8cf4:	f005 ffc2 	bl	23fec7c <pinMode>
  pinMode(lockButton, INPUT);
 23f8cf8:	2100      	movs	r1, #0
 23f8cfa:	2002      	movs	r0, #2
 23f8cfc:	f005 ffbe 	bl	23fec7c <pinMode>
  pinMode(unLockButton, INPUT);
 23f8d00:	2100      	movs	r1, #0
 23f8d02:	2003      	movs	r0, #3
 23f8d04:	f005 ffba 	bl	23fec7c <pinMode>
  pinMode(limitSwitch, INPUT_PULLUP);  // Using internal pullup
 23f8d08:	2102      	movs	r1, #2
 23f8d0a:	2006      	movs	r0, #6
 23f8d0c:	f005 ffb6 	bl	23fec7c <pinMode>
  pinMode(limitSwitch2, INPUT_PULLUP); // Using internal pullup
 23f8d10:	2102      	movs	r1, #2
 23f8d12:	2007      	movs	r0, #7
 23f8d14:	f005 ffb2 	bl	23fec7c <pinMode>
  if (digitalRead(limitSwitch) == HIGH || digitalRead(limitSwitch2) == HIGH) {
 23f8d18:	2006      	movs	r0, #6
 23f8d1a:	f005 ffd9 	bl	23fecd0 <digitalRead>
 23f8d1e:	2801      	cmp	r0, #1
 23f8d20:	d128      	bne.n	23f8d74 <setup+0xb4>
    motorRunning = false;
 23f8d22:	2200      	movs	r2, #0
 23f8d24:	4b18      	ldr	r3, [pc, #96]	; (23f8d88 <setup+0xc8>)
 23f8d26:	701a      	strb	r2, [r3, #0]
        spark_variable_t extra = {};
 23f8d28:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
 23f8d2a:	260c      	movs	r6, #12
        extra.update = update_string_variable;
 23f8d2c:	4d17      	ldr	r5, [pc, #92]	; (23f8d8c <setup+0xcc>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 23f8d2e:	ab01      	add	r3, sp, #4
 23f8d30:	2204      	movs	r2, #4
 23f8d32:	4917      	ldr	r1, [pc, #92]	; (23f8d90 <setup+0xd0>)
 23f8d34:	4817      	ldr	r0, [pc, #92]	; (23f8d94 <setup+0xd4>)
        spark_variable_t extra = {};
 23f8d36:	9401      	str	r4, [sp, #4]
 23f8d38:	9403      	str	r4, [sp, #12]
        extra.size = sizeof(extra);
 23f8d3a:	f8ad 6004 	strh.w	r6, [sp, #4]
        extra.update = update_string_variable;
 23f8d3e:	9502      	str	r5, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 23f8d40:	f001 f844 	bl	23f9dcc <spark_variable>
 23f8d44:	ab01      	add	r3, sp, #4
 23f8d46:	2204      	movs	r2, #4
 23f8d48:	4913      	ldr	r1, [pc, #76]	; (23f8d98 <setup+0xd8>)
 23f8d4a:	4814      	ldr	r0, [pc, #80]	; (23f8d9c <setup+0xdc>)
        spark_variable_t extra = {};
 23f8d4c:	9401      	str	r4, [sp, #4]
 23f8d4e:	9403      	str	r4, [sp, #12]
        extra.size = sizeof(extra);
 23f8d50:	f8ad 6004 	strh.w	r6, [sp, #4]
        extra.update = update_string_variable;
 23f8d54:	9502      	str	r5, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 23f8d56:	f001 f839 	bl	23f9dcc <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23f8d5a:	4a11      	ldr	r2, [pc, #68]	; (23f8da0 <setup+0xe0>)
 23f8d5c:	4911      	ldr	r1, [pc, #68]	; (23f8da4 <setup+0xe4>)
 23f8d5e:	4812      	ldr	r0, [pc, #72]	; (23f8da8 <setup+0xe8>)
 23f8d60:	f005 f839 	bl	23fddd6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 23f8d64:	4a11      	ldr	r2, [pc, #68]	; (23f8dac <setup+0xec>)
 23f8d66:	4912      	ldr	r1, [pc, #72]	; (23f8db0 <setup+0xf0>)
 23f8d68:	480f      	ldr	r0, [pc, #60]	; (23f8da8 <setup+0xe8>)
}
 23f8d6a:	b004      	add	sp, #16
 23f8d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23f8d70:	f005 b831 	b.w	23fddd6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (digitalRead(limitSwitch) == HIGH || digitalRead(limitSwitch2) == HIGH) {
 23f8d74:	2007      	movs	r0, #7
 23f8d76:	f005 ffab 	bl	23fecd0 <digitalRead>
 23f8d7a:	2801      	cmp	r0, #1
 23f8d7c:	d1d4      	bne.n	23f8d28 <setup+0x68>
 23f8d7e:	e7d0      	b.n	23f8d22 <setup+0x62>
 23f8d80:	1007a9c0 	.word	0x1007a9c0
 23f8d84:	023f8bd1 	.word	0x023f8bd1
 23f8d88:	1007a9bc 	.word	0x1007a9bc
 23f8d8c:	023f8b05 	.word	0x023f8b05
 23f8d90:	1007a968 	.word	0x1007a968
 23f8d94:	023ff5d0 	.word	0x023ff5d0
 23f8d98:	1007a9ac 	.word	0x1007a9ac
 23f8d9c:	023ff5dd 	.word	0x023ff5dd
 23f8da0:	023ff5ec 	.word	0x023ff5ec
 23f8da4:	023f8c09 	.word	0x023f8c09
 23f8da8:	023fddab 	.word	0x023fddab
 23f8dac:	023ff5fe 	.word	0x023ff5fe
 23f8db0:	023f8c65 	.word	0x023f8c65

023f8db4 <_Z15bleCloudConnectv>:
void bleCloudConnect() {
 23f8db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!peer.connected()) {
 23f8db8:	4857      	ldr	r0, [pc, #348]	; (23f8f18 <_Z15bleCloudConnectv+0x164>)
void bleCloudConnect() {
 23f8dba:	b08b      	sub	sp, #44	; 0x2c
  if (!peer.connected()) {
 23f8dbc:	f001 ff64 	bl	23fac88 <_ZNK8particle13BlePeerDevice9connectedEv>
 23f8dc0:	4d55      	ldr	r5, [pc, #340]	; (23f8f18 <_Z15bleCloudConnectv+0x164>)
 23f8dc2:	4604      	mov	r4, r0
 23f8dc4:	2800      	cmp	r0, #0
 23f8dc6:	f040 8086 	bne.w	23f8ed6 <_Z15bleCloudConnectv+0x122>
    Log.info("Scanning...");
 23f8dca:	4954      	ldr	r1, [pc, #336]	; (23f8f1c <_Z15bleCloudConnectv+0x168>)
 23f8dcc:	4854      	ldr	r0, [pc, #336]	; (23f8f20 <_Z15bleCloudConnectv+0x16c>)
 23f8dce:	f7ff fee7 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
    int scanCount = BLE.scan(scanResults, scanResultsCount);
 23f8dd2:	f001 ffe5 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f8dd6:	221e      	movs	r2, #30
 23f8dd8:	4952      	ldr	r1, [pc, #328]	; (23f8f24 <_Z15bleCloudConnectv+0x170>)
 23f8dda:	f002 f8bd 	bl	23faf58 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
 23f8dde:	4681      	mov	r9, r0
    for (int i = 0; i < scanCount; i++) {
 23f8de0:	4f50      	ldr	r7, [pc, #320]	; (23f8f24 <_Z15bleCloudConnectv+0x170>)
      if (svcCount > 0 && foundServiceUuid == serviceUuid) {
 23f8de2:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23f8f50 <_Z15bleCloudConnectv+0x19c>
        Log.info("Found service. connecting...");
 23f8de6:	f8df b16c 	ldr.w	fp, [pc, #364]	; 23f8f54 <_Z15bleCloudConnectv+0x1a0>
 23f8dea:	f8df 8134 	ldr.w	r8, [pc, #308]	; 23f8f20 <_Z15bleCloudConnectv+0x16c>
    for (int i = 0; i < scanCount; i++) {
 23f8dee:	454c      	cmp	r4, r9
 23f8df0:	da78      	bge.n	23f8ee4 <_Z15bleCloudConnectv+0x130>
      BleUuid foundServiceUuid;
 23f8df2:	a805      	add	r0, sp, #20
 23f8df4:	f001 fc2c 	bl	23fa650 <_ZN8particle7BleUuidC1Ev>
      size_t svcCount = scanResults[i].advertisingData().serviceUUID(&foundServiceUuid, 1);
 23f8df8:	2201      	movs	r2, #1
 23f8dfa:	a905      	add	r1, sp, #20
 23f8dfc:	f107 0008 	add.w	r0, r7, #8
 23f8e00:	f002 fdf5 	bl	23fb9ee <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
      if (svcCount > 0 && foundServiceUuid == serviceUuid) {
 23f8e04:	2800      	cmp	r0, #0
 23f8e06:	d050      	beq.n	23f8eaa <_Z15bleCloudConnectv+0xf6>
 23f8e08:	4651      	mov	r1, sl
 23f8e0a:	a805      	add	r0, sp, #20
 23f8e0c:	f001 fc7b 	bl	23fa706 <_ZNK8particle7BleUuideqERKS0_>
 23f8e10:	2800      	cmp	r0, #0
 23f8e12:	d04a      	beq.n	23f8eaa <_Z15bleCloudConnectv+0xf6>
        Log.info("Found service. connecting...");
 23f8e14:	4659      	mov	r1, fp
 23f8e16:	4640      	mov	r0, r8
 23f8e18:	f7ff fec2 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
        peer = BLE.connect(scanResults[i].address());
 23f8e1c:	f001 ffc0 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f8e20:	2301      	movs	r3, #1
 23f8e22:	4601      	mov	r1, r0
 23f8e24:	463a      	mov	r2, r7
 23f8e26:	a802      	add	r0, sp, #8
 23f8e28:	f003 fb94 	bl	23fc554 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f8e2c:	9b02      	ldr	r3, [sp, #8]
 23f8e2e:	9e03      	ldr	r6, [sp, #12]
 23f8e30:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
 23f8e32:	686b      	ldr	r3, [r5, #4]
 23f8e34:	429e      	cmp	r6, r3
 23f8e36:	d008      	beq.n	23f8e4a <_Z15bleCloudConnectv+0x96>
	    if (__tmp != 0)
 23f8e38:	b116      	cbz	r6, 23f8e40 <_Z15bleCloudConnectv+0x8c>
    { ++_M_use_count; }
 23f8e3a:	6873      	ldr	r3, [r6, #4]
 23f8e3c:	3301      	adds	r3, #1
 23f8e3e:	6073      	str	r3, [r6, #4]
	    if (_M_pi != 0)
 23f8e40:	6868      	ldr	r0, [r5, #4]
 23f8e42:	b108      	cbz	r0, 23f8e48 <_Z15bleCloudConnectv+0x94>
	      _M_pi->_M_release();
 23f8e44:	f7ff fe98 	bl	23f8b78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23f8e48:	606e      	str	r6, [r5, #4]
 23f8e4a:	a802      	add	r0, sp, #8
 23f8e4c:	f002 f8fa 	bl	23fb044 <_ZN8particle13BlePeerDeviceD1Ev>
        if (peer.connected()) {
 23f8e50:	4831      	ldr	r0, [pc, #196]	; (23f8f18 <_Z15bleCloudConnectv+0x164>)
 23f8e52:	f001 ff19 	bl	23fac88 <_ZNK8particle13BlePeerDevice9connectedEv>
 23f8e56:	b340      	cbz	r0, 23f8eaa <_Z15bleCloudConnectv+0xf6>
          Log.info("Connected to peripheral");
 23f8e58:	4933      	ldr	r1, [pc, #204]	; (23f8f28 <_Z15bleCloudConnectv+0x174>)
 23f8e5a:	4640      	mov	r0, r8
 23f8e5c:	f7ff fea0 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
          delay(500);
 23f8e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23f8e64:	f004 fea6 	bl	23fdbb4 <delay>
          peer.discoverAllCharacteristics();
 23f8e68:	492b      	ldr	r1, [pc, #172]	; (23f8f18 <_Z15bleCloudConnectv+0x164>)
 23f8e6a:	a802      	add	r0, sp, #8
 23f8e6c:	f003 faa2 	bl	23fc3b4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
 23f8e70:	e9dd 6302 	ldrd	r6, r3, [sp, #8]
 23f8e74:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
        for (; p != end; ++p) {
 23f8e78:	42b3      	cmp	r3, r6
 23f8e7a:	9301      	str	r3, [sp, #4]
 23f8e7c:	d005      	beq.n	23f8e8a <_Z15bleCloudConnectv+0xd6>
            p->~T();
 23f8e7e:	4630      	mov	r0, r6
 23f8e80:	f002 f8d9 	bl	23fb036 <_ZN8particle17BleCharacteristicD1Ev>
        for (; p != end; ++p) {
 23f8e84:	3608      	adds	r6, #8
 23f8e86:	9b01      	ldr	r3, [sp, #4]
 23f8e88:	e7f6      	b.n	23f8e78 <_Z15bleCloudConnectv+0xc4>
    ::free(ptr);
 23f8e8a:	9802      	ldr	r0, [sp, #8]
 23f8e8c:	f001 f800 	bl	23f9e90 <free>
          if (peer.getCharacteristicByUUID(notifyChar, notifyCharUuid) && peer.getCharacteristicByUUID(responseChar, responseCharUuid) && peer.getCharacteristicByUUID(manualChar, manualCharUuid)) {
 23f8e90:	4a26      	ldr	r2, [pc, #152]	; (23f8f2c <_Z15bleCloudConnectv+0x178>)
 23f8e92:	4927      	ldr	r1, [pc, #156]	; (23f8f30 <_Z15bleCloudConnectv+0x17c>)
 23f8e94:	4820      	ldr	r0, [pc, #128]	; (23f8f18 <_Z15bleCloudConnectv+0x164>)
 23f8e96:	f002 ffe3 	bl	23fbe60 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
 23f8e9a:	b948      	cbnz	r0, 23f8eb0 <_Z15bleCloudConnectv+0xfc>
            Log.info("not fucking connecting piece of shit characteristics");
 23f8e9c:	4640      	mov	r0, r8
 23f8e9e:	4925      	ldr	r1, [pc, #148]	; (23f8f34 <_Z15bleCloudConnectv+0x180>)
 23f8ea0:	f7ff fe7e 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
            peer.disconnect();
 23f8ea4:	481c      	ldr	r0, [pc, #112]	; (23f8f18 <_Z15bleCloudConnectv+0x164>)
 23f8ea6:	f002 f945 	bl	23fb134 <_ZNK8particle13BlePeerDevice10disconnectEv>
    for (int i = 0; i < scanCount; i++) {
 23f8eaa:	3401      	adds	r4, #1
 23f8eac:	3724      	adds	r7, #36	; 0x24
 23f8eae:	e79e      	b.n	23f8dee <_Z15bleCloudConnectv+0x3a>
          if (peer.getCharacteristicByUUID(notifyChar, notifyCharUuid) && peer.getCharacteristicByUUID(responseChar, responseCharUuid) && peer.getCharacteristicByUUID(manualChar, manualCharUuid)) {
 23f8eb0:	4a21      	ldr	r2, [pc, #132]	; (23f8f38 <_Z15bleCloudConnectv+0x184>)
 23f8eb2:	4922      	ldr	r1, [pc, #136]	; (23f8f3c <_Z15bleCloudConnectv+0x188>)
 23f8eb4:	4818      	ldr	r0, [pc, #96]	; (23f8f18 <_Z15bleCloudConnectv+0x164>)
 23f8eb6:	f002 ffd3 	bl	23fbe60 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
 23f8eba:	2800      	cmp	r0, #0
 23f8ebc:	d0ee      	beq.n	23f8e9c <_Z15bleCloudConnectv+0xe8>
 23f8ebe:	4a20      	ldr	r2, [pc, #128]	; (23f8f40 <_Z15bleCloudConnectv+0x18c>)
 23f8ec0:	4920      	ldr	r1, [pc, #128]	; (23f8f44 <_Z15bleCloudConnectv+0x190>)
 23f8ec2:	4815      	ldr	r0, [pc, #84]	; (23f8f18 <_Z15bleCloudConnectv+0x164>)
 23f8ec4:	f002 ffcc 	bl	23fbe60 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
 23f8ec8:	2800      	cmp	r0, #0
 23f8eca:	d0e7      	beq.n	23f8e9c <_Z15bleCloudConnectv+0xe8>
            Log.info("Characteristics Found");
 23f8ecc:	4640      	mov	r0, r8
 23f8ece:	491e      	ldr	r1, [pc, #120]	; (23f8f48 <_Z15bleCloudConnectv+0x194>)
 23f8ed0:	f7ff fe66 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
 23f8ed4:	e7e9      	b.n	23f8eaa <_Z15bleCloudConnectv+0xf6>
  else if (peer.connected() && !Particle.connected() && !cloudConnecting) {
 23f8ed6:	4628      	mov	r0, r5
 23f8ed8:	f001 fed6 	bl	23fac88 <_ZNK8particle13BlePeerDevice9connectedEv>
 23f8edc:	b928      	cbnz	r0, 23f8eea <_Z15bleCloudConnectv+0x136>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f8ede:	f000 ff9f 	bl	23f9e20 <spark_cloud_flag_connected>
  else if (Particle.connected() && cloudConnecting) {
 23f8ee2:	b988      	cbnz	r0, 23f8f08 <_Z15bleCloudConnectv+0x154>
}
 23f8ee4:	b00b      	add	sp, #44	; 0x2c
 23f8ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8eea:	f000 ff99 	bl	23f9e20 <spark_cloud_flag_connected>
  else if (peer.connected() && !Particle.connected() && !cloudConnecting) {
 23f8eee:	2800      	cmp	r0, #0
 23f8ef0:	d1f5      	bne.n	23f8ede <_Z15bleCloudConnectv+0x12a>
 23f8ef2:	4b16      	ldr	r3, [pc, #88]	; (23f8f4c <_Z15bleCloudConnectv+0x198>)
 23f8ef4:	781a      	ldrb	r2, [r3, #0]
 23f8ef6:	2a00      	cmp	r2, #0
 23f8ef8:	d1f1      	bne.n	23f8ede <_Z15bleCloudConnectv+0x12a>
    cloudConnecting = true;
 23f8efa:	2201      	movs	r2, #1
 23f8efc:	701a      	strb	r2, [r3, #0]
}
 23f8efe:	b00b      	add	sp, #44	; 0x2c
 23f8f00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        spark_cloud_flag_connect();
 23f8f04:	f000 bf7e 	b.w	23f9e04 <spark_cloud_flag_connect>
  else if (Particle.connected() && cloudConnecting) {
 23f8f08:	4b10      	ldr	r3, [pc, #64]	; (23f8f4c <_Z15bleCloudConnectv+0x198>)
 23f8f0a:	781a      	ldrb	r2, [r3, #0]
 23f8f0c:	2a00      	cmp	r2, #0
 23f8f0e:	d0e9      	beq.n	23f8ee4 <_Z15bleCloudConnectv+0x130>
    cloudConnecting = false;
 23f8f10:	2200      	movs	r2, #0
 23f8f12:	701a      	strb	r2, [r3, #0]
}
 23f8f14:	e7e6      	b.n	23f8ee4 <_Z15bleCloudConnectv+0x130>
 23f8f16:	bf00      	nop
 23f8f18:	1007a9c8 	.word	0x1007a9c8
 23f8f1c:	023ff612 	.word	0x023ff612
 23f8f20:	1007ae74 	.word	0x1007ae74
 23f8f24:	1007aa00 	.word	0x1007aa00
 23f8f28:	023ff63b 	.word	0x023ff63b
 23f8f2c:	1007a938 	.word	0x1007a938
 23f8f30:	1007a9c0 	.word	0x1007a9c0
 23f8f34:	023ff653 	.word	0x023ff653
 23f8f38:	1007a94c 	.word	0x1007a94c
 23f8f3c:	1007a9f8 	.word	0x1007a9f8
 23f8f40:	1007a924 	.word	0x1007a924
 23f8f44:	1007a9a4 	.word	0x1007a9a4
 23f8f48:	023ff688 	.word	0x023ff688
 23f8f4c:	1007a961 	.word	0x1007a961
 23f8f50:	1007a910 	.word	0x1007a910
 23f8f54:	023ff61e 	.word	0x023ff61e

023f8f58 <_Z18checkButtonPressesv>:

void checkButtonPresses() {
 23f8f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Read current button states
  lockButtonState = digitalRead(lockButton);
 23f8f5a:	2002      	movs	r0, #2
 23f8f5c:	f005 feb8 	bl	23fecd0 <digitalRead>
 23f8f60:	4c12      	ldr	r4, [pc, #72]	; (23f8fac <_Z18checkButtonPressesv+0x54>)
  unLockButtonState = digitalRead(unLockButton); 
 23f8f62:	4e13      	ldr	r6, [pc, #76]	; (23f8fb0 <_Z18checkButtonPressesv+0x58>)
  lockButtonState = digitalRead(lockButton);
 23f8f64:	6020      	str	r0, [r4, #0]
  unLockButtonState = digitalRead(unLockButton); 
 23f8f66:	2003      	movs	r0, #3
 23f8f68:	f005 feb2 	bl	23fecd0 <digitalRead>

  // Handle button presses
  if (unLockButtonState == HIGH && prevUnLockButtonState == LOW) {
 23f8f6c:	2801      	cmp	r0, #1
 23f8f6e:	4d11      	ldr	r5, [pc, #68]	; (23f8fb4 <_Z18checkButtonPressesv+0x5c>)
  unLockButtonState = digitalRead(unLockButton); 
 23f8f70:	6030      	str	r0, [r6, #0]
  if (unLockButtonState == HIGH && prevUnLockButtonState == LOW) {
 23f8f72:	d108      	bne.n	23f8f86 <_Z18checkButtonPressesv+0x2e>
 23f8f74:	682b      	ldr	r3, [r5, #0]
 23f8f76:	b933      	cbnz	r3, 23f8f86 <_Z18checkButtonPressesv+0x2e>
    unlocking = true;
 23f8f78:	4b0f      	ldr	r3, [pc, #60]	; (23f8fb8 <_Z18checkButtonPressesv+0x60>)
 23f8f7a:	7018      	strb	r0, [r3, #0]
    Serial.println("Unlock button pressed");
 23f8f7c:	f005 fa6e 	bl	23fe45c <_Z16_fetch_usbserialv>
 23f8f80:	490e      	ldr	r1, [pc, #56]	; (23f8fbc <_Z18checkButtonPressesv+0x64>)
 23f8f82:	f003 fe16 	bl	23fcbb2 <_ZN5Print7printlnEPKc>
  }

  if (lockButtonState == HIGH && prevLockButtonState == LOW) {
 23f8f86:	6823      	ldr	r3, [r4, #0]
 23f8f88:	4f0d      	ldr	r7, [pc, #52]	; (23f8fc0 <_Z18checkButtonPressesv+0x68>)
 23f8f8a:	2b01      	cmp	r3, #1
 23f8f8c:	d108      	bne.n	23f8fa0 <_Z18checkButtonPressesv+0x48>
 23f8f8e:	683a      	ldr	r2, [r7, #0]
 23f8f90:	b932      	cbnz	r2, 23f8fa0 <_Z18checkButtonPressesv+0x48>
    locking = true;
 23f8f92:	4a0c      	ldr	r2, [pc, #48]	; (23f8fc4 <_Z18checkButtonPressesv+0x6c>)
 23f8f94:	7013      	strb	r3, [r2, #0]
    Serial.println("Lock button pressed");
 23f8f96:	f005 fa61 	bl	23fe45c <_Z16_fetch_usbserialv>
 23f8f9a:	490b      	ldr	r1, [pc, #44]	; (23f8fc8 <_Z18checkButtonPressesv+0x70>)
 23f8f9c:	f003 fe09 	bl	23fcbb2 <_ZN5Print7printlnEPKc>
  }

  // Update previous button states
  prevLockButtonState = lockButtonState;
 23f8fa0:	6823      	ldr	r3, [r4, #0]
 23f8fa2:	603b      	str	r3, [r7, #0]
  prevUnLockButtonState = unLockButtonState;
 23f8fa4:	6833      	ldr	r3, [r6, #0]
 23f8fa6:	602b      	str	r3, [r5, #0]
}
 23f8fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f8faa:	bf00      	nop
 23f8fac:	1007a978 	.word	0x1007a978
 23f8fb0:	1007ae3c 	.word	0x1007ae3c
 23f8fb4:	1007a9f4 	.word	0x1007a9f4
 23f8fb8:	1007ae40 	.word	0x1007ae40
 23f8fbc:	023ff69e 	.word	0x023ff69e
 23f8fc0:	1007a9e0 	.word	0x1007a9e0
 23f8fc4:	1007a97c 	.word	0x1007a97c
 23f8fc8:	023ff6b4 	.word	0x023ff6b4

023f8fcc <_Z12motorControlv>:

void motorControl() {
 23f8fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (locking) {
 23f8fce:	4e27      	ldr	r6, [pc, #156]	; (23f906c <_Z12motorControlv+0xa0>)
 23f8fd0:	4d27      	ldr	r5, [pc, #156]	; (23f9070 <_Z12motorControlv+0xa4>)
 23f8fd2:	7833      	ldrb	r3, [r6, #0]
 23f8fd4:	4c27      	ldr	r4, [pc, #156]	; (23f9074 <_Z12motorControlv+0xa8>)
 23f8fd6:	b1bb      	cbz	r3, 23f9008 <_Z12motorControlv+0x3c>
    curPH = HIGH;           // Set motor direction for lock
 23f8fd8:	2301      	movs	r3, #1
    speed = 40;
 23f8fda:	2128      	movs	r1, #40	; 0x28
 23f8fdc:	4a26      	ldr	r2, [pc, #152]	; (23f9078 <_Z12motorControlv+0xac>)
    curPH = HIGH;           // Set motor direction for lock
 23f8fde:	602b      	str	r3, [r5, #0]
    speed = 40;
 23f8fe0:	6011      	str	r1, [r2, #0]
    motorRunning = true;
 23f8fe2:	7023      	strb	r3, [r4, #0]
    motorRunning = true;
  }

  // Check limit switches (for normally closed setup)
  if (motorRunning) {
    if (curPH == HIGH && digitalRead(limitSwitch) == HIGH) {
 23f8fe4:	2006      	movs	r0, #6
 23f8fe6:	f005 fe73 	bl	23fecd0 <digitalRead>
 23f8fea:	2801      	cmp	r0, #1
 23f8fec:	d115      	bne.n	23f901a <_Z12motorControlv+0x4e>
      Serial.println("Lock limit switch triggered - stopping motor");
      motorRunning = false;
 23f8fee:	2700      	movs	r7, #0
      Serial.println("Lock limit switch triggered - stopping motor");
 23f8ff0:	f005 fa34 	bl	23fe45c <_Z16_fetch_usbserialv>
 23f8ff4:	4921      	ldr	r1, [pc, #132]	; (23f907c <_Z12motorControlv+0xb0>)
 23f8ff6:	f003 fddc 	bl	23fcbb2 <_ZN5Print7printlnEPKc>
      doorState = "locked";
 23f8ffa:	4921      	ldr	r1, [pc, #132]	; (23f9080 <_Z12motorControlv+0xb4>)
 23f8ffc:	4821      	ldr	r0, [pc, #132]	; (23f9084 <_Z12motorControlv+0xb8>)
      motorRunning = false;
 23f8ffe:	7027      	strb	r7, [r4, #0]
      doorState = "locked";
 23f9000:	f001 f8d8 	bl	23fa1b4 <_ZN6StringaSEPKc>
      locking = false;
 23f9004:	7037      	strb	r7, [r6, #0]
 23f9006:	e008      	b.n	23f901a <_Z12motorControlv+0x4e>
  else if (unlocking) {
 23f9008:	4a1f      	ldr	r2, [pc, #124]	; (23f9088 <_Z12motorControlv+0xbc>)
 23f900a:	7812      	ldrb	r2, [r2, #0]
 23f900c:	b32a      	cbz	r2, 23f905a <_Z12motorControlv+0x8e>
    speed = 40;             // Set motor speed
 23f900e:	2228      	movs	r2, #40	; 0x28
    curPH = LOW;            // Set motor direction for unlock
 23f9010:	602b      	str	r3, [r5, #0]
    speed = 40;             // Set motor speed
 23f9012:	4b19      	ldr	r3, [pc, #100]	; (23f9078 <_Z12motorControlv+0xac>)
 23f9014:	601a      	str	r2, [r3, #0]
    motorRunning = true;
 23f9016:	2301      	movs	r3, #1
 23f9018:	7023      	strb	r3, [r4, #0]
    }
    if (curPH == LOW && digitalRead(limitSwitch2) == HIGH) {
 23f901a:	682e      	ldr	r6, [r5, #0]
 23f901c:	b986      	cbnz	r6, 23f9040 <_Z12motorControlv+0x74>
 23f901e:	2007      	movs	r0, #7
 23f9020:	f005 fe56 	bl	23fecd0 <digitalRead>
 23f9024:	2801      	cmp	r0, #1
 23f9026:	d10b      	bne.n	23f9040 <_Z12motorControlv+0x74>
      Serial.println("Unlock limit switch triggered - stopping motor");
 23f9028:	f005 fa18 	bl	23fe45c <_Z16_fetch_usbserialv>
 23f902c:	4917      	ldr	r1, [pc, #92]	; (23f908c <_Z12motorControlv+0xc0>)
 23f902e:	f003 fdc0 	bl	23fcbb2 <_ZN5Print7printlnEPKc>
      motorRunning = false;
      doorState = "unlocked";
 23f9032:	4917      	ldr	r1, [pc, #92]	; (23f9090 <_Z12motorControlv+0xc4>)
 23f9034:	4813      	ldr	r0, [pc, #76]	; (23f9084 <_Z12motorControlv+0xb8>)
      motorRunning = false;
 23f9036:	7026      	strb	r6, [r4, #0]
      doorState = "unlocked";
 23f9038:	f001 f8bc 	bl	23fa1b4 <_ZN6StringaSEPKc>
      unlocking = false;
 23f903c:	4b12      	ldr	r3, [pc, #72]	; (23f9088 <_Z12motorControlv+0xbc>)
 23f903e:	701e      	strb	r6, [r3, #0]
    }
  }

  // Motor control
  if (motorRunning) {
 23f9040:	7823      	ldrb	r3, [r4, #0]
 23f9042:	b183      	cbz	r3, 23f9066 <_Z12motorControlv+0x9a>
    analogWrite(EN, speed); // Motor runs
 23f9044:	4b0c      	ldr	r3, [pc, #48]	; (23f9078 <_Z12motorControlv+0xac>)
 23f9046:	6819      	ldr	r1, [r3, #0]
  } else {
    analogWrite(EN, 0);     // Motor stopped
 23f9048:	200e      	movs	r0, #14
 23f904a:	f005 fe54 	bl	23fecf6 <_Z11analogWritetm>
  }

  // Always assert correct motor direction
  digitalWrite(PH, curPH);
 23f904e:	7829      	ldrb	r1, [r5, #0]
 23f9050:	2001      	movs	r0, #1
}
 23f9052:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  digitalWrite(PH, curPH);
 23f9056:	f005 be22 	b.w	23fec9e <digitalWrite>
  if (motorRunning) {
 23f905a:	7823      	ldrb	r3, [r4, #0]
 23f905c:	b11b      	cbz	r3, 23f9066 <_Z12motorControlv+0x9a>
    if (curPH == HIGH && digitalRead(limitSwitch) == HIGH) {
 23f905e:	682b      	ldr	r3, [r5, #0]
 23f9060:	2b01      	cmp	r3, #1
 23f9062:	d1da      	bne.n	23f901a <_Z12motorControlv+0x4e>
 23f9064:	e7be      	b.n	23f8fe4 <_Z12motorControlv+0x18>
    analogWrite(EN, 0);     // Motor stopped
 23f9066:	2100      	movs	r1, #0
 23f9068:	e7ee      	b.n	23f9048 <_Z12motorControlv+0x7c>
 23f906a:	bf00      	nop
 23f906c:	1007a97c 	.word	0x1007a97c
 23f9070:	1007a964 	.word	0x1007a964
 23f9074:	1007a9bc 	.word	0x1007a9bc
 23f9078:	1007ae38 	.word	0x1007ae38
 23f907c:	023ff6c8 	.word	0x023ff6c8
 23f9080:	023ff72b 	.word	0x023ff72b
 23f9084:	1007a968 	.word	0x1007a968
 23f9088:	1007ae40 	.word	0x1007ae40
 23f908c:	023ff6f5 	.word	0x023ff6f5
 23f9090:	023ff59b 	.word	0x023ff59b

023f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23f9094:	b510      	push	{r4, lr}
 23f9096:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23f9098:	6800      	ldr	r0, [r0, #0]
 23f909a:	b108      	cbz	r0, 23f90a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23f909c:	f7ff fd6c 	bl	23f8b78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23f90a0:	4620      	mov	r0, r4
 23f90a2:	bd10      	pop	{r4, pc}

023f90a4 <_Z16doorStateChangedv>:
bool doorStateChanged() {
 23f90a4:	b507      	push	{r0, r1, r2, lr}
    unsigned char operator != (const String &rhs) const {return !equals(rhs);}
 23f90a6:	4911      	ldr	r1, [pc, #68]	; (23f90ec <_Z16doorStateChangedv+0x48>)
 23f90a8:	4811      	ldr	r0, [pc, #68]	; (23f90f0 <_Z16doorStateChangedv+0x4c>)
 23f90aa:	f001 f8d3 	bl	23fa254 <_ZNK6String6equalsERKS_>
  if (doorState != prevDoorState) {
 23f90ae:	b9c8      	cbnz	r0, 23f90e4 <_Z16doorStateChangedv+0x40>
    prevDoorState = doorState;
 23f90b0:	490f      	ldr	r1, [pc, #60]	; (23f90f0 <_Z16doorStateChangedv+0x4c>)
 23f90b2:	480e      	ldr	r0, [pc, #56]	; (23f90ec <_Z16doorStateChangedv+0x48>)
 23f90b4:	f001 f85c 	bl	23fa170 <_ZN6StringaSERKS_>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f90b8:	490e      	ldr	r1, [pc, #56]	; (23f90f4 <_Z16doorStateChangedv+0x50>)
 23f90ba:	480d      	ldr	r0, [pc, #52]	; (23f90f0 <_Z16doorStateChangedv+0x4c>)
 23f90bc:	f001 f8d7 	bl	23fa26e <_ZNK6String6equalsEPKc>
    if (doorState == "unlocked") {
 23f90c0:	b140      	cbz	r0, 23f90d4 <_Z16doorStateChangedv+0x30>
      Particle.publish("Door Unlocked");
 23f90c2:	490d      	ldr	r1, [pc, #52]	; (23f90f8 <_Z16doorStateChangedv+0x54>)
      Particle.publish("Door Locked");
 23f90c4:	4668      	mov	r0, sp
 23f90c6:	f7ff fd21 	bl	23f8b0c <_ZN10CloudClass7publishEPKc.isra.0>
      ~__shared_ptr() = default;
 23f90ca:	a801      	add	r0, sp, #4
 23f90cc:	f7ff ffe2 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f90d0:	2001      	movs	r0, #1
 23f90d2:	e008      	b.n	23f90e6 <_Z16doorStateChangedv+0x42>
 23f90d4:	4909      	ldr	r1, [pc, #36]	; (23f90fc <_Z16doorStateChangedv+0x58>)
 23f90d6:	4806      	ldr	r0, [pc, #24]	; (23f90f0 <_Z16doorStateChangedv+0x4c>)
 23f90d8:	f001 f8c9 	bl	23fa26e <_ZNK6String6equalsEPKc>
    else if (doorState == "locked") {
 23f90dc:	2800      	cmp	r0, #0
 23f90de:	d0f7      	beq.n	23f90d0 <_Z16doorStateChangedv+0x2c>
      Particle.publish("Door Locked");
 23f90e0:	4907      	ldr	r1, [pc, #28]	; (23f9100 <_Z16doorStateChangedv+0x5c>)
 23f90e2:	e7ef      	b.n	23f90c4 <_Z16doorStateChangedv+0x20>
    return false;
 23f90e4:	2000      	movs	r0, #0
}
 23f90e6:	b003      	add	sp, #12
 23f90e8:	f85d fb04 	ldr.w	pc, [sp], #4
 23f90ec:	1007a9d0 	.word	0x1007a9d0
 23f90f0:	1007a968 	.word	0x1007a968
 23f90f4:	023ff59b 	.word	0x023ff59b
 23f90f8:	023ff724 	.word	0x023ff724
 23f90fc:	023ff72b 	.word	0x023ff72b
 23f9100:	023ff732 	.word	0x023ff732

023f9104 <_Z18manualStateChangedv>:
bool manualStateChanged() {
 23f9104:	b507      	push	{r0, r1, r2, lr}
    unsigned char operator != (const String &rhs) const {return !equals(rhs);}
 23f9106:	4911      	ldr	r1, [pc, #68]	; (23f914c <_Z18manualStateChangedv+0x48>)
 23f9108:	4811      	ldr	r0, [pc, #68]	; (23f9150 <_Z18manualStateChangedv+0x4c>)
 23f910a:	f001 f8a3 	bl	23fa254 <_ZNK6String6equalsERKS_>
  if (manualState != prevManualState) {
 23f910e:	b9c8      	cbnz	r0, 23f9144 <_Z18manualStateChangedv+0x40>
    prevManualState = manualState;
 23f9110:	490f      	ldr	r1, [pc, #60]	; (23f9150 <_Z18manualStateChangedv+0x4c>)
 23f9112:	480e      	ldr	r0, [pc, #56]	; (23f914c <_Z18manualStateChangedv+0x48>)
 23f9114:	f001 f82c 	bl	23fa170 <_ZN6StringaSERKS_>
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f9118:	490e      	ldr	r1, [pc, #56]	; (23f9154 <_Z18manualStateChangedv+0x50>)
 23f911a:	480d      	ldr	r0, [pc, #52]	; (23f9150 <_Z18manualStateChangedv+0x4c>)
 23f911c:	f001 f8a7 	bl	23fa26e <_ZNK6String6equalsEPKc>
    if (manualState == "unlocked") {
 23f9120:	b140      	cbz	r0, 23f9134 <_Z18manualStateChangedv+0x30>
      Particle.publish("Door Unfrozen");
 23f9122:	490d      	ldr	r1, [pc, #52]	; (23f9158 <_Z18manualStateChangedv+0x54>)
      Particle.publish("Door Frozen");
 23f9124:	4668      	mov	r0, sp
 23f9126:	f7ff fcf1 	bl	23f8b0c <_ZN10CloudClass7publishEPKc.isra.0>
 23f912a:	a801      	add	r0, sp, #4
 23f912c:	f7ff ffb2 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f9130:	2001      	movs	r0, #1
 23f9132:	e008      	b.n	23f9146 <_Z18manualStateChangedv+0x42>
 23f9134:	4909      	ldr	r1, [pc, #36]	; (23f915c <_Z18manualStateChangedv+0x58>)
 23f9136:	4806      	ldr	r0, [pc, #24]	; (23f9150 <_Z18manualStateChangedv+0x4c>)
 23f9138:	f001 f899 	bl	23fa26e <_ZNK6String6equalsEPKc>
    else if (manualState == "locked") {
 23f913c:	2800      	cmp	r0, #0
 23f913e:	d0f7      	beq.n	23f9130 <_Z18manualStateChangedv+0x2c>
      Particle.publish("Door Frozen");
 23f9140:	4907      	ldr	r1, [pc, #28]	; (23f9160 <_Z18manualStateChangedv+0x5c>)
 23f9142:	e7ef      	b.n	23f9124 <_Z18manualStateChangedv+0x20>
    return false;
 23f9144:	2000      	movs	r0, #0
}
 23f9146:	b003      	add	sp, #12
 23f9148:	f85d fb04 	ldr.w	pc, [sp], #4
 23f914c:	1007a9e4 	.word	0x1007a9e4
 23f9150:	1007a9ac 	.word	0x1007a9ac
 23f9154:	023ff59b 	.word	0x023ff59b
 23f9158:	023ff73e 	.word	0x023ff73e
 23f915c:	023ff72b 	.word	0x023ff72b
 23f9160:	023ff74c 	.word	0x023ff74c

023f9164 <_Z16sendStateChangesv>:

void sendStateChanges() {
 23f9164:	b510      	push	{r4, lr}
  if (doorStateChanged()) { 
 23f9166:	f7ff ff9d 	bl	23f90a4 <_Z16doorStateChangedv>
 23f916a:	b1b0      	cbz	r0, 23f919a <_Z16sendStateChangesv+0x36>
    if (peer.connected()) {
 23f916c:	4818      	ldr	r0, [pc, #96]	; (23f91d0 <_Z16sendStateChangesv+0x6c>)
 23f916e:	f001 fd8b 	bl	23fac88 <_ZNK8particle13BlePeerDevice9connectedEv>
 23f9172:	4c18      	ldr	r4, [pc, #96]	; (23f91d4 <_Z16sendStateChangesv+0x70>)
 23f9174:	b148      	cbz	r0, 23f918a <_Z16sendStateChangesv+0x26>
      const char* state1 = doorState;
      responseChar.setValue(state1);
 23f9176:	2200      	movs	r2, #0
 23f9178:	6821      	ldr	r1, [r4, #0]
 23f917a:	4817      	ldr	r0, [pc, #92]	; (23f91d8 <_Z16sendStateChangesv+0x74>)
 23f917c:	f001 fcf8 	bl	23fab70 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      Log.info("Sent Response Value: %s", doorState.c_str());
 23f9180:	6822      	ldr	r2, [r4, #0]
 23f9182:	4916      	ldr	r1, [pc, #88]	; (23f91dc <_Z16sendStateChangesv+0x78>)
 23f9184:	4816      	ldr	r0, [pc, #88]	; (23f91e0 <_Z16sendStateChangesv+0x7c>)
 23f9186:	f7ff fd0b 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
 23f918a:	4916      	ldr	r1, [pc, #88]	; (23f91e4 <_Z16sendStateChangesv+0x80>)
 23f918c:	4811      	ldr	r0, [pc, #68]	; (23f91d4 <_Z16sendStateChangesv+0x70>)
 23f918e:	f001 f86e 	bl	23fa26e <_ZNK6String6equalsEPKc>
    }
    if (doorState == "locked") {
 23f9192:	b1a8      	cbz	r0, 23f91c0 <_Z16sendStateChangesv+0x5c>
      locking = true;
 23f9194:	4b14      	ldr	r3, [pc, #80]	; (23f91e8 <_Z16sendStateChangesv+0x84>)
    }
    else if (doorState == "unlocked") {
      unlocking = true;
 23f9196:	2201      	movs	r2, #1
 23f9198:	701a      	strb	r2, [r3, #0]
    }
  }

  if (manualStateChanged()) {
 23f919a:	f7ff ffb3 	bl	23f9104 <_Z18manualStateChangedv>
 23f919e:	b170      	cbz	r0, 23f91be <_Z16sendStateChangesv+0x5a>
    if (peer.connected()) {
 23f91a0:	480b      	ldr	r0, [pc, #44]	; (23f91d0 <_Z16sendStateChangesv+0x6c>)
 23f91a2:	f001 fd71 	bl	23fac88 <_ZNK8particle13BlePeerDevice9connectedEv>
 23f91a6:	b150      	cbz	r0, 23f91be <_Z16sendStateChangesv+0x5a>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23f91a8:	4c10      	ldr	r4, [pc, #64]	; (23f91ec <_Z16sendStateChangesv+0x88>)
      const char* state2 = manualState;
      manualChar.setValue(state2);
 23f91aa:	2200      	movs	r2, #0
 23f91ac:	6821      	ldr	r1, [r4, #0]
 23f91ae:	4810      	ldr	r0, [pc, #64]	; (23f91f0 <_Z16sendStateChangesv+0x8c>)
 23f91b0:	f001 fcde 	bl	23fab70 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
      Log.info("Sent Response Value: %s", manualState.c_str());
 23f91b4:	6822      	ldr	r2, [r4, #0]
 23f91b6:	4909      	ldr	r1, [pc, #36]	; (23f91dc <_Z16sendStateChangesv+0x78>)
 23f91b8:	4809      	ldr	r0, [pc, #36]	; (23f91e0 <_Z16sendStateChangesv+0x7c>)
 23f91ba:	f7ff fcf1 	bl	23f8ba0 <_ZNK5spark6Logger4infoEPKcz>
    }
  }
}
 23f91be:	bd10      	pop	{r4, pc}
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f91c0:	490c      	ldr	r1, [pc, #48]	; (23f91f4 <_Z16sendStateChangesv+0x90>)
 23f91c2:	4804      	ldr	r0, [pc, #16]	; (23f91d4 <_Z16sendStateChangesv+0x70>)
 23f91c4:	f001 f853 	bl	23fa26e <_ZNK6String6equalsEPKc>
    else if (doorState == "unlocked") {
 23f91c8:	2800      	cmp	r0, #0
 23f91ca:	d0e6      	beq.n	23f919a <_Z16sendStateChangesv+0x36>
      unlocking = true;
 23f91cc:	4b0a      	ldr	r3, [pc, #40]	; (23f91f8 <_Z16sendStateChangesv+0x94>)
 23f91ce:	e7e2      	b.n	23f9196 <_Z16sendStateChangesv+0x32>
 23f91d0:	1007a9c8 	.word	0x1007a9c8
 23f91d4:	1007a968 	.word	0x1007a968
 23f91d8:	1007a9f8 	.word	0x1007a9f8
 23f91dc:	023ff758 	.word	0x023ff758
 23f91e0:	1007ae74 	.word	0x1007ae74
 23f91e4:	023ff72b 	.word	0x023ff72b
 23f91e8:	1007a97c 	.word	0x1007a97c
 23f91ec:	1007a9ac 	.word	0x1007a9ac
 23f91f0:	1007a9a4 	.word	0x1007a9a4
 23f91f4:	023ff59b 	.word	0x023ff59b
 23f91f8:	1007ae40 	.word	0x1007ae40

023f91fc <loop>:
void loop() {
 23f91fc:	b508      	push	{r3, lr}
  bleCloudConnect();
 23f91fe:	f7ff fdd9 	bl	23f8db4 <_Z15bleCloudConnectv>
  checkButtonPresses();
 23f9202:	f7ff fea9 	bl	23f8f58 <_Z18checkButtonPressesv>
  motorControl();
 23f9206:	f7ff fee1 	bl	23f8fcc <_Z12motorControlv>
  sendStateChanges();
 23f920a:	f7ff ffab 	bl	23f9164 <_Z16sendStateChangesv>
 23f920e:	4909      	ldr	r1, [pc, #36]	; (23f9234 <loop+0x38>)
 23f9210:	4809      	ldr	r0, [pc, #36]	; (23f9238 <loop+0x3c>)
 23f9212:	f001 f82c 	bl	23fa26e <_ZNK6String6equalsEPKc>
  if (doorState == "unlocked" && !motorRunning) {
 23f9216:	b158      	cbz	r0, 23f9230 <loop+0x34>
 23f9218:	4b08      	ldr	r3, [pc, #32]	; (23f923c <loop+0x40>)
 23f921a:	781b      	ldrb	r3, [r3, #0]
 23f921c:	b943      	cbnz	r3, 23f9230 <loop+0x34>
    digitalWrite(ledPin, HIGH);  //visual test
 23f921e:	2101      	movs	r1, #1
    digitalWrite(ledPin, LOW);  
 23f9220:	2004      	movs	r0, #4
 23f9222:	f005 fd3c 	bl	23fec9e <digitalWrite>
}
 23f9226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(25);
 23f922a:	2019      	movs	r0, #25
 23f922c:	f004 bcc2 	b.w	23fdbb4 <delay>
    digitalWrite(ledPin, LOW);  
 23f9230:	2100      	movs	r1, #0
 23f9232:	e7f5      	b.n	23f9220 <loop+0x24>
 23f9234:	023ff59b 	.word	0x023ff59b
 23f9238:	1007a968 	.word	0x1007a968
 23f923c:	1007a9bc 	.word	0x1007a9bc

023f9240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f9240:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f9242:	2614      	movs	r6, #20
 23f9244:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f9248:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f924a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f924e:	42ae      	cmp	r6, r5
 23f9250:	d004      	beq.n	23f925c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f9252:	4628      	mov	r0, r5
 23f9254:	f000 fef8 	bl	23fa048 <_ZN6StringD1Ev>
 23f9258:	3514      	adds	r5, #20
 23f925a:	e7f8      	b.n	23f924e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f925c:	6820      	ldr	r0, [r4, #0]
 23f925e:	f000 fe17 	bl	23f9e90 <free>
    AllocatorT::free(data_);
}
 23f9262:	4620      	mov	r0, r4
 23f9264:	bd70      	pop	{r4, r5, r6, pc}

023f9266 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f9266:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f9268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f926a:	4604      	mov	r4, r0
 23f926c:	460d      	mov	r5, r1
 23f926e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f9270:	d916      	bls.n	23f92a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f9272:	4290      	cmp	r0, r2
 23f9274:	d215      	bcs.n	23f92a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f9276:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f927a:	1a75      	subs	r5, r6, r1
 23f927c:	f1a1 0714 	sub.w	r7, r1, #20
 23f9280:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f9282:	42b7      	cmp	r7, r6
 23f9284:	d01c      	beq.n	23f92c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f9286:	b12c      	cbz	r4, 23f9294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f9288:	4631      	mov	r1, r6
 23f928a:	4620      	mov	r0, r4
 23f928c:	f000 ff65 	bl	23fa15a <_ZN6StringC1EOS_>
 23f9290:	7c33      	ldrb	r3, [r6, #16]
 23f9292:	7423      	strb	r3, [r4, #16]
 23f9294:	4630      	mov	r0, r6
 23f9296:	f000 fed7 	bl	23fa048 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f929a:	3e14      	subs	r6, #20
 23f929c:	3c14      	subs	r4, #20
 23f929e:	e7f0      	b.n	23f9282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f92a0:	d00e      	beq.n	23f92c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f92a2:	42b5      	cmp	r5, r6
 23f92a4:	d00c      	beq.n	23f92c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f92a6:	b12c      	cbz	r4, 23f92b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f92a8:	4629      	mov	r1, r5
 23f92aa:	4620      	mov	r0, r4
 23f92ac:	f000 ff55 	bl	23fa15a <_ZN6StringC1EOS_>
 23f92b0:	7c2b      	ldrb	r3, [r5, #16]
 23f92b2:	7423      	strb	r3, [r4, #16]
 23f92b4:	4628      	mov	r0, r5
 23f92b6:	f000 fec7 	bl	23fa048 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f92ba:	3514      	adds	r5, #20
 23f92bc:	3414      	adds	r4, #20
 23f92be:	e7f0      	b.n	23f92a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f92c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f92c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f92c2:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f92c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f92c8:	e9c0 3300 	strd	r3, r3, [r0]
 23f92cc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f92ce:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f92d0:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f92d2:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f92d4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f92d6:	dd24      	ble.n	23f9322 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f92d8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f92dc:	fb08 f007 	mul.w	r0, r8, r7
 23f92e0:	f000 fdc8 	bl	23f9e74 <malloc>
            if (!d) {
 23f92e4:	4605      	mov	r5, r0
 23f92e6:	b1e0      	cbz	r0, 23f9322 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f92e8:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f92ec:	fb08 1202 	mla	r2, r8, r2, r1
 23f92f0:	f7ff ffb9 	bl	23f9266 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f92f4:	6820      	ldr	r0, [r4, #0]
 23f92f6:	f000 fdcb 	bl	23f9e90 <free>
        data_ = d;
 23f92fa:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f92fc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f92fe:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f9302:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f9306:	45b8      	cmp	r8, r7
 23f9308:	d009      	beq.n	23f931e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f930a:	4639      	mov	r1, r7
 23f930c:	4628      	mov	r0, r5
 23f930e:	f000 ff3e 	bl	23fa18e <_ZN6StringC1ERKS_>
 23f9312:	7c3b      	ldrb	r3, [r7, #16]
 23f9314:	3514      	adds	r5, #20
 23f9316:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f931a:	3714      	adds	r7, #20
 23f931c:	e7f3      	b.n	23f9306 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f931e:	6873      	ldr	r3, [r6, #4]
 23f9320:	6063      	str	r3, [r4, #4]
}
 23f9322:	4620      	mov	r0, r4
 23f9324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f9328 <_GLOBAL__sub_I_SystemMode>:
}
 23f9328:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f932a:	2400      	movs	r4, #0
 23f932c:	4b41      	ldr	r3, [pc, #260]	; (23f9434 <_GLOBAL__sub_I_SystemMode+0x10c>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
 23f932e:	4a42      	ldr	r2, [pc, #264]	; (23f9438 <_GLOBAL__sub_I_SystemMode+0x110>)
 23f9330:	701c      	strb	r4, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f9332:	4b42      	ldr	r3, [pc, #264]	; (23f943c <_GLOBAL__sub_I_SystemMode+0x114>)
 23f9334:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
 23f9336:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23f9338:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f933c:	2002      	movs	r0, #2
 23f933e:	f000 fc2d 	bl	23f9b9c <set_system_mode>
        capacity_(0) {
 23f9342:	e9cd 4400 	strd	r4, r4, [sp]
 23f9346:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f9348:	f005 f888 	bl	23fe45c <_Z16_fetch_usbserialv>
 23f934c:	4605      	mov	r5, r0
 23f934e:	4669      	mov	r1, sp
 23f9350:	a803      	add	r0, sp, #12
 23f9352:	f7ff ffb6 	bl	23f92c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23f9356:	a903      	add	r1, sp, #12
 23f9358:	a806      	add	r0, sp, #24
        filter_(level, filters) {
 23f935a:	4c39      	ldr	r4, [pc, #228]	; (23f9440 <_GLOBAL__sub_I_SystemMode+0x118>)
        stream_(&stream) {
 23f935c:	f7ff ffb1 	bl	23f92c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f9360:	4b38      	ldr	r3, [pc, #224]	; (23f9444 <_GLOBAL__sub_I_SystemMode+0x11c>)
 23f9362:	a906      	add	r1, sp, #24
 23f9364:	6023      	str	r3, [r4, #0]
 23f9366:	a809      	add	r0, sp, #36	; 0x24
 23f9368:	f7ff ffab 	bl	23f92c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f936c:	aa09      	add	r2, sp, #36	; 0x24
 23f936e:	211e      	movs	r1, #30
 23f9370:	1d20      	adds	r0, r4, #4
 23f9372:	f004 f8fd 	bl	23fd570 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f9376:	a809      	add	r0, sp, #36	; 0x24
 23f9378:	f7ff ff62 	bl	23f9240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f937c:	a806      	add	r0, sp, #24
 23f937e:	f7ff ff5f 	bl	23f9240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f9382:	4b31      	ldr	r3, [pc, #196]	; (23f9448 <_GLOBAL__sub_I_SystemMode+0x120>)
 23f9384:	6225      	str	r5, [r4, #32]
 23f9386:	6023      	str	r3, [r4, #0]
 23f9388:	a803      	add	r0, sp, #12
 23f938a:	f7ff ff59 	bl	23f9240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f938e:	4b2f      	ldr	r3, [pc, #188]	; (23f944c <_GLOBAL__sub_I_SystemMode+0x124>)
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23f9390:	251e      	movs	r5, #30
 23f9392:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f9394:	f005 f862 	bl	23fe45c <_Z16_fetch_usbserialv>
 23f9398:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f939c:	f005 f84e 	bl	23fe43c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f93a0:	f003 fdb8 	bl	23fcf14 <_ZN5spark10LogManager8instanceEv>
 23f93a4:	4621      	mov	r1, r4
 23f93a6:	f003 ffbb 	bl	23fd320 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 23f93aa:	4668      	mov	r0, sp
 23f93ac:	f7ff ff48 	bl	23f9240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>


class BleScanResult {
public:
    BleScanResult()
            : rssi_(BLE_RSSI_INVALID) {
 23f93b0:	267f      	movs	r6, #127	; 0x7f
 23f93b2:	4c27      	ldr	r4, [pc, #156]	; (23f9450 <_GLOBAL__sub_I_SystemMode+0x128>)
 23f93b4:	4620      	mov	r0, r4
 23f93b6:	f001 f941 	bl	23fa63c <_ZN8particle10BleAddressC1Ev>
 23f93ba:	f104 0008 	add.w	r0, r4, #8
 23f93be:	f002 f95d 	bl	23fb67c <_ZN8particle18BleAdvertisingDataC1Ev>
 23f93c2:	f104 0014 	add.w	r0, r4, #20
 23f93c6:	f002 f959 	bl	23fb67c <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[scanResultsCount];
 23f93ca:	3d01      	subs	r5, #1
 23f93cc:	f884 6020 	strb.w	r6, [r4, #32]
 23f93d0:	f104 0424 	add.w	r4, r4, #36	; 0x24
 23f93d4:	d1ee      	bne.n	23f93b4 <_GLOBAL__sub_I_SystemMode+0x8c>
BlePeerDevice peer;
 23f93d6:	481f      	ldr	r0, [pc, #124]	; (23f9454 <_GLOBAL__sub_I_SystemMode+0x12c>)
 23f93d8:	f001 fc32 	bl	23fac40 <_ZN8particle13BlePeerDeviceC1Ev>
BleCharacteristic notifyChar;
 23f93dc:	481e      	ldr	r0, [pc, #120]	; (23f9458 <_GLOBAL__sub_I_SystemMode+0x130>)
 23f93de:	f001 fb41 	bl	23faa64 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic responseChar;
 23f93e2:	481e      	ldr	r0, [pc, #120]	; (23f945c <_GLOBAL__sub_I_SystemMode+0x134>)
 23f93e4:	f001 fb3e 	bl	23faa64 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic manualChar;
 23f93e8:	481d      	ldr	r0, [pc, #116]	; (23f9460 <_GLOBAL__sub_I_SystemMode+0x138>)
 23f93ea:	f001 fb3b 	bl	23faa64 <_ZN8particle17BleCharacteristicC1Ev>
const BleUuid serviceUuid("1AD18FF7-2A5A-44D7-B0A6-A87BA00A50E5");
 23f93ee:	491d      	ldr	r1, [pc, #116]	; (23f9464 <_GLOBAL__sub_I_SystemMode+0x13c>)
 23f93f0:	481d      	ldr	r0, [pc, #116]	; (23f9468 <_GLOBAL__sub_I_SystemMode+0x140>)
 23f93f2:	f001 fa07 	bl	23fa804 <_ZN8particle7BleUuidC1EPKc>
const BleUuid notifyCharUuid("2AD18FF7-2A5A-44D7-B0A6-A87BA00A50E5");
 23f93f6:	491d      	ldr	r1, [pc, #116]	; (23f946c <_GLOBAL__sub_I_SystemMode+0x144>)
 23f93f8:	481d      	ldr	r0, [pc, #116]	; (23f9470 <_GLOBAL__sub_I_SystemMode+0x148>)
 23f93fa:	f001 fa03 	bl	23fa804 <_ZN8particle7BleUuidC1EPKc>
const BleUuid responseCharUuid("3AD18FF7-2A5A-44D7-B0A6-A87BA00A50E5");
 23f93fe:	491d      	ldr	r1, [pc, #116]	; (23f9474 <_GLOBAL__sub_I_SystemMode+0x14c>)
 23f9400:	481d      	ldr	r0, [pc, #116]	; (23f9478 <_GLOBAL__sub_I_SystemMode+0x150>)
 23f9402:	f001 f9ff 	bl	23fa804 <_ZN8particle7BleUuidC1EPKc>
const BleUuid manualCharUuid("4AD18FF7-2A5A-44D7-B0A6-A87BA00A50E5");
 23f9406:	491d      	ldr	r1, [pc, #116]	; (23f947c <_GLOBAL__sub_I_SystemMode+0x154>)
 23f9408:	481d      	ldr	r0, [pc, #116]	; (23f9480 <_GLOBAL__sub_I_SystemMode+0x158>)
 23f940a:	f001 f9fb 	bl	23fa804 <_ZN8particle7BleUuidC1EPKc>
String doorState = "locked";
 23f940e:	491d      	ldr	r1, [pc, #116]	; (23f9484 <_GLOBAL__sub_I_SystemMode+0x15c>)
 23f9410:	481d      	ldr	r0, [pc, #116]	; (23f9488 <_GLOBAL__sub_I_SystemMode+0x160>)
 23f9412:	f000 fe64 	bl	23fa0de <_ZN6StringC1EPK19__FlashStringHelper>
String prevDoorState = "locked";
 23f9416:	491b      	ldr	r1, [pc, #108]	; (23f9484 <_GLOBAL__sub_I_SystemMode+0x15c>)
 23f9418:	481c      	ldr	r0, [pc, #112]	; (23f948c <_GLOBAL__sub_I_SystemMode+0x164>)
 23f941a:	f000 fe60 	bl	23fa0de <_ZN6StringC1EPK19__FlashStringHelper>
String manualState = "unlocked";
 23f941e:	491c      	ldr	r1, [pc, #112]	; (23f9490 <_GLOBAL__sub_I_SystemMode+0x168>)
 23f9420:	481c      	ldr	r0, [pc, #112]	; (23f9494 <_GLOBAL__sub_I_SystemMode+0x16c>)
 23f9422:	f000 fe5c 	bl	23fa0de <_ZN6StringC1EPK19__FlashStringHelper>
String prevManualState = "unlocked";
 23f9426:	491a      	ldr	r1, [pc, #104]	; (23f9490 <_GLOBAL__sub_I_SystemMode+0x168>)
 23f9428:	481b      	ldr	r0, [pc, #108]	; (23f9498 <_GLOBAL__sub_I_SystemMode+0x170>)
}
 23f942a:	b00c      	add	sp, #48	; 0x30
 23f942c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String prevManualState = "unlocked";
 23f9430:	f000 be55 	b.w	23fa0de <_ZN6StringC1EPK19__FlashStringHelper>
 23f9434:	1007a960 	.word	0x1007a960
 23f9438:	ffff0000 	.word	0xffff0000
 23f943c:	1007a904 	.word	0x1007a904
 23f9440:	1007a980 	.word	0x1007a980
 23f9444:	023ff80c 	.word	0x023ff80c
 23f9448:	023ffb6c 	.word	0x023ffb6c
 23f944c:	023ff824 	.word	0x023ff824
 23f9450:	1007aa00 	.word	0x1007aa00
 23f9454:	1007a9c8 	.word	0x1007a9c8
 23f9458:	1007a9c0 	.word	0x1007a9c0
 23f945c:	1007a9f8 	.word	0x1007a9f8
 23f9460:	1007a9a4 	.word	0x1007a9a4
 23f9464:	023ff770 	.word	0x023ff770
 23f9468:	1007a910 	.word	0x1007a910
 23f946c:	023ff795 	.word	0x023ff795
 23f9470:	1007a938 	.word	0x1007a938
 23f9474:	023ff7ba 	.word	0x023ff7ba
 23f9478:	1007a94c 	.word	0x1007a94c
 23f947c:	023ff7df 	.word	0x023ff7df
 23f9480:	1007a924 	.word	0x1007a924
 23f9484:	023ff72b 	.word	0x023ff72b
 23f9488:	1007a968 	.word	0x1007a968
 23f948c:	1007a9d0 	.word	0x1007a9d0
 23f9490:	023ff59b 	.word	0x023ff59b
 23f9494:	1007a9ac 	.word	0x1007a9ac
 23f9498:	1007a9e4 	.word	0x1007a9e4

023f949c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f949c:	b509      	push	{r0, r3, lr}
 23f949e:	4804      	ldr	r0, [pc, #16]	; (23f94b0 <netdb_freeaddrinfo+0x14>)
 23f94a0:	6800      	ldr	r0, [r0, #0]
 23f94a2:	4b04      	ldr	r3, [pc, #16]	; (23f94b4 <netdb_freeaddrinfo+0x18>)
 23f94a4:	4403      	add	r3, r0
 23f94a6:	681b      	ldr	r3, [r3, #0]
 23f94a8:	689b      	ldr	r3, [r3, #8]
 23f94aa:	9302      	str	r3, [sp, #8]
 23f94ac:	bd09      	pop	{r0, r3, pc}
 23f94ae:	0000      	.short	0x0000
 23f94b0:	1007a88c 	.word	0x1007a88c
 23f94b4:	00000050 	.word	0x00000050

023f94b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f94b8:	b509      	push	{r0, r3, lr}
 23f94ba:	4804      	ldr	r0, [pc, #16]	; (23f94cc <netdb_getaddrinfo+0x14>)
 23f94bc:	6800      	ldr	r0, [r0, #0]
 23f94be:	4b04      	ldr	r3, [pc, #16]	; (23f94d0 <netdb_getaddrinfo+0x18>)
 23f94c0:	4403      	add	r3, r0
 23f94c2:	681b      	ldr	r3, [r3, #0]
 23f94c4:	68db      	ldr	r3, [r3, #12]
 23f94c6:	9302      	str	r3, [sp, #8]
 23f94c8:	bd09      	pop	{r0, r3, pc}
 23f94ca:	0000      	.short	0x0000
 23f94cc:	1007a88c 	.word	0x1007a88c
 23f94d0:	00000050 	.word	0x00000050

023f94d4 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23f94d4:	b509      	push	{r0, r3, lr}
 23f94d6:	4804      	ldr	r0, [pc, #16]	; (23f94e8 <hal_pin_validate_function+0x14>)
 23f94d8:	6800      	ldr	r0, [r0, #0]
 23f94da:	4b04      	ldr	r3, [pc, #16]	; (23f94ec <hal_pin_validate_function+0x18>)
 23f94dc:	4403      	add	r3, r0
 23f94de:	681b      	ldr	r3, [r3, #0]
 23f94e0:	685b      	ldr	r3, [r3, #4]
 23f94e2:	9302      	str	r3, [sp, #8]
 23f94e4:	bd09      	pop	{r0, r3, pc}
 23f94e6:	0000      	.short	0x0000
 23f94e8:	1007a88c 	.word	0x1007a88c
 23f94ec:	00000014 	.word	0x00000014

023f94f0 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f94f0:	b509      	push	{r0, r3, lr}
 23f94f2:	4804      	ldr	r0, [pc, #16]	; (23f9504 <hal_gpio_mode+0x14>)
 23f94f4:	6800      	ldr	r0, [r0, #0]
 23f94f6:	4b04      	ldr	r3, [pc, #16]	; (23f9508 <hal_gpio_mode+0x18>)
 23f94f8:	4403      	add	r3, r0
 23f94fa:	681b      	ldr	r3, [r3, #0]
 23f94fc:	689b      	ldr	r3, [r3, #8]
 23f94fe:	9302      	str	r3, [sp, #8]
 23f9500:	bd09      	pop	{r0, r3, pc}
 23f9502:	0000      	.short	0x0000
 23f9504:	1007a88c 	.word	0x1007a88c
 23f9508:	00000014 	.word	0x00000014

023f950c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f950c:	b509      	push	{r0, r3, lr}
 23f950e:	4804      	ldr	r0, [pc, #16]	; (23f9520 <hal_gpio_get_mode+0x14>)
 23f9510:	6800      	ldr	r0, [r0, #0]
 23f9512:	4b04      	ldr	r3, [pc, #16]	; (23f9524 <hal_gpio_get_mode+0x18>)
 23f9514:	4403      	add	r3, r0
 23f9516:	681b      	ldr	r3, [r3, #0]
 23f9518:	68db      	ldr	r3, [r3, #12]
 23f951a:	9302      	str	r3, [sp, #8]
 23f951c:	bd09      	pop	{r0, r3, pc}
 23f951e:	0000      	.short	0x0000
 23f9520:	1007a88c 	.word	0x1007a88c
 23f9524:	00000014 	.word	0x00000014

023f9528 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f9528:	b509      	push	{r0, r3, lr}
 23f952a:	4804      	ldr	r0, [pc, #16]	; (23f953c <hal_gpio_write+0x14>)
 23f952c:	6800      	ldr	r0, [r0, #0]
 23f952e:	4b04      	ldr	r3, [pc, #16]	; (23f9540 <hal_gpio_write+0x18>)
 23f9530:	4403      	add	r3, r0
 23f9532:	681b      	ldr	r3, [r3, #0]
 23f9534:	691b      	ldr	r3, [r3, #16]
 23f9536:	9302      	str	r3, [sp, #8]
 23f9538:	bd09      	pop	{r0, r3, pc}
 23f953a:	0000      	.short	0x0000
 23f953c:	1007a88c 	.word	0x1007a88c
 23f9540:	00000014 	.word	0x00000014

023f9544 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23f9544:	b509      	push	{r0, r3, lr}
 23f9546:	4804      	ldr	r0, [pc, #16]	; (23f9558 <hal_gpio_read+0x14>)
 23f9548:	6800      	ldr	r0, [r0, #0]
 23f954a:	4b04      	ldr	r3, [pc, #16]	; (23f955c <hal_gpio_read+0x18>)
 23f954c:	4403      	add	r3, r0
 23f954e:	681b      	ldr	r3, [r3, #0]
 23f9550:	695b      	ldr	r3, [r3, #20]
 23f9552:	9302      	str	r3, [sp, #8]
 23f9554:	bd09      	pop	{r0, r3, pc}
 23f9556:	0000      	.short	0x0000
 23f9558:	1007a88c 	.word	0x1007a88c
 23f955c:	00000014 	.word	0x00000014

023f9560 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
 23f9560:	b509      	push	{r0, r3, lr}
 23f9562:	4804      	ldr	r0, [pc, #16]	; (23f9574 <HAL_DAC_Write+0x14>)
 23f9564:	6800      	ldr	r0, [r0, #0]
 23f9566:	4b04      	ldr	r3, [pc, #16]	; (23f9578 <HAL_DAC_Write+0x18>)
 23f9568:	4403      	add	r3, r0
 23f956a:	681b      	ldr	r3, [r3, #0]
 23f956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f956e:	9302      	str	r3, [sp, #8]
 23f9570:	bd09      	pop	{r0, r3, pc}
 23f9572:	0000      	.short	0x0000
 23f9574:	1007a88c 	.word	0x1007a88c
 23f9578:	00000014 	.word	0x00000014

023f957c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 23f957c:	b509      	push	{r0, r3, lr}
 23f957e:	4804      	ldr	r0, [pc, #16]	; (23f9590 <hal_pwm_write_ext+0x14>)
 23f9580:	6800      	ldr	r0, [r0, #0]
 23f9582:	4b04      	ldr	r3, [pc, #16]	; (23f9594 <hal_pwm_write_ext+0x18>)
 23f9584:	4403      	add	r3, r0
 23f9586:	681b      	ldr	r3, [r3, #0]
 23f9588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 23f958a:	9302      	str	r3, [sp, #8]
 23f958c:	bd09      	pop	{r0, r3, pc}
 23f958e:	0000      	.short	0x0000
 23f9590:	1007a88c 	.word	0x1007a88c
 23f9594:	00000014 	.word	0x00000014

023f9598 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f9598:	b509      	push	{r0, r3, lr}
 23f959a:	4804      	ldr	r0, [pc, #16]	; (23f95ac <HAL_RNG_GetRandomNumber+0x14>)
 23f959c:	6800      	ldr	r0, [r0, #0]
 23f959e:	4b04      	ldr	r3, [pc, #16]	; (23f95b0 <HAL_RNG_GetRandomNumber+0x18>)
 23f95a0:	4403      	add	r3, r0
 23f95a2:	681b      	ldr	r3, [r3, #0]
 23f95a4:	685b      	ldr	r3, [r3, #4]
 23f95a6:	9302      	str	r3, [sp, #8]
 23f95a8:	bd09      	pop	{r0, r3, pc}
 23f95aa:	0000      	.short	0x0000
 23f95ac:	1007a88c 	.word	0x1007a88c
 23f95b0:	00000000 	.word	0x00000000

023f95b4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f95b4:	b509      	push	{r0, r3, lr}
 23f95b6:	4804      	ldr	r0, [pc, #16]	; (23f95c8 <HAL_Delay_Microseconds+0x14>)
 23f95b8:	6800      	ldr	r0, [r0, #0]
 23f95ba:	4b04      	ldr	r3, [pc, #16]	; (23f95cc <HAL_Delay_Microseconds+0x18>)
 23f95bc:	4403      	add	r3, r0
 23f95be:	681b      	ldr	r3, [r3, #0]
 23f95c0:	68db      	ldr	r3, [r3, #12]
 23f95c2:	9302      	str	r3, [sp, #8]
 23f95c4:	bd09      	pop	{r0, r3, pc}
 23f95c6:	0000      	.short	0x0000
 23f95c8:	1007a88c 	.word	0x1007a88c
 23f95cc:	00000000 	.word	0x00000000

023f95d0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f95d0:	b509      	push	{r0, r3, lr}
 23f95d2:	4804      	ldr	r0, [pc, #16]	; (23f95e4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f95d4:	6800      	ldr	r0, [r0, #0]
 23f95d6:	4b04      	ldr	r3, [pc, #16]	; (23f95e8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f95d8:	4403      	add	r3, r0
 23f95da:	681b      	ldr	r3, [r3, #0]
 23f95dc:	695b      	ldr	r3, [r3, #20]
 23f95de:	9302      	str	r3, [sp, #8]
 23f95e0:	bd09      	pop	{r0, r3, pc}
 23f95e2:	0000      	.short	0x0000
 23f95e4:	1007a88c 	.word	0x1007a88c
 23f95e8:	00000000 	.word	0x00000000

023f95ec <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
 23f95ec:	b509      	push	{r0, r3, lr}
 23f95ee:	4804      	ldr	r0, [pc, #16]	; (23f9600 <hal_ble_stack_init+0x14>)
 23f95f0:	6800      	ldr	r0, [r0, #0]
 23f95f2:	4b04      	ldr	r3, [pc, #16]	; (23f9604 <hal_ble_stack_init+0x18>)
 23f95f4:	4403      	add	r3, r0
 23f95f6:	681b      	ldr	r3, [r3, #0]
 23f95f8:	689b      	ldr	r3, [r3, #8]
 23f95fa:	9302      	str	r3, [sp, #8]
 23f95fc:	bd09      	pop	{r0, r3, pc}
 23f95fe:	0000      	.short	0x0000
 23f9600:	1007a88c 	.word	0x1007a88c
 23f9604:	00000060 	.word	0x00000060

023f9608 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
 23f9608:	b509      	push	{r0, r3, lr}
 23f960a:	4804      	ldr	r0, [pc, #16]	; (23f961c <hal_ble_gap_start_scan+0x14>)
 23f960c:	6800      	ldr	r0, [r0, #0]
 23f960e:	4b04      	ldr	r3, [pc, #16]	; (23f9620 <hal_ble_gap_start_scan+0x18>)
 23f9610:	4403      	add	r3, r0
 23f9612:	681b      	ldr	r3, [r3, #0]
 23f9614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23f9616:	9302      	str	r3, [sp, #8]
 23f9618:	bd09      	pop	{r0, r3, pc}
 23f961a:	0000      	.short	0x0000
 23f961c:	1007a88c 	.word	0x1007a88c
 23f9620:	00000060 	.word	0x00000060

023f9624 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
 23f9624:	b509      	push	{r0, r3, lr}
 23f9626:	4804      	ldr	r0, [pc, #16]	; (23f9638 <hal_ble_gap_stop_scan+0x14>)
 23f9628:	6800      	ldr	r0, [r0, #0]
 23f962a:	4b04      	ldr	r3, [pc, #16]	; (23f963c <hal_ble_gap_stop_scan+0x18>)
 23f962c:	4403      	add	r3, r0
 23f962e:	681b      	ldr	r3, [r3, #0]
 23f9630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 23f9634:	9302      	str	r3, [sp, #8]
 23f9636:	bd09      	pop	{r0, r3, pc}
 23f9638:	1007a88c 	.word	0x1007a88c
 23f963c:	00000060 	.word	0x00000060

023f9640 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
 23f9640:	b509      	push	{r0, r3, lr}
 23f9642:	4804      	ldr	r0, [pc, #16]	; (23f9654 <hal_ble_gap_disconnect+0x14>)
 23f9644:	6800      	ldr	r0, [r0, #0]
 23f9646:	4b04      	ldr	r3, [pc, #16]	; (23f9658 <hal_ble_gap_disconnect+0x18>)
 23f9648:	4403      	add	r3, r0
 23f964a:	681b      	ldr	r3, [r3, #0]
 23f964c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23f9650:	9302      	str	r3, [sp, #8]
 23f9652:	bd09      	pop	{r0, r3, pc}
 23f9654:	1007a88c 	.word	0x1007a88c
 23f9658:	00000060 	.word	0x00000060

023f965c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f965c:	b509      	push	{r0, r3, lr}
 23f965e:	4804      	ldr	r0, [pc, #16]	; (23f9670 <hal_ble_gatt_server_set_characteristic_value+0x14>)
 23f9660:	6800      	ldr	r0, [r0, #0]
 23f9662:	4b04      	ldr	r3, [pc, #16]	; (23f9674 <hal_ble_gatt_server_set_characteristic_value+0x18>)
 23f9664:	4403      	add	r3, r0
 23f9666:	681b      	ldr	r3, [r3, #0]
 23f9668:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23f966c:	9302      	str	r3, [sp, #8]
 23f966e:	bd09      	pop	{r0, r3, pc}
 23f9670:	1007a88c 	.word	0x1007a88c
 23f9674:	00000060 	.word	0x00000060

023f9678 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
 23f9678:	b509      	push	{r0, r3, lr}
 23f967a:	4804      	ldr	r0, [pc, #16]	; (23f968c <hal_ble_gatt_client_discover_all_services+0x14>)
 23f967c:	6800      	ldr	r0, [r0, #0]
 23f967e:	4b04      	ldr	r3, [pc, #16]	; (23f9690 <hal_ble_gatt_client_discover_all_services+0x18>)
 23f9680:	4403      	add	r3, r0
 23f9682:	681b      	ldr	r3, [r3, #0]
 23f9684:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 23f9688:	9302      	str	r3, [sp, #8]
 23f968a:	bd09      	pop	{r0, r3, pc}
 23f968c:	1007a88c 	.word	0x1007a88c
 23f9690:	00000060 	.word	0x00000060

023f9694 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
 23f9694:	b509      	push	{r0, r3, lr}
 23f9696:	4804      	ldr	r0, [pc, #16]	; (23f96a8 <hal_ble_gatt_client_discover_characteristics+0x14>)
 23f9698:	6800      	ldr	r0, [r0, #0]
 23f969a:	4b04      	ldr	r3, [pc, #16]	; (23f96ac <hal_ble_gatt_client_discover_characteristics+0x18>)
 23f969c:	4403      	add	r3, r0
 23f969e:	681b      	ldr	r3, [r3, #0]
 23f96a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 23f96a4:	9302      	str	r3, [sp, #8]
 23f96a6:	bd09      	pop	{r0, r3, pc}
 23f96a8:	1007a88c 	.word	0x1007a88c
 23f96ac:	00000060 	.word	0x00000060

023f96b0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f96b0:	b509      	push	{r0, r3, lr}
 23f96b2:	4804      	ldr	r0, [pc, #16]	; (23f96c4 <hal_ble_gatt_client_write_with_response+0x14>)
 23f96b4:	6800      	ldr	r0, [r0, #0]
 23f96b6:	4b04      	ldr	r3, [pc, #16]	; (23f96c8 <hal_ble_gatt_client_write_with_response+0x18>)
 23f96b8:	4403      	add	r3, r0
 23f96ba:	681b      	ldr	r3, [r3, #0]
 23f96bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 23f96c0:	9302      	str	r3, [sp, #8]
 23f96c2:	bd09      	pop	{r0, r3, pc}
 23f96c4:	1007a88c 	.word	0x1007a88c
 23f96c8:	00000060 	.word	0x00000060

023f96cc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f96cc:	b509      	push	{r0, r3, lr}
 23f96ce:	4804      	ldr	r0, [pc, #16]	; (23f96e0 <hal_ble_gatt_client_write_without_response+0x14>)
 23f96d0:	6800      	ldr	r0, [r0, #0]
 23f96d2:	4b04      	ldr	r3, [pc, #16]	; (23f96e4 <hal_ble_gatt_client_write_without_response+0x18>)
 23f96d4:	4403      	add	r3, r0
 23f96d6:	681b      	ldr	r3, [r3, #0]
 23f96d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 23f96dc:	9302      	str	r3, [sp, #8]
 23f96de:	bd09      	pop	{r0, r3, pc}
 23f96e0:	1007a88c 	.word	0x1007a88c
 23f96e4:	00000060 	.word	0x00000060

023f96e8 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
 23f96e8:	b509      	push	{r0, r3, lr}
 23f96ea:	4804      	ldr	r0, [pc, #16]	; (23f96fc <hal_ble_gatt_client_read+0x14>)
 23f96ec:	6800      	ldr	r0, [r0, #0]
 23f96ee:	4b04      	ldr	r3, [pc, #16]	; (23f9700 <hal_ble_gatt_client_read+0x18>)
 23f96f0:	4403      	add	r3, r0
 23f96f2:	681b      	ldr	r3, [r3, #0]
 23f96f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 23f96f8:	9302      	str	r3, [sp, #8]
 23f96fa:	bd09      	pop	{r0, r3, pc}
 23f96fc:	1007a88c 	.word	0x1007a88c
 23f9700:	00000060 	.word	0x00000060

023f9704 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
 23f9704:	b509      	push	{r0, r3, lr}
 23f9706:	4804      	ldr	r0, [pc, #16]	; (23f9718 <hal_ble_gap_connect+0x14>)
 23f9708:	6800      	ldr	r0, [r0, #0]
 23f970a:	4b04      	ldr	r3, [pc, #16]	; (23f971c <hal_ble_gap_connect+0x18>)
 23f970c:	4403      	add	r3, r0
 23f970e:	681b      	ldr	r3, [r3, #0]
 23f9710:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 23f9714:	9302      	str	r3, [sp, #8]
 23f9716:	bd09      	pop	{r0, r3, pc}
 23f9718:	1007a88c 	.word	0x1007a88c
 23f971c:	00000060 	.word	0x00000060

023f9720 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
 23f9720:	b509      	push	{r0, r3, lr}
 23f9722:	4804      	ldr	r0, [pc, #16]	; (23f9734 <hal_ble_set_callback_on_periph_link_events+0x14>)
 23f9724:	6800      	ldr	r0, [r0, #0]
 23f9726:	4b04      	ldr	r3, [pc, #16]	; (23f9738 <hal_ble_set_callback_on_periph_link_events+0x18>)
 23f9728:	4403      	add	r3, r0
 23f972a:	681b      	ldr	r3, [r3, #0]
 23f972c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 23f9730:	9302      	str	r3, [sp, #8]
 23f9732:	bd09      	pop	{r0, r3, pc}
 23f9734:	1007a88c 	.word	0x1007a88c
 23f9738:	00000060 	.word	0x00000060

023f973c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
 23f973c:	b509      	push	{r0, r3, lr}
 23f973e:	4804      	ldr	r0, [pc, #16]	; (23f9750 <hal_ble_gatt_client_configure_cccd+0x14>)
 23f9740:	6800      	ldr	r0, [r0, #0]
 23f9742:	4b04      	ldr	r3, [pc, #16]	; (23f9754 <hal_ble_gatt_client_configure_cccd+0x18>)
 23f9744:	4403      	add	r3, r0
 23f9746:	681b      	ldr	r3, [r3, #0]
 23f9748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 23f974c:	9302      	str	r3, [sp, #8]
 23f974e:	bd09      	pop	{r0, r3, pc}
 23f9750:	1007a88c 	.word	0x1007a88c
 23f9754:	00000060 	.word	0x00000060

023f9758 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f9758:	b509      	push	{r0, r3, lr}
 23f975a:	4804      	ldr	r0, [pc, #16]	; (23f976c <hal_ble_gatt_server_notify_characteristic_value+0x14>)
 23f975c:	6800      	ldr	r0, [r0, #0]
 23f975e:	4b04      	ldr	r3, [pc, #16]	; (23f9770 <hal_ble_gatt_server_notify_characteristic_value+0x18>)
 23f9760:	4403      	add	r3, r0
 23f9762:	681b      	ldr	r3, [r3, #0]
 23f9764:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 23f9768:	9302      	str	r3, [sp, #8]
 23f976a:	bd09      	pop	{r0, r3, pc}
 23f976c:	1007a88c 	.word	0x1007a88c
 23f9770:	00000060 	.word	0x00000060

023f9774 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f9774:	b509      	push	{r0, r3, lr}
 23f9776:	4804      	ldr	r0, [pc, #16]	; (23f9788 <hal_ble_gatt_server_indicate_characteristic_value+0x14>)
 23f9778:	6800      	ldr	r0, [r0, #0]
 23f977a:	4b04      	ldr	r3, [pc, #16]	; (23f978c <hal_ble_gatt_server_indicate_characteristic_value+0x18>)
 23f977c:	4403      	add	r3, r0
 23f977e:	681b      	ldr	r3, [r3, #0]
 23f9780:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 23f9784:	9302      	str	r3, [sp, #8]
 23f9786:	bd09      	pop	{r0, r3, pc}
 23f9788:	1007a88c 	.word	0x1007a88c
 23f978c:	00000060 	.word	0x00000060

023f9790 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f9790:	b509      	push	{r0, r3, lr}
 23f9792:	4804      	ldr	r0, [pc, #16]	; (23f97a4 <os_mutex_recursive_create+0x14>)
 23f9794:	6800      	ldr	r0, [r0, #0]
 23f9796:	4b04      	ldr	r3, [pc, #16]	; (23f97a8 <os_mutex_recursive_create+0x18>)
 23f9798:	4403      	add	r3, r0
 23f979a:	681b      	ldr	r3, [r3, #0]
 23f979c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f979e:	9302      	str	r3, [sp, #8]
 23f97a0:	bd09      	pop	{r0, r3, pc}
 23f97a2:	0000      	.short	0x0000
 23f97a4:	1007a88c 	.word	0x1007a88c
 23f97a8:	00000030 	.word	0x00000030

023f97ac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f97ac:	b509      	push	{r0, r3, lr}
 23f97ae:	4804      	ldr	r0, [pc, #16]	; (23f97c0 <os_mutex_recursive_destroy+0x14>)
 23f97b0:	6800      	ldr	r0, [r0, #0]
 23f97b2:	4b04      	ldr	r3, [pc, #16]	; (23f97c4 <os_mutex_recursive_destroy+0x18>)
 23f97b4:	4403      	add	r3, r0
 23f97b6:	681b      	ldr	r3, [r3, #0]
 23f97b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f97ba:	9302      	str	r3, [sp, #8]
 23f97bc:	bd09      	pop	{r0, r3, pc}
 23f97be:	0000      	.short	0x0000
 23f97c0:	1007a88c 	.word	0x1007a88c
 23f97c4:	00000030 	.word	0x00000030

023f97c8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f97c8:	b509      	push	{r0, r3, lr}
 23f97ca:	4804      	ldr	r0, [pc, #16]	; (23f97dc <os_mutex_recursive_lock+0x14>)
 23f97cc:	6800      	ldr	r0, [r0, #0]
 23f97ce:	4b04      	ldr	r3, [pc, #16]	; (23f97e0 <os_mutex_recursive_lock+0x18>)
 23f97d0:	4403      	add	r3, r0
 23f97d2:	681b      	ldr	r3, [r3, #0]
 23f97d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f97d6:	9302      	str	r3, [sp, #8]
 23f97d8:	bd09      	pop	{r0, r3, pc}
 23f97da:	0000      	.short	0x0000
 23f97dc:	1007a88c 	.word	0x1007a88c
 23f97e0:	00000030 	.word	0x00000030

023f97e4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f97e4:	b509      	push	{r0, r3, lr}
 23f97e6:	4804      	ldr	r0, [pc, #16]	; (23f97f8 <os_mutex_recursive_unlock+0x14>)
 23f97e8:	6800      	ldr	r0, [r0, #0]
 23f97ea:	4b04      	ldr	r3, [pc, #16]	; (23f97fc <os_mutex_recursive_unlock+0x18>)
 23f97ec:	4403      	add	r3, r0
 23f97ee:	681b      	ldr	r3, [r3, #0]
 23f97f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f97f2:	9302      	str	r3, [sp, #8]
 23f97f4:	bd09      	pop	{r0, r3, pc}
 23f97f6:	0000      	.short	0x0000
 23f97f8:	1007a88c 	.word	0x1007a88c
 23f97fc:	00000030 	.word	0x00000030

023f9800 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f9800:	b509      	push	{r0, r3, lr}
 23f9802:	4804      	ldr	r0, [pc, #16]	; (23f9814 <inet_inet_ntop+0x14>)
 23f9804:	6800      	ldr	r0, [r0, #0]
 23f9806:	4b04      	ldr	r3, [pc, #16]	; (23f9818 <inet_inet_ntop+0x18>)
 23f9808:	4403      	add	r3, r0
 23f980a:	681b      	ldr	r3, [r3, #0]
 23f980c:	695b      	ldr	r3, [r3, #20]
 23f980e:	9302      	str	r3, [sp, #8]
 23f9810:	bd09      	pop	{r0, r3, pc}
 23f9812:	0000      	.short	0x0000
 23f9814:	1007a88c 	.word	0x1007a88c
 23f9818:	0000004c 	.word	0x0000004c

023f981c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f981c:	b509      	push	{r0, r3, lr}
 23f981e:	4804      	ldr	r0, [pc, #16]	; (23f9830 <hal_usart_end+0x14>)
 23f9820:	6800      	ldr	r0, [r0, #0]
 23f9822:	4b04      	ldr	r3, [pc, #16]	; (23f9834 <hal_usart_end+0x18>)
 23f9824:	4403      	add	r3, r0
 23f9826:	681b      	ldr	r3, [r3, #0]
 23f9828:	689b      	ldr	r3, [r3, #8]
 23f982a:	9302      	str	r3, [sp, #8]
 23f982c:	bd09      	pop	{r0, r3, pc}
 23f982e:	0000      	.short	0x0000
 23f9830:	1007a88c 	.word	0x1007a88c
 23f9834:	00000024 	.word	0x00000024

023f9838 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f9838:	b509      	push	{r0, r3, lr}
 23f983a:	4804      	ldr	r0, [pc, #16]	; (23f984c <hal_usart_write+0x14>)
 23f983c:	6800      	ldr	r0, [r0, #0]
 23f983e:	4b04      	ldr	r3, [pc, #16]	; (23f9850 <hal_usart_write+0x18>)
 23f9840:	4403      	add	r3, r0
 23f9842:	681b      	ldr	r3, [r3, #0]
 23f9844:	68db      	ldr	r3, [r3, #12]
 23f9846:	9302      	str	r3, [sp, #8]
 23f9848:	bd09      	pop	{r0, r3, pc}
 23f984a:	0000      	.short	0x0000
 23f984c:	1007a88c 	.word	0x1007a88c
 23f9850:	00000024 	.word	0x00000024

023f9854 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f9854:	b509      	push	{r0, r3, lr}
 23f9856:	4804      	ldr	r0, [pc, #16]	; (23f9868 <hal_usart_available+0x14>)
 23f9858:	6800      	ldr	r0, [r0, #0]
 23f985a:	4b04      	ldr	r3, [pc, #16]	; (23f986c <hal_usart_available+0x18>)
 23f985c:	4403      	add	r3, r0
 23f985e:	681b      	ldr	r3, [r3, #0]
 23f9860:	691b      	ldr	r3, [r3, #16]
 23f9862:	9302      	str	r3, [sp, #8]
 23f9864:	bd09      	pop	{r0, r3, pc}
 23f9866:	0000      	.short	0x0000
 23f9868:	1007a88c 	.word	0x1007a88c
 23f986c:	00000024 	.word	0x00000024

023f9870 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f9870:	b509      	push	{r0, r3, lr}
 23f9872:	4804      	ldr	r0, [pc, #16]	; (23f9884 <hal_usart_read+0x14>)
 23f9874:	6800      	ldr	r0, [r0, #0]
 23f9876:	4b04      	ldr	r3, [pc, #16]	; (23f9888 <hal_usart_read+0x18>)
 23f9878:	4403      	add	r3, r0
 23f987a:	681b      	ldr	r3, [r3, #0]
 23f987c:	695b      	ldr	r3, [r3, #20]
 23f987e:	9302      	str	r3, [sp, #8]
 23f9880:	bd09      	pop	{r0, r3, pc}
 23f9882:	0000      	.short	0x0000
 23f9884:	1007a88c 	.word	0x1007a88c
 23f9888:	00000024 	.word	0x00000024

023f988c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f988c:	b509      	push	{r0, r3, lr}
 23f988e:	4804      	ldr	r0, [pc, #16]	; (23f98a0 <hal_usart_peek+0x14>)
 23f9890:	6800      	ldr	r0, [r0, #0]
 23f9892:	4b04      	ldr	r3, [pc, #16]	; (23f98a4 <hal_usart_peek+0x18>)
 23f9894:	4403      	add	r3, r0
 23f9896:	681b      	ldr	r3, [r3, #0]
 23f9898:	699b      	ldr	r3, [r3, #24]
 23f989a:	9302      	str	r3, [sp, #8]
 23f989c:	bd09      	pop	{r0, r3, pc}
 23f989e:	0000      	.short	0x0000
 23f98a0:	1007a88c 	.word	0x1007a88c
 23f98a4:	00000024 	.word	0x00000024

023f98a8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f98a8:	b509      	push	{r0, r3, lr}
 23f98aa:	4804      	ldr	r0, [pc, #16]	; (23f98bc <hal_usart_flush+0x14>)
 23f98ac:	6800      	ldr	r0, [r0, #0]
 23f98ae:	4b04      	ldr	r3, [pc, #16]	; (23f98c0 <hal_usart_flush+0x18>)
 23f98b0:	4403      	add	r3, r0
 23f98b2:	681b      	ldr	r3, [r3, #0]
 23f98b4:	69db      	ldr	r3, [r3, #28]
 23f98b6:	9302      	str	r3, [sp, #8]
 23f98b8:	bd09      	pop	{r0, r3, pc}
 23f98ba:	0000      	.short	0x0000
 23f98bc:	1007a88c 	.word	0x1007a88c
 23f98c0:	00000024 	.word	0x00000024

023f98c4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f98c4:	b509      	push	{r0, r3, lr}
 23f98c6:	4804      	ldr	r0, [pc, #16]	; (23f98d8 <hal_usart_is_enabled+0x14>)
 23f98c8:	6800      	ldr	r0, [r0, #0]
 23f98ca:	4b04      	ldr	r3, [pc, #16]	; (23f98dc <hal_usart_is_enabled+0x18>)
 23f98cc:	4403      	add	r3, r0
 23f98ce:	681b      	ldr	r3, [r3, #0]
 23f98d0:	6a1b      	ldr	r3, [r3, #32]
 23f98d2:	9302      	str	r3, [sp, #8]
 23f98d4:	bd09      	pop	{r0, r3, pc}
 23f98d6:	0000      	.short	0x0000
 23f98d8:	1007a88c 	.word	0x1007a88c
 23f98dc:	00000024 	.word	0x00000024

023f98e0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f98e0:	b509      	push	{r0, r3, lr}
 23f98e2:	4804      	ldr	r0, [pc, #16]	; (23f98f4 <hal_usart_available_data_for_write+0x14>)
 23f98e4:	6800      	ldr	r0, [r0, #0]
 23f98e6:	4b04      	ldr	r3, [pc, #16]	; (23f98f8 <hal_usart_available_data_for_write+0x18>)
 23f98e8:	4403      	add	r3, r0
 23f98ea:	681b      	ldr	r3, [r3, #0]
 23f98ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f98ee:	9302      	str	r3, [sp, #8]
 23f98f0:	bd09      	pop	{r0, r3, pc}
 23f98f2:	0000      	.short	0x0000
 23f98f4:	1007a88c 	.word	0x1007a88c
 23f98f8:	00000024 	.word	0x00000024

023f98fc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f98fc:	b509      	push	{r0, r3, lr}
 23f98fe:	4804      	ldr	r0, [pc, #16]	; (23f9910 <hal_usart_begin_config+0x14>)
 23f9900:	6800      	ldr	r0, [r0, #0]
 23f9902:	4b04      	ldr	r3, [pc, #16]	; (23f9914 <hal_usart_begin_config+0x18>)
 23f9904:	4403      	add	r3, r0
 23f9906:	681b      	ldr	r3, [r3, #0]
 23f9908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f990a:	9302      	str	r3, [sp, #8]
 23f990c:	bd09      	pop	{r0, r3, pc}
 23f990e:	0000      	.short	0x0000
 23f9910:	1007a88c 	.word	0x1007a88c
 23f9914:	00000024 	.word	0x00000024

023f9918 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f9918:	b509      	push	{r0, r3, lr}
 23f991a:	4804      	ldr	r0, [pc, #16]	; (23f992c <hal_usart_init_ex+0x14>)
 23f991c:	6800      	ldr	r0, [r0, #0]
 23f991e:	4b04      	ldr	r3, [pc, #16]	; (23f9930 <hal_usart_init_ex+0x18>)
 23f9920:	4403      	add	r3, r0
 23f9922:	681b      	ldr	r3, [r3, #0]
 23f9924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9926:	9302      	str	r3, [sp, #8]
 23f9928:	bd09      	pop	{r0, r3, pc}
 23f992a:	0000      	.short	0x0000
 23f992c:	1007a88c 	.word	0x1007a88c
 23f9930:	00000024 	.word	0x00000024

023f9934 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f9934:	b509      	push	{r0, r3, lr}
 23f9936:	4804      	ldr	r0, [pc, #16]	; (23f9948 <hal_i2c_write+0x14>)
 23f9938:	6800      	ldr	r0, [r0, #0]
 23f993a:	4b04      	ldr	r3, [pc, #16]	; (23f994c <hal_i2c_write+0x18>)
 23f993c:	4403      	add	r3, r0
 23f993e:	681b      	ldr	r3, [r3, #0]
 23f9940:	6a1b      	ldr	r3, [r3, #32]
 23f9942:	9302      	str	r3, [sp, #8]
 23f9944:	bd09      	pop	{r0, r3, pc}
 23f9946:	0000      	.short	0x0000
 23f9948:	1007a88c 	.word	0x1007a88c
 23f994c:	00000010 	.word	0x00000010

023f9950 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f9950:	b509      	push	{r0, r3, lr}
 23f9952:	4804      	ldr	r0, [pc, #16]	; (23f9964 <hal_i2c_available+0x14>)
 23f9954:	6800      	ldr	r0, [r0, #0]
 23f9956:	4b04      	ldr	r3, [pc, #16]	; (23f9968 <hal_i2c_available+0x18>)
 23f9958:	4403      	add	r3, r0
 23f995a:	681b      	ldr	r3, [r3, #0]
 23f995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f995e:	9302      	str	r3, [sp, #8]
 23f9960:	bd09      	pop	{r0, r3, pc}
 23f9962:	0000      	.short	0x0000
 23f9964:	1007a88c 	.word	0x1007a88c
 23f9968:	00000010 	.word	0x00000010

023f996c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f996c:	b509      	push	{r0, r3, lr}
 23f996e:	4804      	ldr	r0, [pc, #16]	; (23f9980 <hal_i2c_read+0x14>)
 23f9970:	6800      	ldr	r0, [r0, #0]
 23f9972:	4b04      	ldr	r3, [pc, #16]	; (23f9984 <hal_i2c_read+0x18>)
 23f9974:	4403      	add	r3, r0
 23f9976:	681b      	ldr	r3, [r3, #0]
 23f9978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f997a:	9302      	str	r3, [sp, #8]
 23f997c:	bd09      	pop	{r0, r3, pc}
 23f997e:	0000      	.short	0x0000
 23f9980:	1007a88c 	.word	0x1007a88c
 23f9984:	00000010 	.word	0x00000010

023f9988 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f9988:	b509      	push	{r0, r3, lr}
 23f998a:	4804      	ldr	r0, [pc, #16]	; (23f999c <hal_i2c_peek+0x14>)
 23f998c:	6800      	ldr	r0, [r0, #0]
 23f998e:	4b04      	ldr	r3, [pc, #16]	; (23f99a0 <hal_i2c_peek+0x18>)
 23f9990:	4403      	add	r3, r0
 23f9992:	681b      	ldr	r3, [r3, #0]
 23f9994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9996:	9302      	str	r3, [sp, #8]
 23f9998:	bd09      	pop	{r0, r3, pc}
 23f999a:	0000      	.short	0x0000
 23f999c:	1007a88c 	.word	0x1007a88c
 23f99a0:	00000010 	.word	0x00000010

023f99a4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f99a4:	b509      	push	{r0, r3, lr}
 23f99a6:	4804      	ldr	r0, [pc, #16]	; (23f99b8 <hal_i2c_flush+0x14>)
 23f99a8:	6800      	ldr	r0, [r0, #0]
 23f99aa:	4b04      	ldr	r3, [pc, #16]	; (23f99bc <hal_i2c_flush+0x18>)
 23f99ac:	4403      	add	r3, r0
 23f99ae:	681b      	ldr	r3, [r3, #0]
 23f99b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f99b2:	9302      	str	r3, [sp, #8]
 23f99b4:	bd09      	pop	{r0, r3, pc}
 23f99b6:	0000      	.short	0x0000
 23f99b8:	1007a88c 	.word	0x1007a88c
 23f99bc:	00000010 	.word	0x00000010

023f99c0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f99c0:	b509      	push	{r0, r3, lr}
 23f99c2:	4804      	ldr	r0, [pc, #16]	; (23f99d4 <hal_i2c_is_enabled+0x14>)
 23f99c4:	6800      	ldr	r0, [r0, #0]
 23f99c6:	4b04      	ldr	r3, [pc, #16]	; (23f99d8 <hal_i2c_is_enabled+0x18>)
 23f99c8:	4403      	add	r3, r0
 23f99ca:	681b      	ldr	r3, [r3, #0]
 23f99cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f99ce:	9302      	str	r3, [sp, #8]
 23f99d0:	bd09      	pop	{r0, r3, pc}
 23f99d2:	0000      	.short	0x0000
 23f99d4:	1007a88c 	.word	0x1007a88c
 23f99d8:	00000010 	.word	0x00000010

023f99dc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f99dc:	b509      	push	{r0, r3, lr}
 23f99de:	4804      	ldr	r0, [pc, #16]	; (23f99f0 <hal_i2c_init+0x14>)
 23f99e0:	6800      	ldr	r0, [r0, #0]
 23f99e2:	4b04      	ldr	r3, [pc, #16]	; (23f99f4 <hal_i2c_init+0x18>)
 23f99e4:	4403      	add	r3, r0
 23f99e6:	681b      	ldr	r3, [r3, #0]
 23f99e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f99ea:	9302      	str	r3, [sp, #8]
 23f99ec:	bd09      	pop	{r0, r3, pc}
 23f99ee:	0000      	.short	0x0000
 23f99f0:	1007a88c 	.word	0x1007a88c
 23f99f4:	00000010 	.word	0x00000010

023f99f8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f99f8:	b509      	push	{r0, r3, lr}
 23f99fa:	4804      	ldr	r0, [pc, #16]	; (23f9a0c <hal_spi_init+0x14>)
 23f99fc:	6800      	ldr	r0, [r0, #0]
 23f99fe:	4b04      	ldr	r3, [pc, #16]	; (23f9a10 <hal_spi_init+0x18>)
 23f9a00:	4403      	add	r3, r0
 23f9a02:	681b      	ldr	r3, [r3, #0]
 23f9a04:	69db      	ldr	r3, [r3, #28]
 23f9a06:	9302      	str	r3, [sp, #8]
 23f9a08:	bd09      	pop	{r0, r3, pc}
 23f9a0a:	0000      	.short	0x0000
 23f9a0c:	1007a88c 	.word	0x1007a88c
 23f9a10:	00000018 	.word	0x00000018

023f9a14 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f9a14:	b509      	push	{r0, r3, lr}
 23f9a16:	4804      	ldr	r0, [pc, #16]	; (23f9a28 <hal_spi_is_enabled+0x14>)
 23f9a18:	6800      	ldr	r0, [r0, #0]
 23f9a1a:	4b04      	ldr	r3, [pc, #16]	; (23f9a2c <hal_spi_is_enabled+0x18>)
 23f9a1c:	4403      	add	r3, r0
 23f9a1e:	681b      	ldr	r3, [r3, #0]
 23f9a20:	6a1b      	ldr	r3, [r3, #32]
 23f9a22:	9302      	str	r3, [sp, #8]
 23f9a24:	bd09      	pop	{r0, r3, pc}
 23f9a26:	0000      	.short	0x0000
 23f9a28:	1007a88c 	.word	0x1007a88c
 23f9a2c:	00000018 	.word	0x00000018

023f9a30 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f9a30:	b509      	push	{r0, r3, lr}
 23f9a32:	4804      	ldr	r0, [pc, #16]	; (23f9a44 <HAL_USB_USART_Init+0x14>)
 23f9a34:	6800      	ldr	r0, [r0, #0]
 23f9a36:	4b04      	ldr	r3, [pc, #16]	; (23f9a48 <HAL_USB_USART_Init+0x18>)
 23f9a38:	4403      	add	r3, r0
 23f9a3a:	681b      	ldr	r3, [r3, #0]
 23f9a3c:	681b      	ldr	r3, [r3, #0]
 23f9a3e:	9302      	str	r3, [sp, #8]
 23f9a40:	bd09      	pop	{r0, r3, pc}
 23f9a42:	0000      	.short	0x0000
 23f9a44:	1007a88c 	.word	0x1007a88c
 23f9a48:	00000034 	.word	0x00000034

023f9a4c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f9a4c:	b509      	push	{r0, r3, lr}
 23f9a4e:	4804      	ldr	r0, [pc, #16]	; (23f9a60 <HAL_USB_USART_Begin+0x14>)
 23f9a50:	6800      	ldr	r0, [r0, #0]
 23f9a52:	4b04      	ldr	r3, [pc, #16]	; (23f9a64 <HAL_USB_USART_Begin+0x18>)
 23f9a54:	4403      	add	r3, r0
 23f9a56:	681b      	ldr	r3, [r3, #0]
 23f9a58:	685b      	ldr	r3, [r3, #4]
 23f9a5a:	9302      	str	r3, [sp, #8]
 23f9a5c:	bd09      	pop	{r0, r3, pc}
 23f9a5e:	0000      	.short	0x0000
 23f9a60:	1007a88c 	.word	0x1007a88c
 23f9a64:	00000034 	.word	0x00000034

023f9a68 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f9a68:	b509      	push	{r0, r3, lr}
 23f9a6a:	4804      	ldr	r0, [pc, #16]	; (23f9a7c <HAL_USB_USART_End+0x14>)
 23f9a6c:	6800      	ldr	r0, [r0, #0]
 23f9a6e:	4b04      	ldr	r3, [pc, #16]	; (23f9a80 <HAL_USB_USART_End+0x18>)
 23f9a70:	4403      	add	r3, r0
 23f9a72:	681b      	ldr	r3, [r3, #0]
 23f9a74:	689b      	ldr	r3, [r3, #8]
 23f9a76:	9302      	str	r3, [sp, #8]
 23f9a78:	bd09      	pop	{r0, r3, pc}
 23f9a7a:	0000      	.short	0x0000
 23f9a7c:	1007a88c 	.word	0x1007a88c
 23f9a80:	00000034 	.word	0x00000034

023f9a84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23f9a84:	b509      	push	{r0, r3, lr}
 23f9a86:	4804      	ldr	r0, [pc, #16]	; (23f9a98 <HAL_USB_USART_Available_Data+0x14>)
 23f9a88:	6800      	ldr	r0, [r0, #0]
 23f9a8a:	4b04      	ldr	r3, [pc, #16]	; (23f9a9c <HAL_USB_USART_Available_Data+0x18>)
 23f9a8c:	4403      	add	r3, r0
 23f9a8e:	681b      	ldr	r3, [r3, #0]
 23f9a90:	691b      	ldr	r3, [r3, #16]
 23f9a92:	9302      	str	r3, [sp, #8]
 23f9a94:	bd09      	pop	{r0, r3, pc}
 23f9a96:	0000      	.short	0x0000
 23f9a98:	1007a88c 	.word	0x1007a88c
 23f9a9c:	00000034 	.word	0x00000034

023f9aa0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23f9aa0:	b509      	push	{r0, r3, lr}
 23f9aa2:	4804      	ldr	r0, [pc, #16]	; (23f9ab4 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f9aa4:	6800      	ldr	r0, [r0, #0]
 23f9aa6:	4b04      	ldr	r3, [pc, #16]	; (23f9ab8 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f9aa8:	4403      	add	r3, r0
 23f9aaa:	681b      	ldr	r3, [r3, #0]
 23f9aac:	695b      	ldr	r3, [r3, #20]
 23f9aae:	9302      	str	r3, [sp, #8]
 23f9ab0:	bd09      	pop	{r0, r3, pc}
 23f9ab2:	0000      	.short	0x0000
 23f9ab4:	1007a88c 	.word	0x1007a88c
 23f9ab8:	00000034 	.word	0x00000034

023f9abc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f9abc:	b509      	push	{r0, r3, lr}
 23f9abe:	4804      	ldr	r0, [pc, #16]	; (23f9ad0 <HAL_USB_USART_Receive_Data+0x14>)
 23f9ac0:	6800      	ldr	r0, [r0, #0]
 23f9ac2:	4b04      	ldr	r3, [pc, #16]	; (23f9ad4 <HAL_USB_USART_Receive_Data+0x18>)
 23f9ac4:	4403      	add	r3, r0
 23f9ac6:	681b      	ldr	r3, [r3, #0]
 23f9ac8:	699b      	ldr	r3, [r3, #24]
 23f9aca:	9302      	str	r3, [sp, #8]
 23f9acc:	bd09      	pop	{r0, r3, pc}
 23f9ace:	0000      	.short	0x0000
 23f9ad0:	1007a88c 	.word	0x1007a88c
 23f9ad4:	00000034 	.word	0x00000034

023f9ad8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f9ad8:	b509      	push	{r0, r3, lr}
 23f9ada:	4804      	ldr	r0, [pc, #16]	; (23f9aec <HAL_USB_USART_Send_Data+0x14>)
 23f9adc:	6800      	ldr	r0, [r0, #0]
 23f9ade:	4b04      	ldr	r3, [pc, #16]	; (23f9af0 <HAL_USB_USART_Send_Data+0x18>)
 23f9ae0:	4403      	add	r3, r0
 23f9ae2:	681b      	ldr	r3, [r3, #0]
 23f9ae4:	69db      	ldr	r3, [r3, #28]
 23f9ae6:	9302      	str	r3, [sp, #8]
 23f9ae8:	bd09      	pop	{r0, r3, pc}
 23f9aea:	0000      	.short	0x0000
 23f9aec:	1007a88c 	.word	0x1007a88c
 23f9af0:	00000034 	.word	0x00000034

023f9af4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23f9af4:	b509      	push	{r0, r3, lr}
 23f9af6:	4804      	ldr	r0, [pc, #16]	; (23f9b08 <HAL_USB_USART_Flush_Data+0x14>)
 23f9af8:	6800      	ldr	r0, [r0, #0]
 23f9afa:	4b04      	ldr	r3, [pc, #16]	; (23f9b0c <HAL_USB_USART_Flush_Data+0x18>)
 23f9afc:	4403      	add	r3, r0
 23f9afe:	681b      	ldr	r3, [r3, #0]
 23f9b00:	6a1b      	ldr	r3, [r3, #32]
 23f9b02:	9302      	str	r3, [sp, #8]
 23f9b04:	bd09      	pop	{r0, r3, pc}
 23f9b06:	0000      	.short	0x0000
 23f9b08:	1007a88c 	.word	0x1007a88c
 23f9b0c:	00000034 	.word	0x00000034

023f9b10 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f9b10:	b509      	push	{r0, r3, lr}
 23f9b12:	4804      	ldr	r0, [pc, #16]	; (23f9b24 <panic_+0x14>)
 23f9b14:	6800      	ldr	r0, [r0, #0]
 23f9b16:	4b04      	ldr	r3, [pc, #16]	; (23f9b28 <panic_+0x18>)
 23f9b18:	4403      	add	r3, r0
 23f9b1a:	681b      	ldr	r3, [r3, #0]
 23f9b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9b1e:	9302      	str	r3, [sp, #8]
 23f9b20:	bd09      	pop	{r0, r3, pc}
 23f9b22:	0000      	.short	0x0000
 23f9b24:	1007a88c 	.word	0x1007a88c
 23f9b28:	00000048 	.word	0x00000048

023f9b2c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23f9b2c:	b509      	push	{r0, r3, lr}
 23f9b2e:	4804      	ldr	r0, [pc, #16]	; (23f9b40 <log_message+0x14>)
 23f9b30:	6800      	ldr	r0, [r0, #0]
 23f9b32:	4b04      	ldr	r3, [pc, #16]	; (23f9b44 <log_message+0x18>)
 23f9b34:	4403      	add	r3, r0
 23f9b36:	681b      	ldr	r3, [r3, #0]
 23f9b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f9b3a:	9302      	str	r3, [sp, #8]
 23f9b3c:	bd09      	pop	{r0, r3, pc}
 23f9b3e:	0000      	.short	0x0000
 23f9b40:	1007a88c 	.word	0x1007a88c
 23f9b44:	00000048 	.word	0x00000048

023f9b48 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23f9b48:	b509      	push	{r0, r3, lr}
 23f9b4a:	4804      	ldr	r0, [pc, #16]	; (23f9b5c <log_message_v+0x14>)
 23f9b4c:	6800      	ldr	r0, [r0, #0]
 23f9b4e:	4b04      	ldr	r3, [pc, #16]	; (23f9b60 <log_message_v+0x18>)
 23f9b50:	4403      	add	r3, r0
 23f9b52:	681b      	ldr	r3, [r3, #0]
 23f9b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9b56:	9302      	str	r3, [sp, #8]
 23f9b58:	bd09      	pop	{r0, r3, pc}
 23f9b5a:	0000      	.short	0x0000
 23f9b5c:	1007a88c 	.word	0x1007a88c
 23f9b60:	00000048 	.word	0x00000048

023f9b64 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f9b64:	b509      	push	{r0, r3, lr}
 23f9b66:	4804      	ldr	r0, [pc, #16]	; (23f9b78 <log_level_name+0x14>)
 23f9b68:	6800      	ldr	r0, [r0, #0]
 23f9b6a:	4b04      	ldr	r3, [pc, #16]	; (23f9b7c <log_level_name+0x18>)
 23f9b6c:	4403      	add	r3, r0
 23f9b6e:	681b      	ldr	r3, [r3, #0]
 23f9b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f9b72:	9302      	str	r3, [sp, #8]
 23f9b74:	bd09      	pop	{r0, r3, pc}
 23f9b76:	0000      	.short	0x0000
 23f9b78:	1007a88c 	.word	0x1007a88c
 23f9b7c:	00000048 	.word	0x00000048

023f9b80 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f9b80:	b509      	push	{r0, r3, lr}
 23f9b82:	4804      	ldr	r0, [pc, #16]	; (23f9b94 <log_set_callbacks+0x14>)
 23f9b84:	6800      	ldr	r0, [r0, #0]
 23f9b86:	4b04      	ldr	r3, [pc, #16]	; (23f9b98 <log_set_callbacks+0x18>)
 23f9b88:	4403      	add	r3, r0
 23f9b8a:	681b      	ldr	r3, [r3, #0]
 23f9b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f9b8e:	9302      	str	r3, [sp, #8]
 23f9b90:	bd09      	pop	{r0, r3, pc}
 23f9b92:	0000      	.short	0x0000
 23f9b94:	1007a88c 	.word	0x1007a88c
 23f9b98:	00000048 	.word	0x00000048

023f9b9c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f9b9c:	b509      	push	{r0, r3, lr}
 23f9b9e:	4804      	ldr	r0, [pc, #16]	; (23f9bb0 <set_system_mode+0x14>)
 23f9ba0:	6800      	ldr	r0, [r0, #0]
 23f9ba2:	4b04      	ldr	r3, [pc, #16]	; (23f9bb4 <set_system_mode+0x18>)
 23f9ba4:	4403      	add	r3, r0
 23f9ba6:	681b      	ldr	r3, [r3, #0]
 23f9ba8:	685b      	ldr	r3, [r3, #4]
 23f9baa:	9302      	str	r3, [sp, #8]
 23f9bac:	bd09      	pop	{r0, r3, pc}
 23f9bae:	0000      	.short	0x0000
 23f9bb0:	1007a88c 	.word	0x1007a88c
 23f9bb4:	00000008 	.word	0x00000008

023f9bb8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f9bb8:	b509      	push	{r0, r3, lr}
 23f9bba:	4804      	ldr	r0, [pc, #16]	; (23f9bcc <system_delay_ms+0x14>)
 23f9bbc:	6800      	ldr	r0, [r0, #0]
 23f9bbe:	4b04      	ldr	r3, [pc, #16]	; (23f9bd0 <system_delay_ms+0x18>)
 23f9bc0:	4403      	add	r3, r0
 23f9bc2:	681b      	ldr	r3, [r3, #0]
 23f9bc4:	695b      	ldr	r3, [r3, #20]
 23f9bc6:	9302      	str	r3, [sp, #8]
 23f9bc8:	bd09      	pop	{r0, r3, pc}
 23f9bca:	0000      	.short	0x0000
 23f9bcc:	1007a88c 	.word	0x1007a88c
 23f9bd0:	00000008 	.word	0x00000008

023f9bd4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23f9bd4:	b509      	push	{r0, r3, lr}
 23f9bd6:	4804      	ldr	r0, [pc, #16]	; (23f9be8 <application_thread_current+0x14>)
 23f9bd8:	6800      	ldr	r0, [r0, #0]
 23f9bda:	4b04      	ldr	r3, [pc, #16]	; (23f9bec <application_thread_current+0x18>)
 23f9bdc:	4403      	add	r3, r0
 23f9bde:	681b      	ldr	r3, [r3, #0]
 23f9be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f9be2:	9302      	str	r3, [sp, #8]
 23f9be4:	bd09      	pop	{r0, r3, pc}
 23f9be6:	0000      	.short	0x0000
 23f9be8:	1007a88c 	.word	0x1007a88c
 23f9bec:	00000008 	.word	0x00000008

023f9bf0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23f9bf0:	b509      	push	{r0, r3, lr}
 23f9bf2:	4804      	ldr	r0, [pc, #16]	; (23f9c04 <application_thread_invoke+0x14>)
 23f9bf4:	6800      	ldr	r0, [r0, #0]
 23f9bf6:	4b04      	ldr	r3, [pc, #16]	; (23f9c08 <application_thread_invoke+0x18>)
 23f9bf8:	4403      	add	r3, r0
 23f9bfa:	681b      	ldr	r3, [r3, #0]
 23f9bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9bfe:	9302      	str	r3, [sp, #8]
 23f9c00:	bd09      	pop	{r0, r3, pc}
 23f9c02:	0000      	.short	0x0000
 23f9c04:	1007a88c 	.word	0x1007a88c
 23f9c08:	00000008 	.word	0x00000008

023f9c0c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f9c0c:	b509      	push	{r0, r3, lr}
 23f9c0e:	4804      	ldr	r0, [pc, #16]	; (23f9c20 <system_ctrl_set_app_request_handler+0x14>)
 23f9c10:	6800      	ldr	r0, [r0, #0]
 23f9c12:	4b04      	ldr	r3, [pc, #16]	; (23f9c24 <system_ctrl_set_app_request_handler+0x18>)
 23f9c14:	4403      	add	r3, r0
 23f9c16:	681b      	ldr	r3, [r3, #0]
 23f9c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f9c1c:	9302      	str	r3, [sp, #8]
 23f9c1e:	bd09      	pop	{r0, r3, pc}
 23f9c20:	1007a88c 	.word	0x1007a88c
 23f9c24:	00000008 	.word	0x00000008

023f9c28 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f9c28:	b509      	push	{r0, r3, lr}
 23f9c2a:	4804      	ldr	r0, [pc, #16]	; (23f9c3c <system_ctrl_set_result+0x14>)
 23f9c2c:	6800      	ldr	r0, [r0, #0]
 23f9c2e:	4b04      	ldr	r3, [pc, #16]	; (23f9c40 <system_ctrl_set_result+0x18>)
 23f9c30:	4403      	add	r3, r0
 23f9c32:	681b      	ldr	r3, [r3, #0]
 23f9c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f9c38:	9302      	str	r3, [sp, #8]
 23f9c3a:	bd09      	pop	{r0, r3, pc}
 23f9c3c:	1007a88c 	.word	0x1007a88c
 23f9c40:	00000008 	.word	0x00000008

023f9c44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9c44:	b509      	push	{r0, r3, lr}
 23f9c46:	4804      	ldr	r0, [pc, #16]	; (23f9c58 <network_connect+0x14>)
 23f9c48:	6800      	ldr	r0, [r0, #0]
 23f9c4a:	4b04      	ldr	r3, [pc, #16]	; (23f9c5c <network_connect+0x18>)
 23f9c4c:	4403      	add	r3, r0
 23f9c4e:	681b      	ldr	r3, [r3, #0]
 23f9c50:	685b      	ldr	r3, [r3, #4]
 23f9c52:	9302      	str	r3, [sp, #8]
 23f9c54:	bd09      	pop	{r0, r3, pc}
 23f9c56:	0000      	.short	0x0000
 23f9c58:	1007a88c 	.word	0x1007a88c
 23f9c5c:	00000028 	.word	0x00000028

023f9c60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f9c60:	b509      	push	{r0, r3, lr}
 23f9c62:	4804      	ldr	r0, [pc, #16]	; (23f9c74 <network_connecting+0x14>)
 23f9c64:	6800      	ldr	r0, [r0, #0]
 23f9c66:	4b04      	ldr	r3, [pc, #16]	; (23f9c78 <network_connecting+0x18>)
 23f9c68:	4403      	add	r3, r0
 23f9c6a:	681b      	ldr	r3, [r3, #0]
 23f9c6c:	689b      	ldr	r3, [r3, #8]
 23f9c6e:	9302      	str	r3, [sp, #8]
 23f9c70:	bd09      	pop	{r0, r3, pc}
 23f9c72:	0000      	.short	0x0000
 23f9c74:	1007a88c 	.word	0x1007a88c
 23f9c78:	00000028 	.word	0x00000028

023f9c7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f9c7c:	b509      	push	{r0, r3, lr}
 23f9c7e:	4804      	ldr	r0, [pc, #16]	; (23f9c90 <network_disconnect+0x14>)
 23f9c80:	6800      	ldr	r0, [r0, #0]
 23f9c82:	4b04      	ldr	r3, [pc, #16]	; (23f9c94 <network_disconnect+0x18>)
 23f9c84:	4403      	add	r3, r0
 23f9c86:	681b      	ldr	r3, [r3, #0]
 23f9c88:	68db      	ldr	r3, [r3, #12]
 23f9c8a:	9302      	str	r3, [sp, #8]
 23f9c8c:	bd09      	pop	{r0, r3, pc}
 23f9c8e:	0000      	.short	0x0000
 23f9c90:	1007a88c 	.word	0x1007a88c
 23f9c94:	00000028 	.word	0x00000028

023f9c98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f9c98:	b509      	push	{r0, r3, lr}
 23f9c9a:	4804      	ldr	r0, [pc, #16]	; (23f9cac <network_ready+0x14>)
 23f9c9c:	6800      	ldr	r0, [r0, #0]
 23f9c9e:	4b04      	ldr	r3, [pc, #16]	; (23f9cb0 <network_ready+0x18>)
 23f9ca0:	4403      	add	r3, r0
 23f9ca2:	681b      	ldr	r3, [r3, #0]
 23f9ca4:	691b      	ldr	r3, [r3, #16]
 23f9ca6:	9302      	str	r3, [sp, #8]
 23f9ca8:	bd09      	pop	{r0, r3, pc}
 23f9caa:	0000      	.short	0x0000
 23f9cac:	1007a88c 	.word	0x1007a88c
 23f9cb0:	00000028 	.word	0x00000028

023f9cb4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9cb4:	b509      	push	{r0, r3, lr}
 23f9cb6:	4804      	ldr	r0, [pc, #16]	; (23f9cc8 <network_on+0x14>)
 23f9cb8:	6800      	ldr	r0, [r0, #0]
 23f9cba:	4b04      	ldr	r3, [pc, #16]	; (23f9ccc <network_on+0x18>)
 23f9cbc:	4403      	add	r3, r0
 23f9cbe:	681b      	ldr	r3, [r3, #0]
 23f9cc0:	695b      	ldr	r3, [r3, #20]
 23f9cc2:	9302      	str	r3, [sp, #8]
 23f9cc4:	bd09      	pop	{r0, r3, pc}
 23f9cc6:	0000      	.short	0x0000
 23f9cc8:	1007a88c 	.word	0x1007a88c
 23f9ccc:	00000028 	.word	0x00000028

023f9cd0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9cd0:	b509      	push	{r0, r3, lr}
 23f9cd2:	4804      	ldr	r0, [pc, #16]	; (23f9ce4 <network_off+0x14>)
 23f9cd4:	6800      	ldr	r0, [r0, #0]
 23f9cd6:	4b04      	ldr	r3, [pc, #16]	; (23f9ce8 <network_off+0x18>)
 23f9cd8:	4403      	add	r3, r0
 23f9cda:	681b      	ldr	r3, [r3, #0]
 23f9cdc:	699b      	ldr	r3, [r3, #24]
 23f9cde:	9302      	str	r3, [sp, #8]
 23f9ce0:	bd09      	pop	{r0, r3, pc}
 23f9ce2:	0000      	.short	0x0000
 23f9ce4:	1007a88c 	.word	0x1007a88c
 23f9ce8:	00000028 	.word	0x00000028

023f9cec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f9cec:	b509      	push	{r0, r3, lr}
 23f9cee:	4804      	ldr	r0, [pc, #16]	; (23f9d00 <network_listen+0x14>)
 23f9cf0:	6800      	ldr	r0, [r0, #0]
 23f9cf2:	4b04      	ldr	r3, [pc, #16]	; (23f9d04 <network_listen+0x18>)
 23f9cf4:	4403      	add	r3, r0
 23f9cf6:	681b      	ldr	r3, [r3, #0]
 23f9cf8:	69db      	ldr	r3, [r3, #28]
 23f9cfa:	9302      	str	r3, [sp, #8]
 23f9cfc:	bd09      	pop	{r0, r3, pc}
 23f9cfe:	0000      	.short	0x0000
 23f9d00:	1007a88c 	.word	0x1007a88c
 23f9d04:	00000028 	.word	0x00000028

023f9d08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f9d08:	b509      	push	{r0, r3, lr}
 23f9d0a:	4804      	ldr	r0, [pc, #16]	; (23f9d1c <network_listening+0x14>)
 23f9d0c:	6800      	ldr	r0, [r0, #0]
 23f9d0e:	4b04      	ldr	r3, [pc, #16]	; (23f9d20 <network_listening+0x18>)
 23f9d10:	4403      	add	r3, r0
 23f9d12:	681b      	ldr	r3, [r3, #0]
 23f9d14:	6a1b      	ldr	r3, [r3, #32]
 23f9d16:	9302      	str	r3, [sp, #8]
 23f9d18:	bd09      	pop	{r0, r3, pc}
 23f9d1a:	0000      	.short	0x0000
 23f9d1c:	1007a88c 	.word	0x1007a88c
 23f9d20:	00000028 	.word	0x00000028

023f9d24 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f9d24:	b509      	push	{r0, r3, lr}
 23f9d26:	4804      	ldr	r0, [pc, #16]	; (23f9d38 <network_set_listen_timeout+0x14>)
 23f9d28:	6800      	ldr	r0, [r0, #0]
 23f9d2a:	4b04      	ldr	r3, [pc, #16]	; (23f9d3c <network_set_listen_timeout+0x18>)
 23f9d2c:	4403      	add	r3, r0
 23f9d2e:	681b      	ldr	r3, [r3, #0]
 23f9d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9d32:	9302      	str	r3, [sp, #8]
 23f9d34:	bd09      	pop	{r0, r3, pc}
 23f9d36:	0000      	.short	0x0000
 23f9d38:	1007a88c 	.word	0x1007a88c
 23f9d3c:	00000028 	.word	0x00000028

023f9d40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f9d40:	b509      	push	{r0, r3, lr}
 23f9d42:	4804      	ldr	r0, [pc, #16]	; (23f9d54 <network_get_listen_timeout+0x14>)
 23f9d44:	6800      	ldr	r0, [r0, #0]
 23f9d46:	4b04      	ldr	r3, [pc, #16]	; (23f9d58 <network_get_listen_timeout+0x18>)
 23f9d48:	4403      	add	r3, r0
 23f9d4a:	681b      	ldr	r3, [r3, #0]
 23f9d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9d4e:	9302      	str	r3, [sp, #8]
 23f9d50:	bd09      	pop	{r0, r3, pc}
 23f9d52:	0000      	.short	0x0000
 23f9d54:	1007a88c 	.word	0x1007a88c
 23f9d58:	00000028 	.word	0x00000028

023f9d5c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f9d5c:	b509      	push	{r0, r3, lr}
 23f9d5e:	4804      	ldr	r0, [pc, #16]	; (23f9d70 <network_is_on+0x14>)
 23f9d60:	6800      	ldr	r0, [r0, #0]
 23f9d62:	4b04      	ldr	r3, [pc, #16]	; (23f9d74 <network_is_on+0x18>)
 23f9d64:	4403      	add	r3, r0
 23f9d66:	681b      	ldr	r3, [r3, #0]
 23f9d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9d6a:	9302      	str	r3, [sp, #8]
 23f9d6c:	bd09      	pop	{r0, r3, pc}
 23f9d6e:	0000      	.short	0x0000
 23f9d70:	1007a88c 	.word	0x1007a88c
 23f9d74:	00000028 	.word	0x00000028

023f9d78 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f9d78:	b509      	push	{r0, r3, lr}
 23f9d7a:	4804      	ldr	r0, [pc, #16]	; (23f9d8c <network_is_off+0x14>)
 23f9d7c:	6800      	ldr	r0, [r0, #0]
 23f9d7e:	4b04      	ldr	r3, [pc, #16]	; (23f9d90 <network_is_off+0x18>)
 23f9d80:	4403      	add	r3, r0
 23f9d82:	681b      	ldr	r3, [r3, #0]
 23f9d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9d86:	9302      	str	r3, [sp, #8]
 23f9d88:	bd09      	pop	{r0, r3, pc}
 23f9d8a:	0000      	.short	0x0000
 23f9d8c:	1007a88c 	.word	0x1007a88c
 23f9d90:	00000028 	.word	0x00000028

023f9d94 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23f9d94:	b509      	push	{r0, r3, lr}
 23f9d96:	4804      	ldr	r0, [pc, #16]	; (23f9da8 <network_prefer+0x14>)
 23f9d98:	6800      	ldr	r0, [r0, #0]
 23f9d9a:	4b04      	ldr	r3, [pc, #16]	; (23f9dac <network_prefer+0x18>)
 23f9d9c:	4403      	add	r3, r0
 23f9d9e:	681b      	ldr	r3, [r3, #0]
 23f9da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9da2:	9302      	str	r3, [sp, #8]
 23f9da4:	bd09      	pop	{r0, r3, pc}
 23f9da6:	0000      	.short	0x0000
 23f9da8:	1007a88c 	.word	0x1007a88c
 23f9dac:	00000028 	.word	0x00000028

023f9db0 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23f9db0:	b509      	push	{r0, r3, lr}
 23f9db2:	4804      	ldr	r0, [pc, #16]	; (23f9dc4 <network_is_preferred+0x14>)
 23f9db4:	6800      	ldr	r0, [r0, #0]
 23f9db6:	4b04      	ldr	r3, [pc, #16]	; (23f9dc8 <network_is_preferred+0x18>)
 23f9db8:	4403      	add	r3, r0
 23f9dba:	681b      	ldr	r3, [r3, #0]
 23f9dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f9dbe:	9302      	str	r3, [sp, #8]
 23f9dc0:	bd09      	pop	{r0, r3, pc}
 23f9dc2:	0000      	.short	0x0000
 23f9dc4:	1007a88c 	.word	0x1007a88c
 23f9dc8:	00000028 	.word	0x00000028

023f9dcc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 23f9dcc:	b509      	push	{r0, r3, lr}
 23f9dce:	4804      	ldr	r0, [pc, #16]	; (23f9de0 <spark_variable+0x14>)
 23f9dd0:	6800      	ldr	r0, [r0, #0]
 23f9dd2:	4b04      	ldr	r3, [pc, #16]	; (23f9de4 <spark_variable+0x18>)
 23f9dd4:	4403      	add	r3, r0
 23f9dd6:	681b      	ldr	r3, [r3, #0]
 23f9dd8:	681b      	ldr	r3, [r3, #0]
 23f9dda:	9302      	str	r3, [sp, #8]
 23f9ddc:	bd09      	pop	{r0, r3, pc}
 23f9dde:	0000      	.short	0x0000
 23f9de0:	1007a88c 	.word	0x1007a88c
 23f9de4:	0000002c 	.word	0x0000002c

023f9de8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23f9de8:	b509      	push	{r0, r3, lr}
 23f9dea:	4804      	ldr	r0, [pc, #16]	; (23f9dfc <spark_function+0x14>)
 23f9dec:	6800      	ldr	r0, [r0, #0]
 23f9dee:	4b04      	ldr	r3, [pc, #16]	; (23f9e00 <spark_function+0x18>)
 23f9df0:	4403      	add	r3, r0
 23f9df2:	681b      	ldr	r3, [r3, #0]
 23f9df4:	685b      	ldr	r3, [r3, #4]
 23f9df6:	9302      	str	r3, [sp, #8]
 23f9df8:	bd09      	pop	{r0, r3, pc}
 23f9dfa:	0000      	.short	0x0000
 23f9dfc:	1007a88c 	.word	0x1007a88c
 23f9e00:	0000002c 	.word	0x0000002c

023f9e04 <spark_cloud_flag_connect>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23f9e04:	b509      	push	{r0, r3, lr}
 23f9e06:	4804      	ldr	r0, [pc, #16]	; (23f9e18 <spark_cloud_flag_connect+0x14>)
 23f9e08:	6800      	ldr	r0, [r0, #0]
 23f9e0a:	4b04      	ldr	r3, [pc, #16]	; (23f9e1c <spark_cloud_flag_connect+0x18>)
 23f9e0c:	4403      	add	r3, r0
 23f9e0e:	681b      	ldr	r3, [r3, #0]
 23f9e10:	68db      	ldr	r3, [r3, #12]
 23f9e12:	9302      	str	r3, [sp, #8]
 23f9e14:	bd09      	pop	{r0, r3, pc}
 23f9e16:	0000      	.short	0x0000
 23f9e18:	1007a88c 	.word	0x1007a88c
 23f9e1c:	0000002c 	.word	0x0000002c

023f9e20 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23f9e20:	b509      	push	{r0, r3, lr}
 23f9e22:	4804      	ldr	r0, [pc, #16]	; (23f9e34 <spark_cloud_flag_connected+0x14>)
 23f9e24:	6800      	ldr	r0, [r0, #0]
 23f9e26:	4b04      	ldr	r3, [pc, #16]	; (23f9e38 <spark_cloud_flag_connected+0x18>)
 23f9e28:	4403      	add	r3, r0
 23f9e2a:	681b      	ldr	r3, [r3, #0]
 23f9e2c:	695b      	ldr	r3, [r3, #20]
 23f9e2e:	9302      	str	r3, [sp, #8]
 23f9e30:	bd09      	pop	{r0, r3, pc}
 23f9e32:	0000      	.short	0x0000
 23f9e34:	1007a88c 	.word	0x1007a88c
 23f9e38:	0000002c 	.word	0x0000002c

023f9e3c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23f9e3c:	b509      	push	{r0, r3, lr}
 23f9e3e:	4804      	ldr	r0, [pc, #16]	; (23f9e50 <spark_send_event+0x14>)
 23f9e40:	6800      	ldr	r0, [r0, #0]
 23f9e42:	4b04      	ldr	r3, [pc, #16]	; (23f9e54 <spark_send_event+0x18>)
 23f9e44:	4403      	add	r3, r0
 23f9e46:	681b      	ldr	r3, [r3, #0]
 23f9e48:	6a1b      	ldr	r3, [r3, #32]
 23f9e4a:	9302      	str	r3, [sp, #8]
 23f9e4c:	bd09      	pop	{r0, r3, pc}
 23f9e4e:	0000      	.short	0x0000
 23f9e50:	1007a88c 	.word	0x1007a88c
 23f9e54:	0000002c 	.word	0x0000002c

023f9e58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f9e58:	b509      	push	{r0, r3, lr}
 23f9e5a:	4804      	ldr	r0, [pc, #16]	; (23f9e6c <spark_set_random_seed_from_cloud_handler+0x14>)
 23f9e5c:	6800      	ldr	r0, [r0, #0]
 23f9e5e:	4b04      	ldr	r3, [pc, #16]	; (23f9e70 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f9e60:	4403      	add	r3, r0
 23f9e62:	681b      	ldr	r3, [r3, #0]
 23f9e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f9e66:	9302      	str	r3, [sp, #8]
 23f9e68:	bd09      	pop	{r0, r3, pc}
 23f9e6a:	0000      	.short	0x0000
 23f9e6c:	1007a88c 	.word	0x1007a88c
 23f9e70:	0000002c 	.word	0x0000002c

023f9e74 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f9e74:	b509      	push	{r0, r3, lr}
 23f9e76:	4804      	ldr	r0, [pc, #16]	; (23f9e88 <malloc+0x14>)
 23f9e78:	6800      	ldr	r0, [r0, #0]
 23f9e7a:	4b04      	ldr	r3, [pc, #16]	; (23f9e8c <malloc+0x18>)
 23f9e7c:	4403      	add	r3, r0
 23f9e7e:	681b      	ldr	r3, [r3, #0]
 23f9e80:	681b      	ldr	r3, [r3, #0]
 23f9e82:	9302      	str	r3, [sp, #8]
 23f9e84:	bd09      	pop	{r0, r3, pc}
 23f9e86:	0000      	.short	0x0000
 23f9e88:	1007a88c 	.word	0x1007a88c
 23f9e8c:	00000004 	.word	0x00000004

023f9e90 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f9e90:	b509      	push	{r0, r3, lr}
 23f9e92:	4804      	ldr	r0, [pc, #16]	; (23f9ea4 <free+0x14>)
 23f9e94:	6800      	ldr	r0, [r0, #0]
 23f9e96:	4b04      	ldr	r3, [pc, #16]	; (23f9ea8 <free+0x18>)
 23f9e98:	4403      	add	r3, r0
 23f9e9a:	681b      	ldr	r3, [r3, #0]
 23f9e9c:	685b      	ldr	r3, [r3, #4]
 23f9e9e:	9302      	str	r3, [sp, #8]
 23f9ea0:	bd09      	pop	{r0, r3, pc}
 23f9ea2:	0000      	.short	0x0000
 23f9ea4:	1007a88c 	.word	0x1007a88c
 23f9ea8:	00000004 	.word	0x00000004

023f9eac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f9eac:	b509      	push	{r0, r3, lr}
 23f9eae:	4804      	ldr	r0, [pc, #16]	; (23f9ec0 <realloc+0x14>)
 23f9eb0:	6800      	ldr	r0, [r0, #0]
 23f9eb2:	4b04      	ldr	r3, [pc, #16]	; (23f9ec4 <realloc+0x18>)
 23f9eb4:	4403      	add	r3, r0
 23f9eb6:	681b      	ldr	r3, [r3, #0]
 23f9eb8:	689b      	ldr	r3, [r3, #8]
 23f9eba:	9302      	str	r3, [sp, #8]
 23f9ebc:	bd09      	pop	{r0, r3, pc}
 23f9ebe:	0000      	.short	0x0000
 23f9ec0:	1007a88c 	.word	0x1007a88c
 23f9ec4:	00000004 	.word	0x00000004

023f9ec8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f9ec8:	b509      	push	{r0, r3, lr}
 23f9eca:	4804      	ldr	r0, [pc, #16]	; (23f9edc <vsnprintf+0x14>)
 23f9ecc:	6800      	ldr	r0, [r0, #0]
 23f9ece:	4b04      	ldr	r3, [pc, #16]	; (23f9ee0 <vsnprintf+0x18>)
 23f9ed0:	4403      	add	r3, r0
 23f9ed2:	681b      	ldr	r3, [r3, #0]
 23f9ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f9ed6:	9302      	str	r3, [sp, #8]
 23f9ed8:	bd09      	pop	{r0, r3, pc}
 23f9eda:	0000      	.short	0x0000
 23f9edc:	1007a88c 	.word	0x1007a88c
 23f9ee0:	00000004 	.word	0x00000004

023f9ee4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f9ee4:	b509      	push	{r0, r3, lr}
 23f9ee6:	4804      	ldr	r0, [pc, #16]	; (23f9ef8 <abort+0x14>)
 23f9ee8:	6800      	ldr	r0, [r0, #0]
 23f9eea:	4b04      	ldr	r3, [pc, #16]	; (23f9efc <abort+0x18>)
 23f9eec:	4403      	add	r3, r0
 23f9eee:	681b      	ldr	r3, [r3, #0]
 23f9ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9ef2:	9302      	str	r3, [sp, #8]
 23f9ef4:	bd09      	pop	{r0, r3, pc}
 23f9ef6:	0000      	.short	0x0000
 23f9ef8:	1007a88c 	.word	0x1007a88c
 23f9efc:	00000004 	.word	0x00000004

023f9f00 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f9f00:	b509      	push	{r0, r3, lr}
 23f9f02:	4804      	ldr	r0, [pc, #16]	; (23f9f14 <_malloc_r+0x14>)
 23f9f04:	6800      	ldr	r0, [r0, #0]
 23f9f06:	4b04      	ldr	r3, [pc, #16]	; (23f9f18 <_malloc_r+0x18>)
 23f9f08:	4403      	add	r3, r0
 23f9f0a:	681b      	ldr	r3, [r3, #0]
 23f9f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9f0e:	9302      	str	r3, [sp, #8]
 23f9f10:	bd09      	pop	{r0, r3, pc}
 23f9f12:	0000      	.short	0x0000
 23f9f14:	1007a88c 	.word	0x1007a88c
 23f9f18:	00000004 	.word	0x00000004

023f9f1c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f9f1c:	b509      	push	{r0, r3, lr}
 23f9f1e:	4804      	ldr	r0, [pc, #16]	; (23f9f30 <__errno+0x14>)
 23f9f20:	6800      	ldr	r0, [r0, #0]
 23f9f22:	4b04      	ldr	r3, [pc, #16]	; (23f9f34 <__errno+0x18>)
 23f9f24:	4403      	add	r3, r0
 23f9f26:	681b      	ldr	r3, [r3, #0]
 23f9f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f9f2a:	9302      	str	r3, [sp, #8]
 23f9f2c:	bd09      	pop	{r0, r3, pc}
 23f9f2e:	0000      	.short	0x0000
 23f9f30:	1007a88c 	.word	0x1007a88c
 23f9f34:	00000004 	.word	0x00000004

023f9f38 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f9f38:	b509      	push	{r0, r3, lr}
 23f9f3a:	4804      	ldr	r0, [pc, #16]	; (23f9f4c <__assert_func+0x14>)
 23f9f3c:	6800      	ldr	r0, [r0, #0]
 23f9f3e:	4b04      	ldr	r3, [pc, #16]	; (23f9f50 <__assert_func+0x18>)
 23f9f40:	4403      	add	r3, r0
 23f9f42:	681b      	ldr	r3, [r3, #0]
 23f9f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9f46:	9302      	str	r3, [sp, #8]
 23f9f48:	bd09      	pop	{r0, r3, pc}
 23f9f4a:	0000      	.short	0x0000
 23f9f4c:	1007a88c 	.word	0x1007a88c
 23f9f50:	00000004 	.word	0x00000004

023f9f54 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f9f54:	b509      	push	{r0, r3, lr}
 23f9f56:	4804      	ldr	r0, [pc, #16]	; (23f9f68 <newlib_impure_ptr_callback+0x14>)
 23f9f58:	6800      	ldr	r0, [r0, #0]
 23f9f5a:	4b04      	ldr	r3, [pc, #16]	; (23f9f6c <newlib_impure_ptr_callback+0x18>)
 23f9f5c:	4403      	add	r3, r0
 23f9f5e:	681b      	ldr	r3, [r3, #0]
 23f9f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9f62:	9302      	str	r3, [sp, #8]
 23f9f64:	bd09      	pop	{r0, r3, pc}
 23f9f66:	0000      	.short	0x0000
 23f9f68:	1007a88c 	.word	0x1007a88c
 23f9f6c:	00000004 	.word	0x00000004

023f9f70 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f9f70:	2200      	movs	r2, #0
 23f9f72:	6840      	ldr	r0, [r0, #4]
 23f9f74:	4611      	mov	r1, r2
 23f9f76:	f7ff bec7 	b.w	23f9d08 <network_listening>

023f9f7a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f9f7a:	2200      	movs	r2, #0
 23f9f7c:	6840      	ldr	r0, [r0, #4]
 23f9f7e:	4611      	mov	r1, r2
 23f9f80:	f7ff bede 	b.w	23f9d40 <network_get_listen_timeout>

023f9f84 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f9f84:	2200      	movs	r2, #0
 23f9f86:	6840      	ldr	r0, [r0, #4]
 23f9f88:	f7ff becc 	b.w	23f9d24 <network_set_listen_timeout>

023f9f8c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f9f8c:	2200      	movs	r2, #0
 23f9f8e:	6840      	ldr	r0, [r0, #4]
 23f9f90:	f081 0101 	eor.w	r1, r1, #1
 23f9f94:	f7ff beaa 	b.w	23f9cec <network_listen>

023f9f98 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f9f98:	2300      	movs	r3, #0
 23f9f9a:	6840      	ldr	r0, [r0, #4]
 23f9f9c:	461a      	mov	r2, r3
 23f9f9e:	4619      	mov	r1, r3
 23f9fa0:	f7ff be96 	b.w	23f9cd0 <network_off>

023f9fa4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f9fa4:	2300      	movs	r3, #0
 23f9fa6:	6840      	ldr	r0, [r0, #4]
 23f9fa8:	461a      	mov	r2, r3
 23f9faa:	4619      	mov	r1, r3
 23f9fac:	f7ff be82 	b.w	23f9cb4 <network_on>

023f9fb0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f9fb0:	2200      	movs	r2, #0
 23f9fb2:	6840      	ldr	r0, [r0, #4]
 23f9fb4:	4611      	mov	r1, r2
 23f9fb6:	f7ff be6f 	b.w	23f9c98 <network_ready>

023f9fba <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f9fba:	2200      	movs	r2, #0
 23f9fbc:	6840      	ldr	r0, [r0, #4]
 23f9fbe:	4611      	mov	r1, r2
 23f9fc0:	f7ff be4e 	b.w	23f9c60 <network_connecting>

023f9fc4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f9fc4:	2200      	movs	r2, #0
 23f9fc6:	2102      	movs	r1, #2
 23f9fc8:	6840      	ldr	r0, [r0, #4]
 23f9fca:	f7ff be57 	b.w	23f9c7c <network_disconnect>

023f9fce <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f9fce:	2300      	movs	r3, #0
 23f9fd0:	6840      	ldr	r0, [r0, #4]
 23f9fd2:	461a      	mov	r2, r3
 23f9fd4:	f7ff be36 	b.w	23f9c44 <network_connect>

023f9fd8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f9fd8:	2203      	movs	r2, #3
 23f9fda:	4b02      	ldr	r3, [pc, #8]	; (23f9fe4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f9fdc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f9fde:	4a02      	ldr	r2, [pc, #8]	; (23f9fe8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f9fe0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f9fe2:	4770      	bx	lr
 23f9fe4:	1007ae44 	.word	0x1007ae44
 23f9fe8:	023ff83c 	.word	0x023ff83c

023f9fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f9fec:	680b      	ldr	r3, [r1, #0]
 23f9fee:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f9ff0:	684b      	ldr	r3, [r1, #4]
 23f9ff2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f9ff4:	b113      	cbz	r3, 23f9ffc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23f9ff6:	685a      	ldr	r2, [r3, #4]
 23f9ff8:	3201      	adds	r2, #1
 23f9ffa:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f9ffc:	4770      	bx	lr

023f9ffe <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23f9ffe:	b510      	push	{r4, lr}
 23fa000:	4604      	mov	r4, r0
 23fa002:	4608      	mov	r0, r1
{
    _spi = spi;
 23fa004:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fa006:	f7ff fcf7 	bl	23f99f8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fa00a:	2300      	movs	r3, #0
}
 23fa00c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fa00e:	6063      	str	r3, [r4, #4]
}
 23fa010:	bd10      	pop	{r4, pc}

023fa012 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23fa012:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23fa014:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fa016:	4604      	mov	r4, r0
      if (_M_manager)
 23fa018:	b113      	cbz	r3, 23fa020 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fa01a:	2203      	movs	r2, #3
 23fa01c:	4601      	mov	r1, r0
 23fa01e:	4798      	blx	r3
    }
 23fa020:	4620      	mov	r0, r4
 23fa022:	bd10      	pop	{r4, pc}

023fa024 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fa024:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fa026:	2000      	movs	r0, #0
 23fa028:	4b04      	ldr	r3, [pc, #16]	; (23fa03c <_GLOBAL__sub_I_System+0x18>)
 23fa02a:	601a      	str	r2, [r3, #0]
 23fa02c:	4b04      	ldr	r3, [pc, #16]	; (23fa040 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fa02e:	4a05      	ldr	r2, [pc, #20]	; (23fa044 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fa030:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fa034:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fa036:	f7ff bdb1 	b.w	23f9b9c <set_system_mode>
 23fa03a:	bf00      	nop
 23fa03c:	1007ae58 	.word	0x1007ae58
 23fa040:	1007ae4c 	.word	0x1007ae4c
 23fa044:	ffff0000 	.word	0xffff0000

023fa048 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fa048:	b510      	push	{r4, lr}
 23fa04a:	4604      	mov	r4, r0
{
    free(buffer);
 23fa04c:	6800      	ldr	r0, [r0, #0]
 23fa04e:	f7ff ff1f 	bl	23f9e90 <free>
}
 23fa052:	4620      	mov	r0, r4
 23fa054:	bd10      	pop	{r4, pc}

023fa056 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fa056:	b510      	push	{r4, lr}
 23fa058:	4604      	mov	r4, r0
    if (buffer) {
 23fa05a:	6800      	ldr	r0, [r0, #0]
 23fa05c:	b108      	cbz	r0, 23fa062 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fa05e:	f7ff ff17 	bl	23f9e90 <free>
    }
    buffer = nullptr;
 23fa062:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fa064:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fa068:	6023      	str	r3, [r4, #0]
}
 23fa06a:	bd10      	pop	{r4, pc}

023fa06c <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fa06c:	b538      	push	{r3, r4, r5, lr}
 23fa06e:	4604      	mov	r4, r0
 23fa070:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fa072:	6800      	ldr	r0, [r0, #0]
 23fa074:	3101      	adds	r1, #1
 23fa076:	f7ff ff19 	bl	23f9eac <realloc>
    if (newbuffer) {
 23fa07a:	b110      	cbz	r0, 23fa082 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fa07c:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fa080:	2001      	movs	r0, #1
    }
    return 0;
}
 23fa082:	bd38      	pop	{r3, r4, r5, pc}

023fa084 <_ZN6String7reserveEj>:
{
 23fa084:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fa086:	6803      	ldr	r3, [r0, #0]
{
 23fa088:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fa08a:	b123      	cbz	r3, 23fa096 <_ZN6String7reserveEj+0x12>
 23fa08c:	6843      	ldr	r3, [r0, #4]
 23fa08e:	428b      	cmp	r3, r1
 23fa090:	d301      	bcc.n	23fa096 <_ZN6String7reserveEj+0x12>
 23fa092:	2001      	movs	r0, #1
}
 23fa094:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fa096:	4620      	mov	r0, r4
 23fa098:	f7ff ffe8 	bl	23fa06c <_ZN6String12changeBufferEj>
 23fa09c:	2800      	cmp	r0, #0
 23fa09e:	d0f9      	beq.n	23fa094 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fa0a0:	68a3      	ldr	r3, [r4, #8]
 23fa0a2:	2b00      	cmp	r3, #0
 23fa0a4:	d1f5      	bne.n	23fa092 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fa0a6:	6822      	ldr	r2, [r4, #0]
 23fa0a8:	7013      	strb	r3, [r2, #0]
 23fa0aa:	e7f2      	b.n	23fa092 <_ZN6String7reserveEj+0xe>

023fa0ac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fa0ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa0ae:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fa0b0:	4611      	mov	r1, r2
 23fa0b2:	9201      	str	r2, [sp, #4]
{
 23fa0b4:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fa0b6:	f7ff ffe5 	bl	23fa084 <_ZN6String7reserveEj>
 23fa0ba:	9a01      	ldr	r2, [sp, #4]
 23fa0bc:	b928      	cbnz	r0, 23fa0ca <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fa0be:	4620      	mov	r0, r4
 23fa0c0:	f7ff ffc9 	bl	23fa056 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fa0c4:	4620      	mov	r0, r4
 23fa0c6:	b003      	add	sp, #12
 23fa0c8:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fa0ca:	4629      	mov	r1, r5
    len = length;
 23fa0cc:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fa0ce:	6820      	ldr	r0, [r4, #0]
 23fa0d0:	f005 f86e 	bl	23ff1b0 <memcpy>
    buffer[len] = 0;
 23fa0d4:	2100      	movs	r1, #0
 23fa0d6:	6822      	ldr	r2, [r4, #0]
 23fa0d8:	68a3      	ldr	r3, [r4, #8]
 23fa0da:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fa0dc:	e7f2      	b.n	23fa0c4 <_ZN6String4copyEPKcj+0x18>

023fa0de <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fa0de:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fa0e0:	b513      	push	{r0, r1, r4, lr}
 23fa0e2:	4604      	mov	r4, r0
    capacity_ = 0;
 23fa0e4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fa0e8:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fa0ea:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fa0ec:	b141      	cbz	r1, 23fa100 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fa0ee:	4608      	mov	r0, r1
 23fa0f0:	9101      	str	r1, [sp, #4]
 23fa0f2:	f7fe fcc7 	bl	23f8a84 <strlen>
 23fa0f6:	9901      	ldr	r1, [sp, #4]
 23fa0f8:	4602      	mov	r2, r0
 23fa0fa:	4620      	mov	r0, r4
 23fa0fc:	f7ff ffd6 	bl	23fa0ac <_ZN6String4copyEPKcj>
}
 23fa100:	4620      	mov	r0, r4
 23fa102:	b002      	add	sp, #8
 23fa104:	bd10      	pop	{r4, pc}

023fa106 <_ZN6StringC1EPKcj>:
    buffer = nullptr;
 23fa106:	2300      	movs	r3, #0
String::String(const char *cstr, unsigned int length)
 23fa108:	b510      	push	{r4, lr}
 23fa10a:	4604      	mov	r4, r0
    capacity_ = 0;
 23fa10c:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fa110:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fa112:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fa114:	b109      	cbz	r1, 23fa11a <_ZN6StringC1EPKcj+0x14>
        copy(cstr, length);
 23fa116:	f7ff ffc9 	bl	23fa0ac <_ZN6String4copyEPKcj>
}
 23fa11a:	4620      	mov	r0, r4
 23fa11c:	bd10      	pop	{r4, pc}

023fa11e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fa11e:	b538      	push	{r3, r4, r5, lr}
 23fa120:	4605      	mov	r5, r0
    if (buffer) {
 23fa122:	6800      	ldr	r0, [r0, #0]
{
 23fa124:	460c      	mov	r4, r1
    if (buffer) {
 23fa126:	b170      	cbz	r0, 23fa146 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
 23fa128:	686a      	ldr	r2, [r5, #4]
 23fa12a:	688b      	ldr	r3, [r1, #8]
 23fa12c:	429a      	cmp	r2, r3
 23fa12e:	d308      	bcc.n	23fa142 <_ZN6String4moveERS_+0x24>
 23fa130:	6809      	ldr	r1, [r1, #0]
 23fa132:	b131      	cbz	r1, 23fa142 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fa134:	f005 f8b1 	bl	23ff29a <strcpy>
            len = rhs.len;
 23fa138:	68a3      	ldr	r3, [r4, #8]
 23fa13a:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fa13c:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
 23fa13e:	60a3      	str	r3, [r4, #8]
}
 23fa140:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fa142:	f7ff fea5 	bl	23f9e90 <free>
    buffer = rhs.buffer;
 23fa146:	6823      	ldr	r3, [r4, #0]
 23fa148:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
 23fa14a:	6863      	ldr	r3, [r4, #4]
 23fa14c:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fa14e:	68a3      	ldr	r3, [r4, #8]
 23fa150:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fa152:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
 23fa154:	e9c4 3300 	strd	r3, r3, [r4]
 23fa158:	e7f1      	b.n	23fa13e <_ZN6String4moveERS_+0x20>

023fa15a <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fa15a:	2300      	movs	r3, #0
String::String(String &&rval)
 23fa15c:	b510      	push	{r4, lr}
 23fa15e:	4604      	mov	r4, r0
    capacity_ = 0;
 23fa160:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fa164:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fa166:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fa168:	f7ff ffd9 	bl	23fa11e <_ZN6String4moveERS_>
}
 23fa16c:	4620      	mov	r0, r4
 23fa16e:	bd10      	pop	{r4, pc}

023fa170 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fa170:	4288      	cmp	r0, r1
{
 23fa172:	b510      	push	{r4, lr}
 23fa174:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fa176:	d005      	beq.n	23fa184 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fa178:	680b      	ldr	r3, [r1, #0]
 23fa17a:	b12b      	cbz	r3, 23fa188 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fa17c:	688a      	ldr	r2, [r1, #8]
 23fa17e:	4619      	mov	r1, r3
 23fa180:	f7ff ff94 	bl	23fa0ac <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fa184:	4620      	mov	r0, r4
 23fa186:	bd10      	pop	{r4, pc}
        invalidate();
 23fa188:	f7ff ff65 	bl	23fa056 <_ZN6String10invalidateEv>
 23fa18c:	e7fa      	b.n	23fa184 <_ZN6StringaSERKS_+0x14>

023fa18e <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fa18e:	2300      	movs	r3, #0
String::String(const String &value)
 23fa190:	b510      	push	{r4, lr}
 23fa192:	4604      	mov	r4, r0
    capacity_ = 0;
 23fa194:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fa198:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fa19a:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fa19c:	f7ff ffe8 	bl	23fa170 <_ZN6StringaSERKS_>
}
 23fa1a0:	4620      	mov	r0, r4
 23fa1a2:	bd10      	pop	{r4, pc}

023fa1a4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
    if (this != &rval) {
 23fa1a4:	4288      	cmp	r0, r1
{
 23fa1a6:	b510      	push	{r4, lr}
 23fa1a8:	4604      	mov	r4, r0
    if (this != &rval) {
 23fa1aa:	d001      	beq.n	23fa1b0 <_ZN6StringaSEOS_+0xc>
        move(rval);
 23fa1ac:	f7ff ffb7 	bl	23fa11e <_ZN6String4moveERS_>
    }
    return *this;
}
 23fa1b0:	4620      	mov	r0, r4
 23fa1b2:	bd10      	pop	{r4, pc}

023fa1b4 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fa1b4:	b513      	push	{r0, r1, r4, lr}
 23fa1b6:	4604      	mov	r4, r0
    if (cstr) {
 23fa1b8:	b159      	cbz	r1, 23fa1d2 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
 23fa1ba:	4608      	mov	r0, r1
 23fa1bc:	9101      	str	r1, [sp, #4]
 23fa1be:	f7fe fc61 	bl	23f8a84 <strlen>
 23fa1c2:	9901      	ldr	r1, [sp, #4]
 23fa1c4:	4602      	mov	r2, r0
 23fa1c6:	4620      	mov	r0, r4
 23fa1c8:	f7ff ff70 	bl	23fa0ac <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fa1cc:	4620      	mov	r0, r4
 23fa1ce:	b002      	add	sp, #8
 23fa1d0:	bd10      	pop	{r4, pc}
        invalidate();
 23fa1d2:	f7ff ff40 	bl	23fa056 <_ZN6String10invalidateEv>
 23fa1d6:	e7f9      	b.n	23fa1cc <_ZN6StringaSEPKc+0x18>

023fa1d8 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fa1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa1da:	4604      	mov	r4, r0
 23fa1dc:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
 23fa1de:	460f      	mov	r7, r1
 23fa1e0:	b909      	cbnz	r1, 23fa1e6 <_ZN6String6concatEPKcj+0xe>
        return 0;
 23fa1e2:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
 23fa1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
 23fa1e6:	b18a      	cbz	r2, 23fa20c <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
 23fa1e8:	6885      	ldr	r5, [r0, #8]
 23fa1ea:	4415      	add	r5, r2
    if (!reserve(newlen)) {
 23fa1ec:	4629      	mov	r1, r5
 23fa1ee:	f7ff ff49 	bl	23fa084 <_ZN6String7reserveEj>
 23fa1f2:	2800      	cmp	r0, #0
 23fa1f4:	d0f5      	beq.n	23fa1e2 <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
 23fa1f6:	68a3      	ldr	r3, [r4, #8]
 23fa1f8:	6820      	ldr	r0, [r4, #0]
 23fa1fa:	4632      	mov	r2, r6
 23fa1fc:	4418      	add	r0, r3
 23fa1fe:	4639      	mov	r1, r7
 23fa200:	f004 ffd6 	bl	23ff1b0 <memcpy>
    buffer[newlen] = 0;
 23fa204:	2200      	movs	r2, #0
 23fa206:	6823      	ldr	r3, [r4, #0]
 23fa208:	555a      	strb	r2, [r3, r5]
    len = newlen;
 23fa20a:	60a5      	str	r5, [r4, #8]
        return 1;
 23fa20c:	2001      	movs	r0, #1
 23fa20e:	e7e9      	b.n	23fa1e4 <_ZN6String6concatEPKcj+0xc>

023fa210 <_ZN6String6concatEc>:
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
    char buf[2] = {};
 23fa210:	2300      	movs	r3, #0
{
 23fa212:	b507      	push	{r0, r1, r2, lr}
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
 23fa214:	2201      	movs	r2, #1
    char buf[2] = {};
 23fa216:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
 23fa21a:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
 23fa21e:	a901      	add	r1, sp, #4
 23fa220:	f7ff ffda 	bl	23fa1d8 <_ZN6String6concatEPKcj>
}
 23fa224:	b003      	add	sp, #12
 23fa226:	f85d fb04 	ldr.w	pc, [sp], #4

023fa22a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    if (!buffer || !s.buffer) {
 23fa22a:	6802      	ldr	r2, [r0, #0]
{
 23fa22c:	460b      	mov	r3, r1
    if (!buffer || !s.buffer) {
 23fa22e:	6809      	ldr	r1, [r1, #0]
 23fa230:	b162      	cbz	r2, 23fa24c <_ZNK6String9compareToERKS_+0x22>
 23fa232:	b941      	cbnz	r1, 23fa246 <_ZNK6String9compareToERKS_+0x1c>
        if (s.buffer && s.len > 0) {
            return 0 - *(unsigned char *)s.buffer;
        }
        if (buffer && len > 0) {
 23fa234:	6880      	ldr	r0, [r0, #8]
 23fa236:	b160      	cbz	r0, 23fa252 <_ZNK6String9compareToERKS_+0x28>
            return *(unsigned char *)buffer;
 23fa238:	7810      	ldrb	r0, [r2, #0]
 23fa23a:	4770      	bx	lr
        if (s.buffer && s.len > 0) {
 23fa23c:	6898      	ldr	r0, [r3, #8]
 23fa23e:	b140      	cbz	r0, 23fa252 <_ZNK6String9compareToERKS_+0x28>
            return 0 - *(unsigned char *)s.buffer;
 23fa240:	7809      	ldrb	r1, [r1, #0]
 23fa242:	4248      	negs	r0, r1
 23fa244:	4770      	bx	lr
        }
        return 0;
    }
    return strcmp(buffer, s.buffer);
 23fa246:	4610      	mov	r0, r2
 23fa248:	f7fe bc12 	b.w	23f8a70 <strcmp>
        if (s.buffer && s.len > 0) {
 23fa24c:	2900      	cmp	r1, #0
 23fa24e:	d1f5      	bne.n	23fa23c <_ZNK6String9compareToERKS_+0x12>
        return 0;
 23fa250:	4608      	mov	r0, r1
}
 23fa252:	4770      	bx	lr

023fa254 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 23fa254:	b508      	push	{r3, lr}
    return (len == s2.len && compareTo(s2) == 0);
 23fa256:	6882      	ldr	r2, [r0, #8]
 23fa258:	688b      	ldr	r3, [r1, #8]
 23fa25a:	429a      	cmp	r2, r3
 23fa25c:	d105      	bne.n	23fa26a <_ZNK6String6equalsERKS_+0x16>
 23fa25e:	f7ff ffe4 	bl	23fa22a <_ZNK6String9compareToERKS_>
 23fa262:	fab0 f080 	clz	r0, r0
 23fa266:	0940      	lsrs	r0, r0, #5
}
 23fa268:	bd08      	pop	{r3, pc}
    return (len == s2.len && compareTo(s2) == 0);
 23fa26a:	2000      	movs	r0, #0
 23fa26c:	e7fc      	b.n	23fa268 <_ZNK6String6equalsERKS_+0x14>

023fa26e <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
 23fa26e:	b508      	push	{r3, lr}
    if (len == 0) {
 23fa270:	6882      	ldr	r2, [r0, #8]
 23fa272:	b93a      	cbnz	r2, 23fa284 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
 23fa274:	b121      	cbz	r1, 23fa280 <_ZNK6String6equalsEPKc+0x12>
 23fa276:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
 23fa278:	fab0 f080 	clz	r0, r0
 23fa27c:	0940      	lsrs	r0, r0, #5
 23fa27e:	e000      	b.n	23fa282 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
 23fa280:	2001      	movs	r0, #1
}
 23fa282:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
 23fa284:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
 23fa286:	b909      	cbnz	r1, 23fa28c <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
 23fa288:	7800      	ldrb	r0, [r0, #0]
 23fa28a:	e7f5      	b.n	23fa278 <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
 23fa28c:	f7fe fbf0 	bl	23f8a70 <strcmp>
 23fa290:	e7f2      	b.n	23fa278 <_ZNK6String6equalsEPKc+0xa>

023fa292 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fa292:	4770      	bx	lr

023fa294 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 23fa294:	4770      	bx	lr

023fa296 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
 23fa296:	4770      	bx	lr

023fa298 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fa298:	4770      	bx	lr
	...

023fa29c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fa29c:	4b06      	ldr	r3, [pc, #24]	; (23fa2b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fa29e:	b510      	push	{r4, lr}
	    ||
 23fa2a0:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fa2a2:	f100 040c 	add.w	r4, r0, #12
 23fa2a6:	d005      	beq.n	23fa2b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fa2a8:	4608      	mov	r0, r1
 23fa2aa:	f004 fe51 	bl	23fef50 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fa2ae:	2800      	cmp	r0, #0
 23fa2b0:	bf08      	it	eq
 23fa2b2:	2400      	moveq	r4, #0
      }
 23fa2b4:	4620      	mov	r0, r4
 23fa2b6:	bd10      	pop	{r4, pc}
 23fa2b8:	023ffacc 	.word	0x023ffacc

023fa2bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fa2bc:	4b06      	ldr	r3, [pc, #24]	; (23fa2d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fa2be:	b510      	push	{r4, lr}
	    ||
 23fa2c0:	4299      	cmp	r1, r3
 23fa2c2:	f100 040c 	add.w	r4, r0, #12
 23fa2c6:	d005      	beq.n	23fa2d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fa2c8:	4608      	mov	r0, r1
 23fa2ca:	f004 fe41 	bl	23fef50 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fa2ce:	2800      	cmp	r0, #0
 23fa2d0:	bf08      	it	eq
 23fa2d2:	2400      	moveq	r4, #0
      }
 23fa2d4:	4620      	mov	r0, r4
 23fa2d6:	bd10      	pop	{r4, pc}
 23fa2d8:	023ffacc 	.word	0x023ffacc

023fa2dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fa2dc:	4b06      	ldr	r3, [pc, #24]	; (23fa2f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fa2de:	b510      	push	{r4, lr}
	    ||
 23fa2e0:	4299      	cmp	r1, r3
 23fa2e2:	f100 040c 	add.w	r4, r0, #12
 23fa2e6:	d005      	beq.n	23fa2f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fa2e8:	4608      	mov	r0, r1
 23fa2ea:	f004 fe31 	bl	23fef50 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fa2ee:	2800      	cmp	r0, #0
 23fa2f0:	bf08      	it	eq
 23fa2f2:	2400      	moveq	r4, #0
      }
 23fa2f4:	4620      	mov	r0, r4
 23fa2f6:	bd10      	pop	{r4, pc}
 23fa2f8:	023ffacc 	.word	0x023ffacc

023fa2fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fa2fc:	b510      	push	{r4, lr}
 23fa2fe:	4604      	mov	r4, r0
 23fa300:	2168      	movs	r1, #104	; 0x68
 23fa302:	f7fe fbe8 	bl	23f8ad6 <_ZdlPvj>
 23fa306:	4620      	mov	r0, r4
 23fa308:	bd10      	pop	{r4, pc}

023fa30a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fa30a:	b510      	push	{r4, lr}
 23fa30c:	4604      	mov	r4, r0
 23fa30e:	2128      	movs	r1, #40	; 0x28
 23fa310:	f7fe fbe1 	bl	23f8ad6 <_ZdlPvj>
 23fa314:	4620      	mov	r0, r4
 23fa316:	bd10      	pop	{r4, pc}

023fa318 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fa318:	b510      	push	{r4, lr}
 23fa31a:	4604      	mov	r4, r0
 23fa31c:	2130      	movs	r1, #48	; 0x30
 23fa31e:	f7fe fbda 	bl	23f8ad6 <_ZdlPvj>
 23fa322:	4620      	mov	r0, r4
 23fa324:	bd10      	pop	{r4, pc}

023fa326 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fa326:	2168      	movs	r1, #104	; 0x68
 23fa328:	f7fe bbd5 	b.w	23f8ad6 <_ZdlPvj>

023fa32c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fa32c:	2128      	movs	r1, #40	; 0x28
 23fa32e:	f7fe bbd2 	b.w	23f8ad6 <_ZdlPvj>

023fa332 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fa332:	2130      	movs	r1, #48	; 0x30
 23fa334:	f7fe bbcf 	b.w	23f8ad6 <_ZdlPvj>

023fa338 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
 23fa338:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fa33a:	2500      	movs	r5, #0
 23fa33c:	1cec      	adds	r4, r5, #3
 23fa33e:	428c      	cmp	r4, r1
 23fa340:	d80d      	bhi.n	23fa35e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
 23fa342:	1c6e      	adds	r6, r5, #1
 23fa344:	5d87      	ldrb	r7, [r0, r6]
        adsLen = buf[i];
 23fa346:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
 23fa348:	4297      	cmp	r7, r2
 23fa34a:	d105      	bne.n	23fa358 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
 23fa34c:	4426      	add	r6, r4
 23fa34e:	42b1      	cmp	r1, r6
 23fa350:	d305      	bcc.n	23fa35e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
 23fa352:	601d      	str	r5, [r3, #0]
                adsLen += 1;
 23fa354:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
 23fa356:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
 23fa358:	3401      	adds	r4, #1
 23fa35a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fa35c:	e7ee      	b.n	23fa33c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
 23fa35e:	2000      	movs	r0, #0
 23fa360:	e7f9      	b.n	23fa356 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

023fa364 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
 23fa364:	200a      	movs	r0, #10
 23fa366:	4a02      	ldr	r2, [pc, #8]	; (23fa370 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
 23fa368:	4902      	ldr	r1, [pc, #8]	; (23fa374 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
 23fa36a:	f7ff bbd1 	b.w	23f9b10 <panic_>
 23fa36e:	bf00      	nop
 23fa370:	023f95b5 	.word	0x023f95b5
 23fa374:	023ff878 	.word	0x023ff878

023fa378 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fa378:	b430      	push	{r4, r5}
 23fa37a:	460d      	mov	r5, r1
 23fa37c:	4611      	mov	r1, r2
 23fa37e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
 23fa380:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fa382:	6809      	ldr	r1, [r1, #0]
 23fa384:	e9d3 4300 	ldrd	r4, r3, [r3]
 23fa388:	6828      	ldr	r0, [r5, #0]
 23fa38a:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23fa38c:	bc30      	pop	{r4, r5}
 23fa38e:	4760      	bx	ip

023fa390 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
 23fa390:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fa392:	b538      	push	{r3, r4, r5, lr}
 23fa394:	4604      	mov	r4, r0
	switch (__op)
 23fa396:	d102      	bne.n	23fa39e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 23fa398:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 23fa39a:	6023      	str	r3, [r4, #0]
	}
 23fa39c:	e003      	b.n	23fa3a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
 23fa39e:	2a02      	cmp	r2, #2
 23fa3a0:	d003      	beq.n	23fa3aa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
 23fa3a2:	2a03      	cmp	r2, #3
 23fa3a4:	d00d      	beq.n	23fa3c2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
 23fa3a6:	2000      	movs	r0, #0
 23fa3a8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 23fa3aa:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
 23fa3ac:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fa3ae:	f7fe fb8e 	bl	23f8ace <_Znwj>
 23fa3b2:	4603      	mov	r3, r0
 23fa3b4:	2800      	cmp	r0, #0
 23fa3b6:	d0f0      	beq.n	23fa39a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
 23fa3b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fa3bc:	e883 0003 	stmia.w	r3, {r0, r1}
 23fa3c0:	e7eb      	b.n	23fa39a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 23fa3c2:	6800      	ldr	r0, [r0, #0]
 23fa3c4:	2800      	cmp	r0, #0
 23fa3c6:	d0ee      	beq.n	23fa3a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
 23fa3c8:	2108      	movs	r1, #8
 23fa3ca:	f7fe fb84 	bl	23f8ad6 <_ZdlPvj>
 23fa3ce:	e7ea      	b.n	23fa3a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

023fa3d0 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
 23fa3d0:	b510      	push	{r4, lr}
      {
	if (_M_manager)
 23fa3d2:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fa3d4:	4604      	mov	r4, r0
	if (_M_manager)
 23fa3d6:	b12b      	cbz	r3, 23fa3e4 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fa3d8:	2203      	movs	r2, #3
 23fa3da:	4601      	mov	r1, r0
 23fa3dc:	4798      	blx	r3
	    _M_manager = nullptr;
 23fa3de:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fa3e0:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
 23fa3e4:	bd10      	pop	{r4, pc}

023fa3e6 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
 23fa3e6:	b510      	push	{r4, lr}
	if (_M_manager)
 23fa3e8:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fa3ea:	4604      	mov	r4, r0
	if (_M_manager)
 23fa3ec:	b12b      	cbz	r3, 23fa3fa <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fa3ee:	2203      	movs	r2, #3
 23fa3f0:	4601      	mov	r1, r0
 23fa3f2:	4798      	blx	r3
	    _M_manager = nullptr;
 23fa3f4:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fa3f6:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
 23fa3fa:	bd10      	pop	{r4, pc}

023fa3fc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
 23fa3fc:	2300      	movs	r3, #0
 23fa3fe:	2220      	movs	r2, #32
    int discoverAllServices(BlePeerDevice& peer) {
 23fa400:	b510      	push	{r4, lr}
 23fa402:	4604      	mov	r4, r0
 23fa404:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
 23fa406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23fa40a:	4a08      	ldr	r2, [pc, #32]	; (23fa42c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
 23fa40c:	2001      	movs	r0, #1
 23fa40e:	9200      	str	r2, [sp, #0]
 23fa410:	4907      	ldr	r1, [pc, #28]	; (23fa430 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
 23fa412:	aa02      	add	r2, sp, #8
 23fa414:	f7ff fb8a 	bl	23f9b2c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
 23fa418:	2300      	movs	r3, #0
 23fa41a:	4622      	mov	r2, r4
 23fa41c:	6820      	ldr	r0, [r4, #0]
 23fa41e:	4905      	ldr	r1, [pc, #20]	; (23fa434 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
 23fa420:	8800      	ldrh	r0, [r0, #0]
    }
 23fa422:	b00a      	add	sp, #40	; 0x28
 23fa424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
 23fa428:	f7ff b926 	b.w	23f9678 <hal_ble_gatt_client_discover_all_services>
 23fa42c:	023ff89a 	.word	0x023ff89a
 23fa430:	023ff88f 	.word	0x023ff88f
 23fa434:	023fc05d 	.word	0x023fc05d

023fa438 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
 23fa438:	b510      	push	{r4, lr}
 23fa43a:	3801      	subs	r0, #1
 23fa43c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
 23fa440:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 23fa444:	3202      	adds	r2, #2
 23fa446:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
 23fa448:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
 23fa44c:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
 23fa44e:	bf88      	it	hi
 23fa450:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
 23fa454:	f802 4c02 	strb.w	r4, [r2, #-2]
        out = concat_nibble(out, (buf[i] & 0xF));
 23fa458:	7803      	ldrb	r3, [r0, #0]
 23fa45a:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
 23fa45e:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
 23fa462:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
 23fa464:	bf88      	it	hi
 23fa466:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
 23fa46a:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
 23fa46c:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
 23fa470:	d1e6      	bne.n	23fa440 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
 23fa472:	bd10      	pop	{r4, pc}

023fa474 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fa474:	b510      	push	{r4, lr}
 23fa476:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fa478:	3058      	adds	r0, #88	; 0x58
 23fa47a:	f7ff fdca 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
 23fa47e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
 23fa482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fa486:	f7ff bddf 	b.w	23fa048 <_ZN6StringD1Ev>

023fa48a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
 23fa48a:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
 23fa48c:	6803      	ldr	r3, [r0, #0]
      operator=(const __shared_count& __r) noexcept
 23fa48e:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
 23fa490:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
 23fa492:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
 23fa494:	d008      	beq.n	23fa4a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
 23fa496:	b111      	cbz	r1, 23fa49e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
 23fa498:	684b      	ldr	r3, [r1, #4]
 23fa49a:	3301      	adds	r3, #1
 23fa49c:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
 23fa49e:	6828      	ldr	r0, [r5, #0]
 23fa4a0:	b108      	cbz	r0, 23fa4a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
 23fa4a2:	f7fe fb69 	bl	23f8b78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fa4a6:	602c      	str	r4, [r5, #0]
      }
 23fa4a8:	bd38      	pop	{r3, r4, r5, pc}

023fa4aa <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
 23fa4aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fa4ae:	b2da      	uxtb	r2, r3
 23fa4b0:	2a09      	cmp	r2, #9
 23fa4b2:	d801      	bhi.n	23fa4b8 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
 23fa4b4:	4618      	mov	r0, r3
 23fa4b6:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
 23fa4b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23fa4bc:	2b05      	cmp	r3, #5
 23fa4be:	d801      	bhi.n	23fa4c4 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
 23fa4c0:	3857      	subs	r0, #87	; 0x57
 23fa4c2:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
 23fa4c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23fa4c8:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
 23fa4ca:	bf94      	ite	ls
 23fa4cc:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
 23fa4ce:	f04f 30ff 	movhi.w	r0, #4294967295
}
 23fa4d2:	4770      	bx	lr

023fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>:
            locked_(false) {
 23fa4d4:	2300      	movs	r3, #0
    WiringBleLock() :
 23fa4d6:	b510      	push	{r4, lr}
            locked_(false) {
 23fa4d8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fa4da:	4b04      	ldr	r3, [pc, #16]	; (23fa4ec <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
 23fa4dc:	4604      	mov	r4, r0
 23fa4de:	6818      	ldr	r0, [r3, #0]
 23fa4e0:	f7ff f972 	bl	23f97c8 <os_mutex_recursive_lock>
        locked_ = true;
 23fa4e4:	2301      	movs	r3, #1
    }
 23fa4e6:	4620      	mov	r0, r4
        locked_ = true;
 23fa4e8:	7023      	strb	r3, [r4, #0]
    }
 23fa4ea:	bd10      	pop	{r4, pc}
 23fa4ec:	1007ae60 	.word	0x1007ae60

023fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
 23fa4f0:	b510      	push	{r4, lr}
        if (locked_) {
 23fa4f2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
 23fa4f4:	4604      	mov	r4, r0
        if (locked_) {
 23fa4f6:	b11b      	cbz	r3, 23fa500 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fa4f8:	4b02      	ldr	r3, [pc, #8]	; (23fa504 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
 23fa4fa:	6818      	ldr	r0, [r3, #0]
 23fa4fc:	f7ff f972 	bl	23f97e4 <os_mutex_recursive_unlock>
    }
 23fa500:	4620      	mov	r0, r4
 23fa502:	bd10      	pop	{r4, pc}
 23fa504:	1007ae60 	.word	0x1007ae60

023fa508 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fa508:	b082      	sub	sp, #8
    address_ = addr;
 23fa50a:	466a      	mov	r2, sp
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fa50c:	4603      	mov	r3, r0
    address_ = addr;
 23fa50e:	6808      	ldr	r0, [r1, #0]
 23fa510:	6849      	ldr	r1, [r1, #4]
 23fa512:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
 23fa514:	466a      	mov	r2, sp
 23fa516:	ca03      	ldmia	r2!, {r0, r1}
 23fa518:	6018      	str	r0, [r3, #0]
}
 23fa51a:	4618      	mov	r0, r3
    address_ = addr.address_;
 23fa51c:	6059      	str	r1, [r3, #4]
}
 23fa51e:	b002      	add	sp, #8
 23fa520:	4770      	bx	lr

023fa522 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
 23fa522:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
 23fa524:	7982      	ldrb	r2, [r0, #6]
 23fa526:	798b      	ldrb	r3, [r1, #6]
 23fa528:	429a      	cmp	r2, r3
 23fa52a:	d106      	bne.n	23fa53a <_ZNK8particle10BleAddresseqERKS0_+0x18>
 23fa52c:	2206      	movs	r2, #6
 23fa52e:	f004 fe2f 	bl	23ff190 <memcmp>
 23fa532:	fab0 f080 	clz	r0, r0
 23fa536:	0940      	lsrs	r0, r0, #5
}
 23fa538:	bd08      	pop	{r3, pc}
    return false;
 23fa53a:	2000      	movs	r0, #0
 23fa53c:	e7fc      	b.n	23fa538 <_ZNK8particle10BleAddresseqERKS0_+0x16>
	...

023fa540 <_ZNK8particle10BleAddress7isValidEv>:
bool BleAddress::isValid() const {
 23fa540:	b570      	push	{r4, r5, r6, lr}
 23fa542:	4604      	mov	r4, r0
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fa544:	4b38      	ldr	r3, [pc, #224]	; (23fa628 <_ZNK8particle10BleAddress7isValidEv+0xe8>)
bool BleAddress::isValid() const {
 23fa546:	b086      	sub	sp, #24
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fa548:	6818      	ldr	r0, [r3, #0]
 23fa54a:	889b      	ldrh	r3, [r3, #4]
 23fa54c:	9000      	str	r0, [sp, #0]
 23fa54e:	f8ad 3004 	strh.w	r3, [sp, #4]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fa552:	4b36      	ldr	r3, [pc, #216]	; (23fa62c <_ZNK8particle10BleAddress7isValidEv+0xec>)
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fa554:	79a6      	ldrb	r6, [r4, #6]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fa556:	6818      	ldr	r0, [r3, #0]
 23fa558:	889b      	ldrh	r3, [r3, #4]
 23fa55a:	9002      	str	r0, [sp, #8]
 23fa55c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fa560:	b97e      	cbnz	r6, 23fa582 <_ZNK8particle10BleAddress7isValidEv+0x42>
        return memcmp(address_.addr, bitsClear, BLE_SIG_ADDR_LEN) && memcmp(address_.addr, bitsSet, BLE_SIG_ADDR_LEN);
 23fa562:	2206      	movs	r2, #6
 23fa564:	4669      	mov	r1, sp
 23fa566:	4620      	mov	r0, r4
 23fa568:	f004 fe12 	bl	23ff190 <memcmp>
 23fa56c:	b138      	cbz	r0, 23fa57e <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fa56e:	2206      	movs	r2, #6
 23fa570:	4620      	mov	r0, r4
 23fa572:	a902      	add	r1, sp, #8
 23fa574:	f004 fe0c 	bl	23ff190 <memcmp>
 23fa578:	3800      	subs	r0, #0
 23fa57a:	bf18      	it	ne
 23fa57c:	2001      	movne	r0, #1
}
 23fa57e:	b006      	add	sp, #24
 23fa580:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fa582:	88a3      	ldrh	r3, [r4, #4]
 23fa584:	6820      	ldr	r0, [r4, #0]
 23fa586:	f8ad 3014 	strh.w	r3, [sp, #20]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fa58a:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 23fa58e:	2b01      	cmp	r3, #1
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fa590:	9004      	str	r0, [sp, #16]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fa592:	d124      	bne.n	23fa5de <_ZNK8particle10BleAddress7isValidEv+0x9e>
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fa594:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fa598:	2206      	movs	r2, #6
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fa59a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fa59e:	4669      	mov	r1, sp
 23fa5a0:	a804      	add	r0, sp, #16
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fa5a2:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fa5a6:	f004 fdf3 	bl	23ff190 <memcmp>
 23fa5aa:	2800      	cmp	r0, #0
 23fa5ac:	d03a      	beq.n	23fa624 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0; // Set the two most significant bits
 23fa5ae:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fa5b2:	2206      	movs	r2, #6
 23fa5b4:	a902      	add	r1, sp, #8
 23fa5b6:	a804      	add	r0, sp, #16
            temp[5] |= 0xC0; // Set the two most significant bits
 23fa5b8:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fa5bc:	f004 fde8 	bl	23ff190 <memcmp>
 23fa5c0:	b380      	cbz	r0, 23fa624 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC) {
 23fa5c2:	7960      	ldrb	r0, [r4, #5]
 23fa5c4:	2e01      	cmp	r6, #1
 23fa5c6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fa5ca:	d104      	bne.n	23fa5d6 <_ZNK8particle10BleAddress7isValidEv+0x96>
                return (address_.addr[5] & 0xC0) == 0xC0;
 23fa5cc:	28c0      	cmp	r0, #192	; 0xc0
            return (address_.addr[5] & 0xC0) == 0x40;
 23fa5ce:	bf14      	ite	ne
 23fa5d0:	2000      	movne	r0, #0
 23fa5d2:	2001      	moveq	r0, #1
 23fa5d4:	e7d3      	b.n	23fa57e <_ZNK8particle10BleAddress7isValidEv+0x3e>
                return (address_.addr[5] & 0xC0) == 0x00;
 23fa5d6:	fab0 f080 	clz	r0, r0
 23fa5da:	0940      	lsrs	r0, r0, #5
 23fa5dc:	e7cf      	b.n	23fa57e <_ZNK8particle10BleAddress7isValidEv+0x3e>
        } else if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE) {
 23fa5de:	2e02      	cmp	r6, #2
 23fa5e0:	d11e      	bne.n	23fa620 <_ZNK8particle10BleAddress7isValidEv+0xe0>
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fa5e2:	2203      	movs	r2, #3
            temp[5] &= 0x3F;
 23fa5e4:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fa5e8:	eb0d 0102 	add.w	r1, sp, r2
            temp[5] &= 0x3F;
 23fa5ec:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fa5f0:	f10d 0013 	add.w	r0, sp, #19
            temp[5] &= 0x3F;
 23fa5f4:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fa5f8:	f004 fdca 	bl	23ff190 <memcmp>
 23fa5fc:	b190      	cbz	r0, 23fa624 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0;
 23fa5fe:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fa602:	2203      	movs	r2, #3
 23fa604:	f10d 010b 	add.w	r1, sp, #11
 23fa608:	f10d 0013 	add.w	r0, sp, #19
            temp[5] |= 0xC0;
 23fa60c:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fa610:	f004 fdbe 	bl	23ff190 <memcmp>
 23fa614:	b130      	cbz	r0, 23fa624 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            return (address_.addr[5] & 0xC0) == 0x40;
 23fa616:	7960      	ldrb	r0, [r4, #5]
 23fa618:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fa61c:	2840      	cmp	r0, #64	; 0x40
 23fa61e:	e7d6      	b.n	23fa5ce <_ZNK8particle10BleAddress7isValidEv+0x8e>
    return true;
 23fa620:	2001      	movs	r0, #1
 23fa622:	e7ac      	b.n	23fa57e <_ZNK8particle10BleAddress7isValidEv+0x3e>
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fa624:	2000      	movs	r0, #0
 23fa626:	e7aa      	b.n	23fa57e <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fa628:	023ff538 	.word	0x023ff538
 23fa62c:	023ff8b6 	.word	0x023ff8b6

023fa630 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
 23fa630:	f04f 33ff 	mov.w	r3, #4294967295
 23fa634:	6003      	str	r3, [r0, #0]
 23fa636:	8083      	strh	r3, [r0, #4]
}
 23fa638:	2000      	movs	r0, #0
 23fa63a:	4770      	bx	lr

023fa63c <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
 23fa63c:	2100      	movs	r1, #0
BleAddress::BleAddress()
 23fa63e:	4602      	mov	r2, r0
 23fa640:	b508      	push	{r3, lr}
        : address_{} {
 23fa642:	6001      	str	r1, [r0, #0]
 23fa644:	6041      	str	r1, [r0, #4]
    clear();
 23fa646:	f7ff fff3 	bl	23fa630 <_ZN8particle10BleAddress5clearEv>
}
 23fa64a:	4610      	mov	r0, r2
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
 23fa64c:	7191      	strb	r1, [r2, #6]
}
 23fa64e:	bd08      	pop	{r3, pc}

023fa650 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
 23fa650:	2301      	movs	r3, #1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fa652:	4602      	mov	r2, r0
BleUuid::BleUuid()
 23fa654:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
 23fa656:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fa658:	4b04      	ldr	r3, [pc, #16]	; (23fa66c <_ZN8particle7BleUuidC1Ev+0x1c>)
 23fa65a:	f103 0110 	add.w	r1, r3, #16
 23fa65e:	f853 4b04 	ldr.w	r4, [r3], #4
 23fa662:	428b      	cmp	r3, r1
 23fa664:	f842 4b04 	str.w	r4, [r2], #4
 23fa668:	d1f9      	bne.n	23fa65e <_ZN8particle7BleUuidC1Ev+0xe>
}
 23fa66a:	bd10      	pop	{r4, pc}
 23fa66c:	023ff53e 	.word	0x023ff53e

023fa670 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
 23fa670:	7c0b      	ldrb	r3, [r1, #16]
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
 23fa672:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
 23fa674:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 23fa678:	d10d      	bne.n	23fa696 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fa67a:	4602      	mov	r2, r0
        type_ = BleUuidType::SHORT;
 23fa67c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fa67e:	4b0c      	ldr	r3, [pc, #48]	; (23fa6b0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
 23fa680:	f103 0410 	add.w	r4, r3, #16
 23fa684:	f853 5b04 	ldr.w	r5, [r3], #4
 23fa688:	42a3      	cmp	r3, r4
 23fa68a:	f842 5b04 	str.w	r5, [r2], #4
 23fa68e:	d1f9      	bne.n	23fa684 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
 23fa690:	880b      	ldrh	r3, [r1, #0]
 23fa692:	8183      	strh	r3, [r0, #12]
}
 23fa694:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
 23fa696:	2301      	movs	r3, #1
 23fa698:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fa69a:	4603      	mov	r3, r0
 23fa69c:	f101 0210 	add.w	r2, r1, #16
 23fa6a0:	f851 4b04 	ldr.w	r4, [r1], #4
 23fa6a4:	4291      	cmp	r1, r2
 23fa6a6:	f843 4b04 	str.w	r4, [r3], #4
 23fa6aa:	d1f9      	bne.n	23fa6a0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
 23fa6ac:	e7f2      	b.n	23fa694 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
 23fa6ae:	bf00      	nop
 23fa6b0:	023ff53e 	.word	0x023ff53e

023fa6b4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fa6b4:	b510      	push	{r4, lr}
    if (uuid128) {
 23fa6b6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fa6b8:	4604      	mov	r4, r0
    if (uuid128) {
 23fa6ba:	b1b1      	cbz	r1, 23fa6ea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
 23fa6bc:	2a01      	cmp	r2, #1
 23fa6be:	f101 0210 	add.w	r2, r1, #16
 23fa6c2:	d10a      	bne.n	23fa6da <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fa6c4:	4601      	mov	r1, r0
 23fa6c6:	f853 0b04 	ldr.w	r0, [r3], #4
 23fa6ca:	4293      	cmp	r3, r2
 23fa6cc:	f841 0b04 	str.w	r0, [r1], #4
 23fa6d0:	d1f9      	bne.n	23fa6c6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
 23fa6d2:	2301      	movs	r3, #1
 23fa6d4:	6123      	str	r3, [r4, #16]
}
 23fa6d6:	4620      	mov	r0, r4
 23fa6d8:	bd10      	pop	{r4, pc}
 23fa6da:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
 23fa6dc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fa6e0:	429a      	cmp	r2, r3
                uuid128_[i] = uuid128[j];
 23fa6e2:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fa6e6:	d1f9      	bne.n	23fa6dc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
 23fa6e8:	e7f3      	b.n	23fa6d2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
 23fa6ea:	2210      	movs	r2, #16
 23fa6ec:	f004 fd87 	bl	23ff1fe <memset>
 23fa6f0:	e7f1      	b.n	23fa6d6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

023fa6f2 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
 23fa6f2:	b538      	push	{r3, r4, r5, lr}
 23fa6f4:	4604      	mov	r4, r0
 23fa6f6:	460d      	mov	r5, r1
        : BleUuid() {
 23fa6f8:	f7ff ffaa 	bl	23fa650 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
 23fa6fc:	2300      	movs	r3, #0
}
 23fa6fe:	4620      	mov	r0, r4
    type_ = BleUuidType::SHORT;
 23fa700:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
 23fa702:	81a5      	strh	r5, [r4, #12]
}
 23fa704:	bd38      	pop	{r3, r4, r5, pc}

023fa706 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
 23fa706:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fa708:	6902      	ldr	r2, [r0, #16]
 23fa70a:	690b      	ldr	r3, [r1, #16]
 23fa70c:	429a      	cmp	r2, r3
 23fa70e:	d106      	bne.n	23fa71e <_ZNK8particle7BleUuideqERKS0_+0x18>
 23fa710:	2210      	movs	r2, #16
 23fa712:	f004 fd3d 	bl	23ff190 <memcmp>
 23fa716:	fab0 f080 	clz	r0, r0
 23fa71a:	0940      	lsrs	r0, r0, #5
}
 23fa71c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fa71e:	2000      	movs	r0, #0
 23fa720:	e7fc      	b.n	23fa71c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

023fa724 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
 23fa724:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
 23fa726:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fa72a:	4602      	mov	r2, r0
void BleUuid::construct(const char* uuid) {
 23fa72c:	4606      	mov	r6, r0
    type_ = BleUuidType::LONG;
 23fa72e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fa730:	4b33      	ldr	r3, [pc, #204]	; (23fa800 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
 23fa732:	460c      	mov	r4, r1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fa734:	f103 0110 	add.w	r1, r3, #16
 23fa738:	f853 0b04 	ldr.w	r0, [r3], #4
 23fa73c:	428b      	cmp	r3, r1
 23fa73e:	f842 0b04 	str.w	r0, [r2], #4
 23fa742:	d1f9      	bne.n	23fa738 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
 23fa744:	b344      	cbz	r4, 23fa798 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
 23fa746:	2124      	movs	r1, #36	; 0x24
 23fa748:	4620      	mov	r0, r4
 23fa74a:	f004 fde0 	bl	23ff30e <strnlen>
 23fa74e:	2804      	cmp	r0, #4
 23fa750:	f04f 0500 	mov.w	r5, #0
 23fa754:	d123      	bne.n	23fa79e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
 23fa756:	f8ad 5004 	strh.w	r5, [sp, #4]
 23fa75a:	af01      	add	r7, sp, #4
 23fa75c:	1ca5      	adds	r5, r4, #2
 23fa75e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
 23fa760:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 23fa764:	f7ff fea1 	bl	23fa4aa <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
 23fa768:	f1b0 0800 	subs.w	r8, r0, #0
 23fa76c:	db12      	blt.n	23fa794 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
 23fa76e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 23fa772:	f7ff fe9a 	bl	23fa4aa <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
 23fa776:	2800      	cmp	r0, #0
 23fa778:	db0c      	blt.n	23fa794 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
 23fa77a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23fa77c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
 23fa780:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23fa782:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
 23fa786:	d1eb      	bne.n	23fa760 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
 23fa788:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23fa78c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
 23fa78e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fa792:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
 23fa794:	2300      	movs	r3, #0
 23fa796:	6133      	str	r3, [r6, #16]
}
 23fa798:	b002      	add	sp, #8
 23fa79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
 23fa79e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fa7a2:	2124      	movs	r1, #36	; 0x24
 23fa7a4:	4620      	mov	r0, r4
 23fa7a6:	f004 fdb2 	bl	23ff30e <strnlen>
 23fa7aa:	42a8      	cmp	r0, r5
 23fa7ac:	d807      	bhi.n	23fa7be <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
 23fa7ae:	4642      	mov	r2, r8
 23fa7b0:	2100      	movs	r1, #0
 23fa7b2:	4630      	mov	r0, r6
}
 23fa7b4:	b002      	add	sp, #8
 23fa7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
 23fa7ba:	f004 bd20 	b.w	23ff1fe <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fa7be:	f1b8 0f00 	cmp.w	r8, #0
 23fa7c2:	d0e9      	beq.n	23fa798 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
 23fa7c4:	5d60      	ldrb	r0, [r4, r5]
 23fa7c6:	f7ff fe70 	bl	23fa4aa <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
 23fa7ca:	0603      	lsls	r3, r0, #24
 23fa7cc:	d415      	bmi.n	23fa7fa <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
 23fa7ce:	0100      	lsls	r0, r0, #4
 23fa7d0:	b2c7      	uxtb	r7, r0
 23fa7d2:	f108 38ff 	add.w	r8, r8, #4294967295
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23fa7d6:	2124      	movs	r1, #36	; 0x24
 23fa7d8:	4620      	mov	r0, r4
            uuid128_[len - 1] = hi << 4;
 23fa7da:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23fa7de:	f004 fd96 	bl	23ff30e <strnlen>
 23fa7e2:	3501      	adds	r5, #1
 23fa7e4:	42a8      	cmp	r0, r5
 23fa7e6:	d908      	bls.n	23fa7fa <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
 23fa7e8:	5d60      	ldrb	r0, [r4, r5]
 23fa7ea:	f7ff fe5e 	bl	23fa4aa <_ZN8particle11hexToNibbleEc>
 23fa7ee:	b240      	sxtb	r0, r0
                if (lo >= 0) {
 23fa7f0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
 23fa7f2:	bfa4      	itt	ge
 23fa7f4:	4338      	orrge	r0, r7
 23fa7f6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fa7fa:	3501      	adds	r5, #1
 23fa7fc:	e7d1      	b.n	23fa7a2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
 23fa7fe:	bf00      	nop
 23fa800:	023ff53e 	.word	0x023ff53e

023fa804 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
 23fa804:	b513      	push	{r0, r1, r4, lr}
 23fa806:	4604      	mov	r4, r0
 23fa808:	9101      	str	r1, [sp, #4]
        : BleUuid() {
 23fa80a:	f7ff ff21 	bl	23fa650 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
 23fa80e:	4620      	mov	r0, r4
 23fa810:	9901      	ldr	r1, [sp, #4]
 23fa812:	f7ff ff87 	bl	23fa724 <_ZN8particle7BleUuid9constructEPKc>
}
 23fa816:	4620      	mov	r0, r4
 23fa818:	b002      	add	sp, #8
 23fa81a:	bd10      	pop	{r4, pc}

023fa81c <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
 23fa81c:	b510      	push	{r4, lr}
 23fa81e:	f100 030f 	add.w	r3, r0, #15
 23fa822:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
 23fa824:	781c      	ldrb	r4, [r3, #0]
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fa826:	4283      	cmp	r3, r0
        buf[i] = uuid128_[j];
 23fa828:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fa82c:	f103 33ff 	add.w	r3, r3, #4294967295
 23fa830:	d1f8      	bne.n	23fa824 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
 23fa832:	bd10      	pop	{r4, pc}

023fa834 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
 23fa834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fa838:	461f      	mov	r7, r3
    if (!buf || len == 0) {
 23fa83a:	460d      	mov	r5, r1
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
 23fa83c:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
 23fa83e:	2900      	cmp	r1, #0
 23fa840:	d05b      	beq.n	23fa8fa <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
 23fa842:	b1da      	cbz	r2, 23fa87c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
 23fa844:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
 23fa848:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
 23fa84a:	f1b8 0f00 	cmp.w	r8, #0
 23fa84e:	d119      	bne.n	23fa884 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fa850:	8983      	ldrh	r3, [r0, #12]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fa852:	2102      	movs	r1, #2
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fa854:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fa856:	aa05      	add	r2, sp, #20
 23fa858:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fa85a:	f8ad 3004 	strh.w	r3, [sp, #4]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
 23fa85e:	f8cd 8014 	str.w	r8, [sp, #20]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fa862:	f7ff fde9 	bl	23fa438 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
 23fa866:	2c04      	cmp	r4, #4
 23fa868:	bf28      	it	cs
 23fa86a:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
 23fa86c:	4628      	mov	r0, r5
 23fa86e:	4622      	mov	r2, r4
 23fa870:	a905      	add	r1, sp, #20
 23fa872:	f004 fc9d 	bl	23ff1b0 <memcpy>
        buf[len++] = '\0';
 23fa876:	1c62      	adds	r2, r4, #1
 23fa878:	f805 8004 	strb.w	r8, [r5, r4]
}
 23fa87c:	4610      	mov	r0, r2
 23fa87e:	b00e      	add	sp, #56	; 0x38
 23fa880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
 23fa884:	a901      	add	r1, sp, #4
 23fa886:	f7ff ffc9 	bl	23fa81c <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
 23fa88a:	aa05      	add	r2, sp, #20
    if (stripped) {
 23fa88c:	b17f      	cbz	r7, 23fa8ae <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
 23fa88e:	2110      	movs	r1, #16
 23fa890:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fa892:	f7ff fdd1 	bl	23fa438 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
 23fa896:	2c24      	cmp	r4, #36	; 0x24
 23fa898:	bf28      	it	cs
 23fa89a:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
 23fa89c:	4628      	mov	r0, r5
 23fa89e:	4622      	mov	r2, r4
 23fa8a0:	a905      	add	r1, sp, #20
 23fa8a2:	f004 fc85 	bl	23ff1b0 <memcpy>
    buf[len++] = '\0';
 23fa8a6:	2300      	movs	r3, #0
 23fa8a8:	1c62      	adds	r2, r4, #1
 23fa8aa:	552b      	strb	r3, [r5, r4]
    return len;
 23fa8ac:	e7e6      	b.n	23fa87c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
 23fa8ae:	2104      	movs	r1, #4
        cStr[idx * 2] = '-';
 23fa8b0:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
 23fa8b2:	eb0d 0001 	add.w	r0, sp, r1
 23fa8b6:	f7ff fdbf 	bl	23fa438 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
 23fa8ba:	2102      	movs	r1, #2
 23fa8bc:	f10d 021d 	add.w	r2, sp, #29
 23fa8c0:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
 23fa8c2:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
 23fa8c6:	f7ff fdb7 	bl	23fa438 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
 23fa8ca:	2102      	movs	r1, #2
 23fa8cc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 23fa8d0:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
 23fa8d4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
 23fa8d8:	f7ff fdae 	bl	23fa438 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
 23fa8dc:	2102      	movs	r1, #2
 23fa8de:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 23fa8e2:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
 23fa8e4:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
 23fa8e8:	f7ff fda6 	bl	23fa438 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fa8ec:	2106      	movs	r1, #6
        cStr[idx * 2 + 3] = '-';
 23fa8ee:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fa8f2:	aa0b      	add	r2, sp, #44	; 0x2c
 23fa8f4:	f10d 000e 	add.w	r0, sp, #14
 23fa8f8:	e7cb      	b.n	23fa892 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
 23fa8fa:	460a      	mov	r2, r1
 23fa8fc:	e7be      	b.n	23fa87c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

023fa8fe <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
 23fa8fe:	b510      	push	{r4, lr}
 23fa900:	4604      	mov	r4, r0
 23fa902:	b08a      	sub	sp, #40	; 0x28
    toString(cStr, sizeof(cStr));
 23fa904:	2300      	movs	r3, #0
 23fa906:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
 23fa908:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
 23fa90a:	4669      	mov	r1, sp
 23fa90c:	f7ff ff92 	bl	23fa834 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
 23fa910:	4669      	mov	r1, sp
 23fa912:	4620      	mov	r0, r4
 23fa914:	f7ff fbe3 	bl	23fa0de <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fa918:	4620      	mov	r0, r4
 23fa91a:	b00a      	add	sp, #40	; 0x28
 23fa91c:	bd10      	pop	{r4, pc}

023fa91e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
 23fa91e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fa920:	4605      	mov	r5, r0
 23fa922:	4616      	mov	r6, r2
 23fa924:	461f      	mov	r7, r3
 23fa926:	460a      	mov	r2, r1
 23fa928:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fa92c:	ab01      	add	r3, sp, #4
 23fa92e:	f7ff fd03 	bl	23fa338 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
 23fa932:	f030 0402 	bics.w	r4, r0, #2
 23fa936:	d00c      	beq.n	23fa952 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
 23fa938:	1e84      	subs	r4, r0, #2
 23fa93a:	42bc      	cmp	r4, r7
 23fa93c:	bf28      	it	cs
 23fa93e:	463c      	movcs	r4, r7
            if (buf != nullptr) {
 23fa940:	b13e      	cbz	r6, 23fa952 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
 23fa942:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
 23fa944:	682b      	ldr	r3, [r5, #0]
 23fa946:	3102      	adds	r1, #2
 23fa948:	4622      	mov	r2, r4
 23fa94a:	4630      	mov	r0, r6
 23fa94c:	4419      	add	r1, r3
 23fa94e:	f004 fc2f 	bl	23ff1b0 <memcpy>
}
 23fa952:	4620      	mov	r0, r4
 23fa954:	b003      	add	sp, #12
 23fa956:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fa958 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fa958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa95a:	4613      	mov	r3, r2
 23fa95c:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fa95e:	9201      	str	r2, [sp, #4]
 23fa960:	460a      	mov	r2, r1
 23fa962:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fa964:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fa966:	f7ff ffda 	bl	23fa91e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
 23fa96a:	b940      	cbnz	r0, 23fa97e <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fa96c:	4622      	mov	r2, r4
 23fa96e:	2109      	movs	r1, #9
 23fa970:	4628      	mov	r0, r5
 23fa972:	9b01      	ldr	r3, [sp, #4]
}
 23fa974:	b003      	add	sp, #12
 23fa976:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fa97a:	f7ff bfd0 	b.w	23fa91e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
 23fa97e:	b003      	add	sp, #12
 23fa980:	bd30      	pop	{r4, r5, pc}
	...

023fa984 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
 23fa984:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa986:	460c      	mov	r4, r1
 23fa988:	b089      	sub	sp, #36	; 0x24
    String name;
 23fa98a:	490c      	ldr	r1, [pc, #48]	; (23fa9bc <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
 23fa98c:	4605      	mov	r5, r0
    String name;
 23fa98e:	f7ff fba6 	bl	23fa0de <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
 23fa992:	221f      	movs	r2, #31
 23fa994:	4669      	mov	r1, sp
 23fa996:	4620      	mov	r0, r4
 23fa998:	f7ff ffde 	bl	23fa958 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
 23fa99c:	4606      	mov	r6, r0
 23fa99e:	b150      	cbz	r0, 23fa9b6 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
 23fa9a0:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
 23fa9a2:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
 23fa9a4:	4628      	mov	r0, r5
 23fa9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fa9aa:	f7ff fc31 	bl	23fa210 <_ZN6String6concatEc>
 23fa9ae:	b110      	cbz	r0, 23fa9b6 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
 23fa9b0:	3701      	adds	r7, #1
 23fa9b2:	42be      	cmp	r6, r7
 23fa9b4:	d1f6      	bne.n	23fa9a4 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
 23fa9b6:	4628      	mov	r0, r5
 23fa9b8:	b009      	add	sp, #36	; 0x24
 23fa9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fa9bc:	023ffb49 	.word	0x023ffb49

023fa9c0 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
 23fa9c0:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
 23fa9c2:	2302      	movs	r3, #2
 23fa9c4:	2119      	movs	r1, #25
 23fa9c6:	aa01      	add	r2, sp, #4
 23fa9c8:	f7ff ffa9 	bl	23fa91e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
 23fa9cc:	b108      	cbz	r0, 23fa9d2 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
 23fa9ce:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 23fa9d2:	b003      	add	sp, #12
 23fa9d4:	f85d fb04 	ldr.w	pc, [sp], #4

023fa9d8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
 23fa9d8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
 23fa9da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fa9de:	2500      	movs	r5, #0
    BleCharacteristicImpl()
 23fa9e0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
 23fa9e2:	8043      	strh	r3, [r0, #2]
 23fa9e4:	220e      	movs	r2, #14
 23fa9e6:	4629      	mov	r1, r5
 23fa9e8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
 23fa9ea:	7105      	strb	r5, [r0, #4]
 23fa9ec:	3006      	adds	r0, #6
 23fa9ee:	f004 fc06 	bl	23ff1fe <memset>
 23fa9f2:	f104 0014 	add.w	r0, r4, #20
 23fa9f6:	f7ff fe2b 	bl	23fa650 <_ZN8particle7BleUuidC1Ev>
 23fa9fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fa9fe:	f7ff fe27 	bl	23fa650 <_ZN8particle7BleUuidC1Ev>
 23faa02:	4904      	ldr	r1, [pc, #16]	; (23faa14 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
 23faa04:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23faa08:	f7ff fb69 	bl	23fa0de <_ZN6StringC1EPK19__FlashStringHelper>
    }
 23faa0c:	4620      	mov	r0, r4
    _Function_base() : _M_manager(nullptr) { }
 23faa0e:	6565      	str	r5, [r4, #84]	; 0x54
 23faa10:	bd38      	pop	{r3, r4, r5, pc}
 23faa12:	bf00      	nop
 23faa14:	023ffb49 	.word	0x023ffb49

023faa18 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
 23faa18:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23faa1a:	680d      	ldr	r5, [r1, #0]
 23faa1c:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
 23faa1e:	4601      	mov	r1, r0
 23faa20:	f105 0028 	add.w	r0, r5, #40	; 0x28
 23faa24:	f7ff fe6f 	bl	23fa706 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
 23faa28:	b140      	cbz	r0, 23faa3c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
 23faa2a:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
 23faa2c:	8aa2      	ldrh	r2, [r4, #20]
 23faa2e:	429a      	cmp	r2, r3
 23faa30:	d805      	bhi.n	23faa3e <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
 23faa32:	8ae0      	ldrh	r0, [r4, #22]
 23faa34:	4298      	cmp	r0, r3
 23faa36:	bf34      	ite	cc
 23faa38:	2000      	movcc	r0, #0
 23faa3a:	2001      	movcs	r0, #1
    }
 23faa3c:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 23faa3e:	2000      	movs	r0, #0
 23faa40:	e7fc      	b.n	23faa3c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

023faa42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
 23faa42:	b510      	push	{r4, lr}
    return data_ + size_;
 23faa44:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 23faa48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
 23faa4c:	4293      	cmp	r3, r2
 23faa4e:	4618      	mov	r0, r3
 23faa50:	d005      	beq.n	23faa5e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
            if (peer.impl()->connHandle() == connHandle) {
 23faa52:	6804      	ldr	r4, [r0, #0]
 23faa54:	3308      	adds	r3, #8
 23faa56:	8824      	ldrh	r4, [r4, #0]
 23faa58:	428c      	cmp	r4, r1
 23faa5a:	d1f7      	bne.n	23faa4c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
 23faa5c:	bd10      	pop	{r4, pc}
        return nullptr;
 23faa5e:	2000      	movs	r0, #0
 23faa60:	e7fc      	b.n	23faa5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1a>
	...

023faa64 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23faa64:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
 23faa66:	b570      	push	{r4, r5, r6, lr}
 23faa68:	6003      	str	r3, [r0, #0]
 23faa6a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23faa6c:	2068      	movs	r0, #104	; 0x68
 23faa6e:	f7fe f82e 	bl	23f8ace <_Znwj>
	  auto __pi = ::new (__mem)
 23faa72:	1e04      	subs	r4, r0, #0
 23faa74:	f104 060c 	add.w	r6, r4, #12
 23faa78:	d007      	beq.n	23faa8a <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
 23faa7a:	2301      	movs	r3, #1
 23faa7c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
 23faa80:	4b04      	ldr	r3, [pc, #16]	; (23faa94 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23faa82:	4630      	mov	r0, r6
 23faa84:	6023      	str	r3, [r4, #0]
 23faa86:	f7ff ffa7 	bl	23fa9d8 <_ZN8particle21BleCharacteristicImplC1Ev>
}
 23faa8a:	4628      	mov	r0, r5
	  __p = __pi->_M_ptr();
 23faa8c:	e9c5 6400 	strd	r6, r4, [r5]
 23faa90:	bd70      	pop	{r4, r5, r6, pc}
 23faa92:	bf00      	nop
 23faa94:	023ffa80 	.word	0x023ffa80

023faa98 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
 23faa98:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
 23faa9a:	4605      	mov	r5, r0
BleUuid BleCharacteristic::UUID() const {
 23faa9c:	4606      	mov	r6, r0
    return impl()->charUUID();
 23faa9e:	680c      	ldr	r4, [r1, #0]
 23faaa0:	3414      	adds	r4, #20
 23faaa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23faaa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23faaa6:	6823      	ldr	r3, [r4, #0]
}
 23faaa8:	4630      	mov	r0, r6
    return impl()->charUUID();
 23faaaa:	602b      	str	r3, [r5, #0]
}
 23faaac:	bd70      	pop	{r4, r5, r6, pc}
	...

023faab0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23faab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23faab2:	4606      	mov	r6, r0
 23faab4:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
 23faab6:	460d      	mov	r5, r1
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23faab8:	b085      	sub	sp, #20
    if (buf == nullptr || len == 0) {
 23faaba:	2900      	cmp	r1, #0
 23faabc:	d050      	beq.n	23fab60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
 23faabe:	2a00      	cmp	r2, #0
 23faac0:	d04e      	beq.n	23fab60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
 23faac2:	6804      	ldr	r4, [r0, #0]
 23faac4:	2af4      	cmp	r2, #244	; 0xf4
    if (impl()->isLocal()) {
 23faac6:	7823      	ldrb	r3, [r4, #0]
 23faac8:	bf28      	it	cs
 23faaca:	22f4      	movcs	r2, #244	; 0xf4
 23faacc:	b343      	cbz	r3, 23fab20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
 23faace:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
 23faad0:	0798      	lsls	r0, r3, #30
 23faad2:	d509      	bpl.n	23faae8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
 23faad4:	2300      	movs	r3, #0
 23faad6:	89a0      	ldrh	r0, [r4, #12]
 23faad8:	9203      	str	r2, [sp, #12]
 23faada:	f7fe fdbf 	bl	23f965c <hal_ble_gatt_server_set_characteristic_value>
 23faade:	2800      	cmp	r0, #0
 23faae0:	9a03      	ldr	r2, [sp, #12]
 23faae2:	da03      	bge.n	23faaec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
 23faae4:	b005      	add	sp, #20
 23faae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
 23faae8:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23faaec:	6834      	ldr	r4, [r6, #0]
 23faaee:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
 23faaf0:	06d9      	lsls	r1, r3, #27
 23faaf2:	d509      	bpl.n	23fab08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
 23faaf4:	2f01      	cmp	r7, #1
 23faaf6:	d007      	beq.n	23fab08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23faaf8:	2300      	movs	r3, #0
 23faafa:	4629      	mov	r1, r5
 23faafc:	89a0      	ldrh	r0, [r4, #12]
}
 23faafe:	b005      	add	sp, #20
 23fab00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fab04:	f7fe be28 	b.w	23f9758 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
 23fab08:	069b      	lsls	r3, r3, #26
 23fab0a:	d5eb      	bpl.n	23faae4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23fab0c:	2f02      	cmp	r7, #2
 23fab0e:	d0e9      	beq.n	23faae4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fab10:	2300      	movs	r3, #0
 23fab12:	4629      	mov	r1, r5
 23fab14:	89a0      	ldrh	r0, [r4, #12]
}
 23fab16:	b005      	add	sp, #20
 23fab18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fab1c:	f7fe be2a 	b.w	23f9774 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
 23fab20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fab24:	8860      	ldrh	r0, [r4, #2]
 23fab26:	4288      	cmp	r0, r1
 23fab28:	d01c      	beq.n	23fab64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
 23fab2a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
 23fab2c:	074e      	lsls	r6, r1, #29
 23fab2e:	d501      	bpl.n	23fab34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
 23fab30:	2f01      	cmp	r7, #1
 23fab32:	d104      	bne.n	23fab3e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23fab34:	070b      	lsls	r3, r1, #28
 23fab36:	d409      	bmi.n	23fab4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
 23fab38:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fab3c:	e7d2      	b.n	23faae4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23fab3e:	89a1      	ldrh	r1, [r4, #12]
 23fab40:	9300      	str	r3, [sp, #0]
 23fab42:	4613      	mov	r3, r2
 23fab44:	462a      	mov	r2, r5
 23fab46:	f7fe fdc1 	bl	23f96cc <hal_ble_gatt_client_write_without_response>
 23fab4a:	e7cb      	b.n	23faae4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23fab4c:	2f02      	cmp	r7, #2
 23fab4e:	d0f3      	beq.n	23fab38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23fab50:	2300      	movs	r3, #0
 23fab52:	89a1      	ldrh	r1, [r4, #12]
 23fab54:	9300      	str	r3, [sp, #0]
 23fab56:	4613      	mov	r3, r2
 23fab58:	462a      	mov	r2, r5
 23fab5a:	f7fe fda9 	bl	23f96b0 <hal_ble_gatt_client_write_with_response>
 23fab5e:	e7c1      	b.n	23faae4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
 23fab60:	4802      	ldr	r0, [pc, #8]	; (23fab6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
 23fab62:	e7bf      	b.n	23faae4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
 23fab64:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fab68:	e7bc      	b.n	23faae4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23fab6a:	bf00      	nop
 23fab6c:	fffffef2 	.word	0xfffffef2

023fab70 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
 23fab70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fab72:	460c      	mov	r4, r1
 23fab74:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
 23fab76:	21f4      	movs	r1, #244	; 0xf4
 23fab78:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
 23fab7a:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
 23fab7c:	f004 fbc7 	bl	23ff30e <strnlen>
 23fab80:	4621      	mov	r1, r4
 23fab82:	4602      	mov	r2, r0
 23fab84:	4628      	mov	r0, r5
 23fab86:	9b01      	ldr	r3, [sp, #4]
}
 23fab88:	b003      	add	sp, #12
 23fab8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
 23fab8e:	f7ff bf8f 	b.w	23faab0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

023fab94 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
 23fab94:	b510      	push	{r4, lr}
 23fab96:	6803      	ldr	r3, [r0, #0]
 23fab98:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
 23fab9a:	781a      	ldrb	r2, [r3, #0]
 23fab9c:	bb52      	cbnz	r2, 23fabf4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
 23fab9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23faba2:	885c      	ldrh	r4, [r3, #2]
 23faba4:	4284      	cmp	r4, r0
 23faba6:	d025      	beq.n	23fabf4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
 23faba8:	8a18      	ldrh	r0, [r3, #16]
 23fabaa:	b330      	cbz	r0, 23fabfa <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
 23fabac:	e9cd 2203 	strd	r2, r2, [sp, #12]
 23fabb0:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
 23fabb2:	4a13      	ldr	r2, [pc, #76]	; (23fac00 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
 23fabb4:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
 23fabb6:	4a13      	ldr	r2, [pc, #76]	; (23fac04 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
 23fabb8:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
 23fabbc:	885a      	ldrh	r2, [r3, #2]
 23fabbe:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
 23fabc2:	8a1a      	ldrh	r2, [r3, #16]
 23fabc4:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
 23fabc8:	899a      	ldrh	r2, [r3, #12]
 23fabca:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
 23fabce:	b159      	cbz	r1, 23fabe8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
 23fabd0:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
 23fabd2:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
 23fabd4:	bf44      	itt	mi
 23fabd6:	2202      	movmi	r2, #2
 23fabd8:	9205      	strmi	r2, [sp, #20]
 23fabda:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
 23fabdc:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
 23fabde:	bf42      	ittt	mi
 23fabe0:	9b05      	ldrmi	r3, [sp, #20]
 23fabe2:	f043 0301 	orrmi.w	r3, r3, #1
 23fabe6:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
 23fabe8:	2100      	movs	r1, #0
 23fabea:	4668      	mov	r0, sp
 23fabec:	f7fe fda6 	bl	23f973c <hal_ble_gatt_client_configure_cccd>
}
 23fabf0:	b006      	add	sp, #24
 23fabf2:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
 23fabf4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fabf8:	e7fa      	b.n	23fabf0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
 23fabfa:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fabfe:	e7f7      	b.n	23fabf0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
 23fac00:	00180003 	.word	0x00180003
 23fac04:	023fadd9 	.word	0x023fadd9

023fac08 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
 23fac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fac0a:	2600      	movs	r6, #0
 23fac0c:	4605      	mov	r5, r0
 23fac0e:	6006      	str	r6, [r0, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fac10:	2028      	movs	r0, #40	; 0x28
 23fac12:	f7fd ff5c 	bl	23f8ace <_Znwj>
	  auto __pi = ::new (__mem)
 23fac16:	1e04      	subs	r4, r0, #0
 23fac18:	f104 070c 	add.w	r7, r4, #12
 23fac1c:	d00a      	beq.n	23fac34 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
 23fac1e:	2301      	movs	r3, #1
 23fac20:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
 23fac24:	4b05      	ldr	r3, [pc, #20]	; (23fac3c <_ZN8particle10BleServiceC1Ev+0x34>)
              characteristicsDiscovered_(false) {
 23fac26:	4638      	mov	r0, r7
 23fac28:	6023      	str	r3, [r4, #0]
 23fac2a:	f7ff fd11 	bl	23fa650 <_ZN8particle7BleUuidC1Ev>
 23fac2e:	6226      	str	r6, [r4, #32]
 23fac30:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
}
 23fac34:	4628      	mov	r0, r5
	  __p = __pi->_M_ptr();
 23fac36:	e9c5 7400 	strd	r7, r4, [r5]
 23fac3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fac3c:	023ffa9c 	.word	0x023ffa9c

023fac40 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
 23fac40:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fac42:	2500      	movs	r5, #0
 23fac44:	4606      	mov	r6, r0
 23fac46:	6005      	str	r5, [r0, #0]
 23fac48:	2030      	movs	r0, #48	; 0x30
 23fac4a:	f7fd ff40 	bl	23f8ace <_Znwj>
	  auto __pi = ::new (__mem)
 23fac4e:	4604      	mov	r4, r0
 23fac50:	b198      	cbz	r0, 23fac7a <_ZN8particle13BlePeerDeviceC1Ev+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fac52:	2301      	movs	r3, #1
 23fac54:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fac58:	4b0a      	ldr	r3, [pc, #40]	; (23fac84 <_ZN8particle13BlePeerDeviceC1Ev+0x44>)
              servicesDiscovered_(false) {
 23fac5a:	300e      	adds	r0, #14
 23fac5c:	f840 3c0e 	str.w	r3, [r0, #-14]
 23fac60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fac64:	f820 3c02 	strh.w	r3, [r0, #-2]
 23fac68:	f7ff fce8 	bl	23fa63c <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
 23fac6c:	e9c4 5506 	strd	r5, r5, [r4, #24]
 23fac70:	e9c4 5508 	strd	r5, r5, [r4, #32]
 23fac74:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 23fac78:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
 23fac7a:	6074      	str	r4, [r6, #4]
 23fac7c:	340c      	adds	r4, #12
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fac7e:	4630      	mov	r0, r6
	  __p = __pi->_M_ptr();
 23fac80:	6034      	str	r4, [r6, #0]
 23fac82:	bd70      	pop	{r4, r5, r6, pc}
 23fac84:	023ffab8 	.word	0x023ffab8

023fac88 <_ZNK8particle13BlePeerDevice9connectedEv>:
}

bool BlePeerDevice::connected() const {
    // FIXME: do not use a single wiring lock for all BLE wiring operations
    // WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
 23fac88:	6803      	ldr	r3, [r0, #0]
 23fac8a:	8818      	ldrh	r0, [r3, #0]
}
 23fac8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fac90:	1ac0      	subs	r0, r0, r3
 23fac92:	bf18      	it	ne
 23fac94:	2001      	movne	r0, #1
 23fac96:	4770      	bx	lr

023fac98 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
 23fac98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fac9a:	460c      	mov	r4, r1
 23fac9c:	4605      	mov	r5, r0
    WiringBleLock lk;
 23fac9e:	a801      	add	r0, sp, #4
 23faca0:	f7ff fc18 	bl	23fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
 23faca4:	6823      	ldr	r3, [r4, #0]
      { return _M_ptr; }
 23faca6:	682a      	ldr	r2, [r5, #0]
    WiringBleLock lk;
 23faca8:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23facaa:	f8c2 3002 	str.w	r3, [r2, #2]
 23facae:	6863      	ldr	r3, [r4, #4]
 23facb0:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
 23facb4:	f7ff fc1c 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
 23facb8:	b003      	add	sp, #12
 23facba:	bd30      	pop	{r4, r5, pc}

023facbc <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
 23facbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23facbe:	460d      	mov	r5, r1
 23facc0:	4604      	mov	r4, r0
    WiringBleLock lk;
 23facc2:	a801      	add	r0, sp, #4
 23facc4:	f7ff fc06 	bl	23fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>
 23facc8:	682a      	ldr	r2, [r5, #0]
 23facca:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23faccc:	f8d2 3002 	ldr.w	r3, [r2, #2]
 23facd0:	6023      	str	r3, [r4, #0]
 23facd2:	f8d2 3006 	ldr.w	r3, [r2, #6]
 23facd6:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
 23facd8:	f7ff fc0a 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
 23facdc:	4620      	mov	r0, r4
 23facde:	b003      	add	sp, #12
 23face0:	bd30      	pop	{r4, r5, pc}

023face2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
 23face2:	b530      	push	{r4, r5, lr}
 23face4:	4605      	mov	r5, r0
 23face6:	460c      	mov	r4, r1
 23face8:	b087      	sub	sp, #28
    WiringBleLock lk;
 23facea:	a801      	add	r0, sp, #4
 23facec:	f7ff fbf2 	bl	23fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
 23facf0:	682a      	ldr	r2, [r5, #0]
 23facf2:	6823      	ldr	r3, [r4, #0]
 23facf4:	8812      	ldrh	r2, [r2, #0]
 23facf6:	881b      	ldrh	r3, [r3, #0]
 23facf8:	429a      	cmp	r2, r3
 23facfa:	d10d      	bne.n	23fad18 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
 23facfc:	4629      	mov	r1, r5
 23facfe:	a802      	add	r0, sp, #8
 23fad00:	f7ff ffdc 	bl	23facbc <_ZNK8particle13BlePeerDevice7addressEv>
 23fad04:	4621      	mov	r1, r4
 23fad06:	a804      	add	r0, sp, #16
 23fad08:	f7ff ffd8 	bl	23facbc <_ZNK8particle13BlePeerDevice7addressEv>
 23fad0c:	a904      	add	r1, sp, #16
 23fad0e:	a802      	add	r0, sp, #8
 23fad10:	f7ff fc07 	bl	23fa522 <_ZNK8particle10BleAddresseqERKS0_>
 23fad14:	4604      	mov	r4, r0
 23fad16:	b900      	cbnz	r0, 23fad1a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
 23fad18:	2400      	movs	r4, #0
    WiringBleLock lk;
 23fad1a:	a801      	add	r0, sp, #4
 23fad1c:	f7ff fbe8 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fad20:	4620      	mov	r0, r4
 23fad22:	b007      	add	sp, #28
 23fad24:	bd30      	pop	{r4, r5, pc}
	...

023fad28 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
 23fad28:	b570      	push	{r4, r5, r6, lr}
 23fad2a:	4606      	mov	r6, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 23fad2c:	2074      	movs	r0, #116	; 0x74
 23fad2e:	f7fd fece 	bl	23f8ace <_Znwj>
 23fad32:	4604      	mov	r4, r0
 23fad34:	b1a0      	cbz	r0, 23fad60 <_ZN8particle14BleLocalDeviceC1Ev+0x38>
 23fad36:	2500      	movs	r5, #0
 23fad38:	e9c0 5500 	strd	r5, r5, [r0]
 23fad3c:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fad40:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fad44:	e9c0 5506 	strd	r5, r5, [r0, #24]
 23fad48:	6205      	str	r5, [r0, #32]
              pairingEventCallback_(nullptr) {
 23fad4a:	3024      	adds	r0, #36	; 0x24
 23fad4c:	f7ff ff78 	bl	23fac40 <_ZN8particle13BlePeerDeviceC1Ev>
 23fad50:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fad54:	f7ff ff74 	bl	23fac40 <_ZN8particle13BlePeerDeviceC1Ev>
 23fad58:	63e5      	str	r5, [r4, #60]	; 0x3c
 23fad5a:	64e5      	str	r5, [r4, #76]	; 0x4c
 23fad5c:	65e5      	str	r5, [r4, #92]	; 0x5c
 23fad5e:	66e5      	str	r5, [r4, #108]	; 0x6c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23fad60:	6034      	str	r4, [r6, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
 23fad62:	b924      	cbnz	r4, 23fad6e <_ZN8particle14BleLocalDeviceC1Ev+0x46>
        SPARK_ASSERT(false);
 23fad64:	200a      	movs	r0, #10
 23fad66:	4a0a      	ldr	r2, [pc, #40]	; (23fad90 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fad68:	490a      	ldr	r1, [pc, #40]	; (23fad94 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>)
 23fad6a:	f7fe fed1 	bl	23f9b10 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
 23fad6e:	2000      	movs	r0, #0
 23fad70:	f7fe fc3c 	bl	23f95ec <hal_ble_stack_init>
 23fad74:	b120      	cbz	r0, 23fad80 <_ZN8particle14BleLocalDeviceC1Ev+0x58>
 23fad76:	200a      	movs	r0, #10
 23fad78:	4a05      	ldr	r2, [pc, #20]	; (23fad90 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fad7a:	4907      	ldr	r1, [pc, #28]	; (23fad98 <_ZN8particle14BleLocalDeviceC1Ev+0x70>)
 23fad7c:	f7fe fec8 	bl	23f9b10 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
 23fad80:	2200      	movs	r2, #0
 23fad82:	6831      	ldr	r1, [r6, #0]
 23fad84:	4805      	ldr	r0, [pc, #20]	; (23fad9c <_ZN8particle14BleLocalDeviceC1Ev+0x74>)
 23fad86:	f7fe fccb 	bl	23f9720 <hal_ble_set_callback_on_periph_link_events>
}
 23fad8a:	4630      	mov	r0, r6
 23fad8c:	bd70      	pop	{r4, r5, r6, pc}
 23fad8e:	bf00      	nop
 23fad90:	023f95b5 	.word	0x023f95b5
 23fad94:	023ff878 	.word	0x023ff878
 23fad98:	023ff8bd 	.word	0x023ff8bd
 23fad9c:	023fbb79 	.word	0x023fbb79

023fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
 23fada0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
 23fada2:	4c0a      	ldr	r4, [pc, #40]	; (23fadcc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
 23fada4:	e8d4 3f8f 	ldab	r3, [r4]
 23fada8:	07db      	lsls	r3, r3, #31
 23fadaa:	d40c      	bmi.n	23fadc6 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fadac:	4620      	mov	r0, r4
 23fadae:	f7fd fea1 	bl	23f8af4 <__cxa_guard_acquire>
 23fadb2:	b140      	cbz	r0, 23fadc6 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fadb4:	4806      	ldr	r0, [pc, #24]	; (23fadd0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fadb6:	f7ff ffb7 	bl	23fad28 <_ZN8particle14BleLocalDeviceC1Ev>
 23fadba:	4620      	mov	r0, r4
 23fadbc:	f7fd fe9f 	bl	23f8afe <__cxa_guard_release>
 23fadc0:	4804      	ldr	r0, [pc, #16]	; (23fadd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
 23fadc2:	f004 f9d7 	bl	23ff174 <atexit>
    return instance;
}
 23fadc6:	4802      	ldr	r0, [pc, #8]	; (23fadd0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fadc8:	bd10      	pop	{r4, pc}
 23fadca:	bf00      	nop
 23fadcc:	1007ae5c 	.word	0x1007ae5c
 23fadd0:	1007ae64 	.word	0x1007ae64
 23fadd4:	023fb0d5 	.word	0x023fb0d5

023fadd8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fadd8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
 23fadda:	6803      	ldr	r3, [r0, #0]
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23faddc:	4604      	mov	r4, r0
    switch (event->type) {
 23fadde:	3b09      	subs	r3, #9
 23fade0:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fade2:	460d      	mov	r5, r1
 23fade4:	b08d      	sub	sp, #52	; 0x34
    switch (event->type) {
 23fade6:	d811      	bhi.n	23fae0c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
 23fade8:	f7ff ffda 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fadec:	88a1      	ldrh	r1, [r4, #4]
 23fadee:	6800      	ldr	r0, [r0, #0]
 23fadf0:	f7ff fe27 	bl	23faa42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
 23fadf4:	4603      	mov	r3, r0
 23fadf6:	b958      	cbnz	r0, 23fae10 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
 23fadf8:	2220      	movs	r2, #32
 23fadfa:	e9cd 2004 	strd	r2, r0, [sp, #16]
 23fadfe:	4a0b      	ldr	r2, [pc, #44]	; (23fae2c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
 23fae00:	2032      	movs	r0, #50	; 0x32
 23fae02:	9200      	str	r2, [sp, #0]
 23fae04:	490a      	ldr	r1, [pc, #40]	; (23fae30 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
 23fae06:	aa04      	add	r2, sp, #16
 23fae08:	f7fe fe90 	bl	23f9b2c <log_message>
}
 23fae0c:	b00d      	add	sp, #52	; 0x34
 23fae0e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
 23fae10:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 23fae12:	2a00      	cmp	r2, #0
 23fae14:	d0fa      	beq.n	23fae0c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
 23fae16:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fae1a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 23fae1e:	e9cd 1203 	strd	r1, r2, [sp, #12]
 23fae22:	6dac      	ldr	r4, [r5, #88]	; 0x58
 23fae24:	aa04      	add	r2, sp, #16
 23fae26:	a903      	add	r1, sp, #12
 23fae28:	47a0      	blx	r4
}
 23fae2a:	e7ef      	b.n	23fae0c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
 23fae2c:	023ff8ff 	.word	0x023ff8ff
 23fae30:	023ff88f 	.word	0x023ff88f

023fae34 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
 23fae34:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
 23fae36:	2000      	movs	r0, #0
 23fae38:	f7fe fbd8 	bl	23f95ec <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
 23fae3c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fae40:	bd08      	pop	{r3, pc}
	...

023fae44 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
 23fae44:	b570      	push	{r4, r5, r6, lr}
 23fae46:	4604      	mov	r4, r0
 23fae48:	460e      	mov	r6, r1
 23fae4a:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
 23fae4c:	3018      	adds	r0, #24
 23fae4e:	f7ff fabf 	bl	23fa3d0 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
 23fae52:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fae56:	f7ff fac6 	bl	23fa3e6 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
 23fae5a:	2200      	movs	r2, #0
 23fae5c:	4621      	mov	r1, r4
        targetCount_ = resultCount;
 23fae5e:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
 23fae62:	4803      	ldr	r0, [pc, #12]	; (23fae70 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
 23fae64:	f7fe fbd0 	bl	23f9608 <hal_ble_gap_start_scan>
 23fae68:	2800      	cmp	r0, #0
        return foundCount_;
 23fae6a:	bfa8      	it	ge
 23fae6c:	6960      	ldrge	r0, [r4, #20]
    }
 23fae6e:	bd70      	pop	{r4, r5, r6, pc}
 23fae70:	023fc865 	.word	0x023fc865

023fae74 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
 23fae74:	b510      	push	{r4, lr}
 23fae76:	4604      	mov	r4, r0
    ::free(ptr);
 23fae78:	6940      	ldr	r0, [r0, #20]
 23fae7a:	f7ff f809 	bl	23f9e90 <free>
 23fae7e:	68a0      	ldr	r0, [r4, #8]
 23fae80:	f7ff f806 	bl	23f9e90 <free>
 23fae84:	4620      	mov	r0, r4
 23fae86:	bd10      	pop	{r4, pc}

023fae88 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
 23fae88:	2200      	movs	r2, #0
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0),
              allowDuplicates_(false) {
 23fae8a:	f647 717f 	movw	r1, #32639	; 0x7f7f
 23fae8e:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
 23fae92:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fae96:	e9c0 2204 	strd	r2, r2, [r0, #16]
 23fae9a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 23fae9e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 23faea2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 23faea6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 23faeaa:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 23faeae:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 23faeb2:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
 23faeb6:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
    _Function_base() : _M_manager(nullptr) { }
 23faeba:	6202      	str	r2, [r0, #32]
 23faebc:	6302      	str	r2, [r0, #48]	; 0x30
 23faebe:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
 23faec2:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
 23faec6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    }
 23faeca:	4770      	bx	lr

023faecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23faecc:	b570      	push	{r4, r5, r6, lr}
 23faece:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23faed0:	e9d0 5300 	ldrd	r5, r3, [r0]
 23faed4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23faed8:	42ae      	cmp	r6, r5
 23faeda:	d004      	beq.n	23faee6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23faedc:	4628      	mov	r0, r5
 23faede:	f7ff f8b3 	bl	23fa048 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23faee2:	3510      	adds	r5, #16
 23faee4:	e7f8      	b.n	23faed8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23faee6:	6820      	ldr	r0, [r4, #0]
 23faee8:	f7fe ffd2 	bl	23f9e90 <free>
}
 23faeec:	4620      	mov	r0, r4
 23faeee:	bd70      	pop	{r4, r5, r6, pc}

023faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23faef0:	b510      	push	{r4, lr}
 23faef2:	4604      	mov	r4, r0
    ::free(ptr);
 23faef4:	6800      	ldr	r0, [r0, #0]
 23faef6:	f7fe ffcb 	bl	23f9e90 <free>
}
 23faefa:	4620      	mov	r0, r4
 23faefc:	bd10      	pop	{r4, pc}

023faefe <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
 23faefe:	b570      	push	{r4, r5, r6, lr}
 23faf00:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23faf02:	2624      	movs	r6, #36	; 0x24
    ::free(ptr);
 23faf04:	6f80      	ldr	r0, [r0, #120]	; 0x78
 23faf06:	f7fe ffc3 	bl	23f9e90 <free>
 23faf0a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 23faf0c:	f7fe ffc0 	bl	23f9e90 <free>
 23faf10:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23faf12:	f7fe ffbd 	bl	23f9e90 <free>
    }
    ~BleScanFilter() = default;
 23faf16:	f104 0538 	add.w	r5, r4, #56	; 0x38
 23faf1a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23faf1e:	f7ff ffe7 	bl	23faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
 23faf22:	4628      	mov	r0, r5
 23faf24:	f7ff ffd2 	bl	23faecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
 23faf28:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23faf2c:	f7ff f871 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
 23faf30:	f104 0018 	add.w	r0, r4, #24
 23faf34:	f7ff f86d 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
 23faf38:	e9d4 5300 	ldrd	r5, r3, [r4]
 23faf3c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23faf40:	42ae      	cmp	r6, r5
 23faf42:	d004      	beq.n	23faf4e <_ZN8particle16BleScanDelegatorD1Ev+0x50>
            p->~T();
 23faf44:	4628      	mov	r0, r5
 23faf46:	f7ff ff95 	bl	23fae74 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
 23faf4a:	3524      	adds	r5, #36	; 0x24
 23faf4c:	e7f8      	b.n	23faf40 <_ZN8particle16BleScanDelegatorD1Ev+0x42>
    ::free(ptr);
 23faf4e:	6820      	ldr	r0, [r4, #0]
 23faf50:	f7fe ff9e 	bl	23f9e90 <free>
 23faf54:	4620      	mov	r0, r4
 23faf56:	bd70      	pop	{r4, r5, r6, pc}

023faf58 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleOnScanResultCallbackRef callback, void* context) const {
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
 23faf58:	b530      	push	{r4, r5, lr}
 23faf5a:	4615      	mov	r5, r2
    if (results == nullptr || resultCount == 0) {
 23faf5c:	460c      	mov	r4, r1
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
 23faf5e:	b0a3      	sub	sp, #140	; 0x8c
    if (results == nullptr || resultCount == 0) {
 23faf60:	b179      	cbz	r1, 23faf82 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
 23faf62:	b172      	cbz	r2, 23faf82 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
 23faf64:	a801      	add	r0, sp, #4
 23faf66:	f7ff ff8f 	bl	23fae88 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
 23faf6a:	4621      	mov	r1, r4
 23faf6c:	462a      	mov	r2, r5
 23faf6e:	a801      	add	r0, sp, #4
 23faf70:	f7ff ff68 	bl	23fae44 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
 23faf74:	4604      	mov	r4, r0
    BleScanDelegator scanner;
 23faf76:	a801      	add	r0, sp, #4
 23faf78:	f7ff ffc1 	bl	23faefe <_ZN8particle16BleScanDelegatorD1Ev>
}
 23faf7c:	4620      	mov	r0, r4
 23faf7e:	b023      	add	sp, #140	; 0x8c
 23faf80:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
 23faf82:	4c01      	ldr	r4, [pc, #4]	; (23faf88 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
 23faf84:	e7fa      	b.n	23faf7c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
 23faf86:	bf00      	nop
 23faf88:	fffffef2 	.word	0xfffffef2

023faf8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23faf8c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
 23faf8e:	1e14      	subs	r4, r2, #0
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23faf90:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
 23faf92:	6843      	ldr	r3, [r0, #4]
 23faf94:	db02      	blt.n	23faf9c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
 23faf96:	1862      	adds	r2, r4, r1
 23faf98:	429a      	cmp	r2, r3
 23faf9a:	dd00      	ble.n	23faf9e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
 23faf9c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
 23faf9e:	682a      	ldr	r2, [r5, #0]
 23fafa0:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
 23fafa2:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
 23fafa4:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fafa6:	1a52      	subs	r2, r2, r1
 23fafa8:	f004 f90f 	bl	23ff1ca <memmove>
    size_ -= n;
 23fafac:	686a      	ldr	r2, [r5, #4]
 23fafae:	1b12      	subs	r2, r2, r4
 23fafb0:	606a      	str	r2, [r5, #4]
}
 23fafb2:	bd38      	pop	{r3, r4, r5, pc}

023fafb4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
 23fafb4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fafb6:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
 23fafb8:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 23fafba:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fafbc:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
 23fafbe:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fafc0:	f7fd fd85 	bl	23f8ace <_Znwj>
 23fafc4:	b118      	cbz	r0, 23fafce <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 23fafc6:	682b      	ldr	r3, [r5, #0]
 23fafc8:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fafca:	686b      	ldr	r3, [r5, #4]
 23fafcc:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
 23fafce:	4b03      	ldr	r3, [pc, #12]	; (23fafdc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fafd0:	6020      	str	r0, [r4, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fafd2:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fafd4:	4b02      	ldr	r3, [pc, #8]	; (23fafe0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
      }
 23fafd6:	4620      	mov	r0, r4
	    _M_manager = &_My_handler::_M_manager;
 23fafd8:	60a3      	str	r3, [r4, #8]
      }
 23fafda:	bd38      	pop	{r3, r4, r5, pc}
 23fafdc:	023fa379 	.word	0x023fa379
 23fafe0:	023fa391 	.word	0x023fa391

023fafe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 23fafe4:	680b      	ldr	r3, [r1, #0]
 23fafe6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 23fafe8:	b113      	cbz	r3, 23faff0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 23fafea:	685a      	ldr	r2, [r3, #4]
 23fafec:	3201      	adds	r2, #1
 23fafee:	605a      	str	r2, [r3, #4]
      }
 23faff0:	4770      	bx	lr

023faff2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
 23faff2:	b510      	push	{r4, lr}
 23faff4:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23faff6:	f851 3b04 	ldr.w	r3, [r1], #4
 23faffa:	f840 3b04 	str.w	r3, [r0], #4
 23faffe:	f7ff fff1 	bl	23fafe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
 23fb002:	6823      	ldr	r3, [r4, #0]
 23fb004:	b90b      	cbnz	r3, 23fb00a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
 23fb006:	f7ff f9ad 	bl	23fa364 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
 23fb00a:	4620      	mov	r0, r4
 23fb00c:	bd10      	pop	{r4, pc}

023fb00e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fb00e:	b510      	push	{r4, lr}
 23fb010:	4604      	mov	r4, r0
 23fb012:	f851 3b04 	ldr.w	r3, [r1], #4
 23fb016:	f840 3b04 	str.w	r3, [r0], #4
 23fb01a:	f7ff ffe3 	bl	23fafe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fb01e:	4620      	mov	r0, r4
 23fb020:	bd10      	pop	{r4, pc}

023fb022 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fb022:	b510      	push	{r4, lr}
 23fb024:	4604      	mov	r4, r0
 23fb026:	f851 3b04 	ldr.w	r3, [r1], #4
 23fb02a:	f840 3b04 	str.w	r3, [r0], #4
 23fb02e:	f7ff ffd9 	bl	23fafe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fb032:	4620      	mov	r0, r4
 23fb034:	bd10      	pop	{r4, pc}

023fb036 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
 23fb036:	b510      	push	{r4, lr}
 23fb038:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fb03a:	3004      	adds	r0, #4
 23fb03c:	f7fe f82a 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb040:	4620      	mov	r0, r4
 23fb042:	bd10      	pop	{r4, pc}

023fb044 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
 23fb044:	b510      	push	{r4, lr}
 23fb046:	4604      	mov	r4, r0
 23fb048:	3004      	adds	r0, #4
 23fb04a:	f7fe f823 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb04e:	4620      	mov	r0, r4
 23fb050:	bd10      	pop	{r4, pc}

023fb052 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb052:	b570      	push	{r4, r5, r6, lr}
 23fb054:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb056:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fb05a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fb05e:	42ae      	cmp	r6, r5
 23fb060:	d004      	beq.n	23fb06c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
 23fb062:	1d28      	adds	r0, r5, #4
 23fb064:	f7fe f816 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb068:	3508      	adds	r5, #8
 23fb06a:	e7f8      	b.n	23fb05e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fb06c:	6820      	ldr	r0, [r4, #0]
 23fb06e:	f7fe ff0f 	bl	23f9e90 <free>
}
 23fb072:	4620      	mov	r0, r4
 23fb074:	bd70      	pop	{r4, r5, r6, pc}

023fb076 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb076:	b570      	push	{r4, r5, r6, lr}
 23fb078:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb07a:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fb07e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fb082:	42ae      	cmp	r6, r5
 23fb084:	d004      	beq.n	23fb090 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
 23fb086:	1d28      	adds	r0, r5, #4
 23fb088:	f7fe f804 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb08c:	3508      	adds	r5, #8
 23fb08e:	e7f8      	b.n	23fb082 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fb090:	6820      	ldr	r0, [r4, #0]
 23fb092:	f7fe fefd 	bl	23f9e90 <free>
}
 23fb096:	4620      	mov	r0, r4
 23fb098:	bd70      	pop	{r4, r5, r6, pc}

023fb09a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fb09a:	b510      	push	{r4, lr}
 23fb09c:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
 23fb09e:	3024      	adds	r0, #36	; 0x24
 23fb0a0:	f7ff ffe9 	bl	23fb076 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fb0a4:	f104 0018 	add.w	r0, r4, #24
 23fb0a8:	f7ff ffd3 	bl	23fb052 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
 23fb0ac:	bd10      	pop	{r4, pc}

023fb0ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb0ae:	b570      	push	{r4, r5, r6, lr}
 23fb0b0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb0b2:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fb0b6:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fb0ba:	42ae      	cmp	r6, r5
 23fb0bc:	d004      	beq.n	23fb0c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
 23fb0be:	1d28      	adds	r0, r5, #4
 23fb0c0:	f7fd ffe8 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb0c4:	3508      	adds	r5, #8
 23fb0c6:	e7f8      	b.n	23fb0ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fb0c8:	6820      	ldr	r0, [r4, #0]
 23fb0ca:	f7fe fee1 	bl	23f9e90 <free>
}
 23fb0ce:	4620      	mov	r0, r4
 23fb0d0:	bd70      	pop	{r4, r5, r6, pc}
	...

023fb0d4 <__tcf_0>:
    static BleLocalDevice instance;
 23fb0d4:	b510      	push	{r4, lr}
	if (__ptr != nullptr)
 23fb0d6:	4b16      	ldr	r3, [pc, #88]	; (23fb130 <__tcf_0+0x5c>)
 23fb0d8:	681c      	ldr	r4, [r3, #0]
 23fb0da:	b344      	cbz	r4, 23fb12e <__tcf_0+0x5a>
    class function<_Res(_ArgTypes...)>
 23fb0dc:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23fb0e0:	f7fe ff97 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
 23fb0e4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fb0e8:	f7fe ff93 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
 23fb0ec:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fb0f0:	f7fe ff8f 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
 23fb0f4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fb0f8:	f7fe ff8b 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
 23fb0fc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 23fb100:	f7fd ffc8 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb104:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fb108:	f7fd ffc4 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    ~BleLocalDeviceImpl() = default;
 23fb10c:	f104 0018 	add.w	r0, r4, #24
 23fb110:	f7ff ffcd 	bl	23fb0ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
 23fb114:	f104 000c 	add.w	r0, r4, #12
 23fb118:	f7ff ffad 	bl	23fb076 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fb11c:	4620      	mov	r0, r4
 23fb11e:	f7ff ff98 	bl	23fb052 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
 23fb122:	4620      	mov	r0, r4
    static BleLocalDevice instance;
 23fb124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fb128:	2174      	movs	r1, #116	; 0x74
 23fb12a:	f7fd bcd4 	b.w	23f8ad6 <_ZdlPvj>
 23fb12e:	bd10      	pop	{r4, pc}
 23fb130:	1007ae64 	.word	0x1007ae64

023fb134 <_ZNK8particle13BlePeerDevice10disconnectEv>:
int BlePeerDevice::disconnect() const {
 23fb134:	b573      	push	{r0, r1, r4, r5, r6, lr}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
 23fb136:	f64f 76ff 	movw	r6, #65535	; 0xffff
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
 23fb13a:	6803      	ldr	r3, [r0, #0]
int BlePeerDevice::disconnect() const {
 23fb13c:	4604      	mov	r4, r0
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
 23fb13e:	881b      	ldrh	r3, [r3, #0]
 23fb140:	42b3      	cmp	r3, r6
 23fb142:	d02a      	beq.n	23fb19a <_ZNK8particle13BlePeerDevice10disconnectEv+0x66>
    BleLocalDevice::getInstance().impl()->disconnectingPeer() = *this;
 23fb144:	f7ff fe2c 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fb148:	6823      	ldr	r3, [r4, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23fb14a:	6800      	ldr	r0, [r0, #0]
 23fb14c:	62c3      	str	r3, [r0, #44]	; 0x2c
 23fb14e:	6861      	ldr	r1, [r4, #4]
 23fb150:	3030      	adds	r0, #48	; 0x30
 23fb152:	f7ff f99a 	bl	23fa48a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
    CHECK(hal_ble_gap_disconnect(impl()->connHandle(), nullptr));
 23fb156:	6823      	ldr	r3, [r4, #0]
 23fb158:	2100      	movs	r1, #0
 23fb15a:	8818      	ldrh	r0, [r3, #0]
 23fb15c:	f7fe fa70 	bl	23f9640 <hal_ble_gap_disconnect>
 23fb160:	1e05      	subs	r5, r0, #0
 23fb162:	db08      	blt.n	23fb176 <_ZNK8particle13BlePeerDevice10disconnectEv+0x42>
        WiringBleLock lk;
 23fb164:	4668      	mov	r0, sp
 23fb166:	f7ff f9b5 	bl	23fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fb16a:	6823      	ldr	r3, [r4, #0]
 23fb16c:	4668      	mov	r0, sp
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fb16e:	801e      	strh	r6, [r3, #0]
        WiringBleLock lk;
 23fb170:	f7ff f9be 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
 23fb174:	2500      	movs	r5, #0
    SCOPE_GUARD ({
 23fb176:	4668      	mov	r0, sp
 23fb178:	f7ff fd62 	bl	23fac40 <_ZN8particle13BlePeerDeviceC1Ev>
 23fb17c:	f7ff fe10 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fb180:	9b00      	ldr	r3, [sp, #0]
 23fb182:	6800      	ldr	r0, [r0, #0]
 23fb184:	62c3      	str	r3, [r0, #44]	; 0x2c
 23fb186:	9901      	ldr	r1, [sp, #4]
 23fb188:	3030      	adds	r0, #48	; 0x30
 23fb18a:	f7ff f97e 	bl	23fa48a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23fb18e:	a801      	add	r0, sp, #4
 23fb190:	f7fd ff80 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb194:	4628      	mov	r0, r5
 23fb196:	b002      	add	sp, #8
 23fb198:	bd70      	pop	{r4, r5, r6, pc}
    CHECK_TRUE(connected(), SYSTEM_ERROR_INVALID_STATE);
 23fb19a:	f06f 05d1 	mvn.w	r5, #209	; 0xd1
 23fb19e:	e7f9      	b.n	23fb194 <_ZNK8particle13BlePeerDevice10disconnectEv+0x60>

023fb1a0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
 23fb1a0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fb1a2:	b510      	push	{r4, lr}
      if (_M_empty())
 23fb1a4:	b90a      	cbnz	r2, 23fb1aa <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
 23fb1a6:	f003 fecf 	bl	23fef48 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fb1aa:	68c3      	ldr	r3, [r0, #12]
    }
 23fb1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fb1b0:	4718      	bx	r3

023fb1b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fb1b2:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
 23fb1b8:	e9c0 3300 	strd	r3, r3, [r0]
 23fb1bc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb1be:	f8d1 8004 	ldr.w	r8, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb1c2:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb1c4:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb1c6:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb1c8:	dd4a      	ble.n	23fb260 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
 23fb1ca:	ea4f 1008 	mov.w	r0, r8, lsl #4
 23fb1ce:	f7fe fe51 	bl	23f9e74 <malloc>
            if (!d) {
 23fb1d2:	4606      	mov	r6, r0
 23fb1d4:	2800      	cmp	r0, #0
 23fb1d6:	d043      	beq.n	23fb260 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
 23fb1d8:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
 23fb1dc:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
 23fb1de:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
 23fb1e2:	d916      	bls.n	23fb212 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
 23fb1e4:	4550      	cmp	r0, sl
 23fb1e6:	d215      	bcs.n	23fb214 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
 23fb1e8:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
 23fb1ec:	f1a4 0910 	sub.w	r9, r4, #16
 23fb1f0:	ebaa 0404 	sub.w	r4, sl, r4
 23fb1f4:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23fb1f6:	45d1      	cmp	r9, sl
 23fb1f8:	d01d      	beq.n	23fb236 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
 23fb1fa:	b11c      	cbz	r4, 23fb204 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
 23fb1fc:	4651      	mov	r1, sl
 23fb1fe:	4620      	mov	r0, r4
 23fb200:	f7fe ffab 	bl	23fa15a <_ZN6StringC1EOS_>
                end->~T();
 23fb204:	4650      	mov	r0, sl
 23fb206:	f7fe ff1f 	bl	23fa048 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fb20a:	f1aa 0a10 	sub.w	sl, sl, #16
 23fb20e:	3c10      	subs	r4, #16
 23fb210:	e7f1      	b.n	23fb1f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
 23fb212:	d010      	beq.n	23fb236 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
 23fb214:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
 23fb216:	45a2      	cmp	sl, r4
 23fb218:	d00d      	beq.n	23fb236 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
 23fb21a:	f1b9 0f00 	cmp.w	r9, #0
 23fb21e:	d003      	beq.n	23fb228 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
 23fb220:	4621      	mov	r1, r4
 23fb222:	4648      	mov	r0, r9
 23fb224:	f7fe ff99 	bl	23fa15a <_ZN6StringC1EOS_>
                p->~T();
 23fb228:	4620      	mov	r0, r4
 23fb22a:	f7fe ff0d 	bl	23fa048 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fb22e:	3410      	adds	r4, #16
 23fb230:	f109 0910 	add.w	r9, r9, #16
 23fb234:	e7ef      	b.n	23fb216 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
 23fb236:	6828      	ldr	r0, [r5, #0]
 23fb238:	f7fe fe2a 	bl	23f9e90 <free>
        capacity_ = n;
 23fb23c:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
 23fb240:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb242:	e9d7 4300 	ldrd	r4, r3, [r7]
 23fb246:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
 23fb24a:	45a0      	cmp	r8, r4
 23fb24c:	d006      	beq.n	23fb25c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
 23fb24e:	4621      	mov	r1, r4
 23fb250:	4630      	mov	r0, r6
 23fb252:	f7fe ff9c 	bl	23fa18e <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
 23fb256:	3410      	adds	r4, #16
 23fb258:	3610      	adds	r6, #16
 23fb25a:	e7f6      	b.n	23fb24a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
 23fb25c:	687b      	ldr	r3, [r7, #4]
 23fb25e:	606b      	str	r3, [r5, #4]
}
 23fb260:	4628      	mov	r0, r5
 23fb262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fb266 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
 23fb266:	b530      	push	{r4, r5, lr}
 23fb268:	b08d      	sub	sp, #52	; 0x34
 23fb26a:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
 23fb26c:	f100 0138 	add.w	r1, r0, #56	; 0x38
 23fb270:	a801      	add	r0, sp, #4
 23fb272:	f7ff ff9e 	bl	23fb1b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
 23fb276:	9b02      	ldr	r3, [sp, #8]
 23fb278:	2b00      	cmp	r3, #0
 23fb27a:	dd2f      	ble.n	23fb2dc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
 23fb27c:	f104 0114 	add.w	r1, r4, #20
 23fb280:	a804      	add	r0, sp, #16
 23fb282:	f7ff fb7f 	bl	23fa984 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
 23fb286:	f104 0108 	add.w	r1, r4, #8
 23fb28a:	a808      	add	r0, sp, #32
 23fb28c:	f7ff fb7a 	bl	23fa984 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
 23fb290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fb292:	9b06      	ldr	r3, [sp, #24]
 23fb294:	4313      	orrs	r3, r2
 23fb296:	d01f      	beq.n	23fb2d8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
 23fb298:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 23fb29c:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
 23fb2a0:	42ac      	cmp	r4, r5
 23fb2a2:	d019      	beq.n	23fb2d8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    // comparison (only works w/ Strings and "strings")
    operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    int compareTo(const String &s) const;
    unsigned char equals(const String &s) const;
    unsigned char equals(const char *cstr) const;
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23fb2a4:	4620      	mov	r0, r4
 23fb2a6:	a904      	add	r1, sp, #16
 23fb2a8:	f7fe ffd4 	bl	23fa254 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fb2ac:	b160      	cbz	r0, 23fb2c8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
 23fb2ae:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
 23fb2b0:	a808      	add	r0, sp, #32
 23fb2b2:	f7fe fec9 	bl	23fa048 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
 23fb2b6:	a804      	add	r0, sp, #16
 23fb2b8:	f7fe fec6 	bl	23fa048 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
 23fb2bc:	a801      	add	r0, sp, #4
 23fb2be:	f7ff fe05 	bl	23faecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
 23fb2c2:	4620      	mov	r0, r4
 23fb2c4:	b00d      	add	sp, #52	; 0x34
 23fb2c6:	bd30      	pop	{r4, r5, pc}
 23fb2c8:	4620      	mov	r0, r4
 23fb2ca:	a908      	add	r1, sp, #32
 23fb2cc:	f7fe ffc2 	bl	23fa254 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fb2d0:	3410      	adds	r4, #16
 23fb2d2:	2800      	cmp	r0, #0
 23fb2d4:	d0e4      	beq.n	23fb2a0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
 23fb2d6:	e7ea      	b.n	23fb2ae <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
 23fb2d8:	2400      	movs	r4, #0
 23fb2da:	e7e9      	b.n	23fb2b0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
 23fb2dc:	2401      	movs	r4, #1
 23fb2de:	e7ed      	b.n	23fb2bc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

023fb2e0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb2e0:	b570      	push	{r4, r5, r6, lr}
 23fb2e2:	4604      	mov	r4, r0
        capacity_(0) {
 23fb2e4:	2000      	movs	r0, #0
 23fb2e6:	e9c4 0000 	strd	r0, r0, [r4]
 23fb2ea:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb2ec:	684e      	ldr	r6, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb2ee:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb2f0:	4286      	cmp	r6, r0
 23fb2f2:	dd12      	ble.n	23fb31a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
 23fb2f4:	0071      	lsls	r1, r6, #1
 23fb2f6:	f7fe fdd9 	bl	23f9eac <realloc>
            if (!d) {
 23fb2fa:	b170      	cbz	r0, 23fb31a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
 23fb2fc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fb2fe:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb300:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fb304:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
 23fb308:	429a      	cmp	r2, r3
 23fb30a:	d004      	beq.n	23fb316 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
 23fb30c:	f833 1b02 	ldrh.w	r1, [r3], #2
 23fb310:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
 23fb314:	e7f8      	b.n	23fb308 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
 23fb316:	686b      	ldr	r3, [r5, #4]
 23fb318:	6063      	str	r3, [r4, #4]
}
 23fb31a:	4620      	mov	r0, r4
 23fb31c:	bd70      	pop	{r4, r5, r6, pc}

023fb31e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
 23fb31e:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fb320:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fb322:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fb324:	b923      	cbnz	r3, 23fb330 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
 23fb326:	6803      	ldr	r3, [r0, #0]
 23fb328:	6818      	ldr	r0, [r3, #0]
 23fb32a:	b108      	cbz	r0, 23fb330 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
 23fb32c:	f7fe fdb0 	bl	23f9e90 <free>
            func_();
        }
    }
 23fb330:	4620      	mov	r0, r4
 23fb332:	bd10      	pop	{r4, pc}

023fb334 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
 23fb334:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fb336:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fb338:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fb33a:	b923      	cbnz	r3, 23fb346 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
 23fb33c:	6803      	ldr	r3, [r0, #0]
 23fb33e:	6818      	ldr	r0, [r3, #0]
 23fb340:	b108      	cbz	r0, 23fb346 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
 23fb342:	f7fe fda5 	bl	23f9e90 <free>
    }
 23fb346:	4620      	mov	r0, r4
 23fb348:	bd10      	pop	{r4, pc}
	...

023fb34c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
 23fb34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
 23fb350:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
 23fb354:	460f      	mov	r7, r1
 23fb356:	b08f      	sub	sp, #60	; 0x3c
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
 23fb358:	f1b8 0f00 	cmp.w	r8, #0
 23fb35c:	d072      	beq.n	23fb444 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
 23fb35e:	6f05      	ldr	r5, [r0, #112]	; 0x70
 23fb360:	2d00      	cmp	r5, #0
 23fb362:	d06f      	beq.n	23fb444 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
 23fb364:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_SUPPORTED_ADV_DATA_LEN);
 23fb368:	231f      	movs	r3, #31
 23fb36a:	2200      	movs	r2, #0
 23fb36c:	21ff      	movs	r1, #255	; 0xff
 23fb36e:	4648      	mov	r0, r9
 23fb370:	f7ff fad5 	bl	23fa91e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
 23fb374:	3708      	adds	r7, #8
 23fb376:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_SUPPORTED_ADV_DATA_LEN);
 23fb378:	231f      	movs	r3, #31
 23fb37a:	2200      	movs	r2, #0
 23fb37c:	21ff      	movs	r1, #255	; 0xff
 23fb37e:	4638      	mov	r0, r7
 23fb380:	f7ff facd 	bl	23fa91e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fb384:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_SUPPORTED_ADV_DATA_LEN);
 23fb386:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fb388:	d006      	beq.n	23fb398 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
 23fb38a:	42ae      	cmp	r6, r5
 23fb38c:	d030      	beq.n	23fb3f0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
 23fb38e:	2400      	movs	r4, #0
    }
 23fb390:	4620      	mov	r0, r4
 23fb392:	b00f      	add	sp, #60	; 0x3c
 23fb394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
 23fb398:	4620      	mov	r0, r4
 23fb39a:	f7fe fd6b 	bl	23f9e74 <malloc>
            dismissed_(false) {
 23fb39e:	ab03      	add	r3, sp, #12
 23fb3a0:	9304      	str	r3, [sp, #16]
 23fb3a2:	2300      	movs	r3, #0
 23fb3a4:	4604      	mov	r4, r0
 23fb3a6:	9003      	str	r0, [sp, #12]
 23fb3a8:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
 23fb3ac:	b970      	cbnz	r0, 23fb3cc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
 23fb3ae:	2320      	movs	r3, #32
 23fb3b0:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fb3b4:	4b24      	ldr	r3, [pc, #144]	; (23fb448 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fb3b6:	4925      	ldr	r1, [pc, #148]	; (23fb44c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fb3b8:	9300      	str	r3, [sp, #0]
 23fb3ba:	aa06      	add	r2, sp, #24
 23fb3bc:	4603      	mov	r3, r0
 23fb3be:	2032      	movs	r0, #50	; 0x32
 23fb3c0:	f7fe fbb4 	bl	23f9b2c <log_message>
                    return false;
 23fb3c4:	a804      	add	r0, sp, #16
 23fb3c6:	f7ff ffaa 	bl	23fb31e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
 23fb3ca:	e7e1      	b.n	23fb390 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
 23fb3cc:	4602      	mov	r2, r0
 23fb3ce:	21ff      	movs	r1, #255	; 0xff
 23fb3d0:	462b      	mov	r3, r5
 23fb3d2:	4648      	mov	r0, r9
 23fb3d4:	f7ff faa3 	bl	23fa91e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
 23fb3d8:	462a      	mov	r2, r5
 23fb3da:	4641      	mov	r1, r8
 23fb3dc:	9803      	ldr	r0, [sp, #12]
 23fb3de:	f003 fed7 	bl	23ff190 <memcmp>
 23fb3e2:	b118      	cbz	r0, 23fb3ec <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
 23fb3e4:	a804      	add	r0, sp, #16
 23fb3e6:	f7ff ff9a 	bl	23fb31e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
 23fb3ea:	e7ce      	b.n	23fb38a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
 23fb3ec:	2401      	movs	r4, #1
 23fb3ee:	e7e9      	b.n	23fb3c4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
 23fb3f0:	4628      	mov	r0, r5
 23fb3f2:	f7fe fd3f 	bl	23f9e74 <malloc>
 23fb3f6:	2400      	movs	r4, #0
 23fb3f8:	ab03      	add	r3, sp, #12
 23fb3fa:	4606      	mov	r6, r0
 23fb3fc:	9003      	str	r0, [sp, #12]
 23fb3fe:	9304      	str	r3, [sp, #16]
 23fb400:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
 23fb404:	b978      	cbnz	r0, 23fb426 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
 23fb406:	2320      	movs	r3, #32
 23fb408:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fb40c:	4b0e      	ldr	r3, [pc, #56]	; (23fb448 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fb40e:	490f      	ldr	r1, [pc, #60]	; (23fb44c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fb410:	9300      	str	r3, [sp, #0]
 23fb412:	aa06      	add	r2, sp, #24
 23fb414:	4603      	mov	r3, r0
 23fb416:	2032      	movs	r0, #50	; 0x32
 23fb418:	f7fe fb88 	bl	23f9b2c <log_message>
                    return false;
 23fb41c:	4634      	mov	r4, r6
 23fb41e:	a804      	add	r0, sp, #16
 23fb420:	f7ff ff88 	bl	23fb334 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
 23fb424:	e7b4      	b.n	23fb390 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
 23fb426:	4602      	mov	r2, r0
 23fb428:	21ff      	movs	r1, #255	; 0xff
 23fb42a:	462b      	mov	r3, r5
 23fb42c:	4638      	mov	r0, r7
 23fb42e:	f7ff fa76 	bl	23fa91e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
 23fb432:	462a      	mov	r2, r5
 23fb434:	4641      	mov	r1, r8
 23fb436:	9803      	ldr	r0, [sp, #12]
 23fb438:	f003 feaa 	bl	23ff190 <memcmp>
 23fb43c:	2800      	cmp	r0, #0
 23fb43e:	d1ee      	bne.n	23fb41e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
 23fb440:	2401      	movs	r4, #1
 23fb442:	e7ec      	b.n	23fb41e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
 23fb444:	2401      	movs	r4, #1
 23fb446:	e7a3      	b.n	23fb390 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
 23fb448:	023ff917 	.word	0x023ff917
 23fb44c:	023ff88f 	.word	0x023ff88f

023fb450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
 23fb450:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fb452:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fb454:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fb456:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fb458:	dd03      	ble.n	23fb462 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23fb45a:	f7fe fd27 	bl	23f9eac <realloc>
            if (!d) {
 23fb45e:	b918      	cbnz	r0, 23fb468 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
 23fb460:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fb462:	f7fe fd15 	bl	23f9e90 <free>
        T* d = nullptr;
 23fb466:	2000      	movs	r0, #0
        data_ = d;
 23fb468:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fb46a:	60a5      	str	r5, [r4, #8]
        return true;
 23fb46c:	2001      	movs	r0, #1
 23fb46e:	e7f7      	b.n	23fb460 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

023fb470 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fb470:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fb472:	6883      	ldr	r3, [r0, #8]
 23fb474:	428b      	cmp	r3, r1
 23fb476:	da02      	bge.n	23fb47e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
 23fb478:	f7ff ffea 	bl	23fb450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
 23fb47c:	bd08      	pop	{r3, pc}
    return true;
 23fb47e:	2001      	movs	r0, #1
 23fb480:	e7fc      	b.n	23fb47c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

023fb482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb482:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fb484:	2300      	movs	r3, #0
 23fb486:	e9c0 3300 	strd	r3, r3, [r0]
 23fb48a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb48c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb48e:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb490:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb492:	4299      	cmp	r1, r3
 23fb494:	dd10      	ble.n	23fb4b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
 23fb496:	f7ff ffdb 	bl	23fb450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fb49a:	b168      	cbz	r0, 23fb4b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb49c:	e9d5 3100 	ldrd	r3, r1, [r5]
 23fb4a0:	6822      	ldr	r2, [r4, #0]
 23fb4a2:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
 23fb4a4:	4299      	cmp	r1, r3
 23fb4a6:	d005      	beq.n	23fb4b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
 23fb4a8:	b10a      	cbz	r2, 23fb4ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
 23fb4aa:	7818      	ldrb	r0, [r3, #0]
 23fb4ac:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
 23fb4ae:	3301      	adds	r3, #1
 23fb4b0:	3201      	adds	r2, #1
 23fb4b2:	e7f7      	b.n	23fb4a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
 23fb4b4:	686b      	ldr	r3, [r5, #4]
 23fb4b6:	6063      	str	r3, [r4, #4]
}
 23fb4b8:	4620      	mov	r0, r4
 23fb4ba:	bd38      	pop	{r3, r4, r5, pc}

023fb4bc <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
 23fb4bc:	b538      	push	{r3, r4, r5, lr}
 23fb4be:	4604      	mov	r4, r0
 23fb4c0:	460d      	mov	r5, r1
    address_ = addr.address_;
 23fb4c2:	680b      	ldr	r3, [r1, #0]
class BleAdvertisingData {
 23fb4c4:	3008      	adds	r0, #8
 23fb4c6:	f840 3c08 	str.w	r3, [r0, #-8]
 23fb4ca:	684b      	ldr	r3, [r1, #4]
 23fb4cc:	3108      	adds	r1, #8
 23fb4ce:	f840 3c04 	str.w	r3, [r0, #-4]
 23fb4d2:	f7ff ffd6 	bl	23fb482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fb4d6:	f105 0114 	add.w	r1, r5, #20
 23fb4da:	f104 0014 	add.w	r0, r4, #20
 23fb4de:	f7ff ffd0 	bl	23fb482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fb4e2:	f895 3020 	ldrb.w	r3, [r5, #32]
 23fb4e6:	4620      	mov	r0, r4
 23fb4e8:	f884 3020 	strb.w	r3, [r4, #32]
 23fb4ec:	bd38      	pop	{r3, r4, r5, pc}

023fb4ee <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
 23fb4ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fb4f0:	4604      	mov	r4, r0
 23fb4f2:	a801      	add	r0, sp, #4
 23fb4f4:	f7ff ffc5 	bl	23fb482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fb4f8:	9b01      	ldr	r3, [sp, #4]
 23fb4fa:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb4fc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb4fe:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb500:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb502:	6062      	str	r2, [r4, #4]
 23fb504:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb506:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb508:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fb50a:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb50c:	9001      	str	r0, [sp, #4]
 23fb50e:	9303      	str	r3, [sp, #12]
    ::free(ptr);
 23fb510:	f7fe fcbe 	bl	23f9e90 <free>
 23fb514:	b004      	add	sp, #16
 23fb516:	bd10      	pop	{r4, pc}

023fb518 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fb518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb51c:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb51e:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fb520:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb522:	4419      	add	r1, r3
 23fb524:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fb526:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb528:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fb52a:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb52c:	dc12      	bgt.n	23fb554 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
 23fb52e:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb530:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fb532:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb534:	4631      	mov	r1, r6
 23fb536:	1bd2      	subs	r2, r2, r7
 23fb538:	1970      	adds	r0, r6, r5
 23fb53a:	f003 fe46 	bl	23ff1ca <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fb53e:	462a      	mov	r2, r5
 23fb540:	4641      	mov	r1, r8
 23fb542:	4630      	mov	r0, r6
 23fb544:	f003 fe34 	bl	23ff1b0 <memcpy>
    return true;
 23fb548:	2001      	movs	r0, #1
    size_ += n;
 23fb54a:	6863      	ldr	r3, [r4, #4]
 23fb54c:	442b      	add	r3, r5
 23fb54e:	6063      	str	r3, [r4, #4]
}
 23fb550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb554:	f7ff ff7c 	bl	23fb450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fb558:	2800      	cmp	r0, #0
 23fb55a:	d1e8      	bne.n	23fb52e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
 23fb55c:	e7f8      	b.n	23fb550 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

023fb55e <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fb55e:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
 23fb560:	460a      	mov	r2, r1
 23fb562:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fb564:	b510      	push	{r4, lr}
 23fb566:	4604      	mov	r4, r0
    size_ = 0;
 23fb568:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
 23fb56a:	b102      	cbz	r2, 23fb56e <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
 23fb56c:	b90b      	cbnz	r3, 23fb572 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
 23fb56e:	2000      	movs	r0, #0
}
 23fb570:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
 23fb572:	2b1f      	cmp	r3, #31
 23fb574:	bf28      	it	cs
 23fb576:	231f      	movcs	r3, #31
 23fb578:	f7ff ffce 	bl	23fb518 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
 23fb57c:	2800      	cmp	r0, #0
 23fb57e:	d0f7      	beq.n	23fb570 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
 23fb580:	6860      	ldr	r0, [r4, #4]
 23fb582:	e7f5      	b.n	23fb570 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

023fb584 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fb584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb586:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb588:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fb58c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fb58e:	4604      	mov	r4, r0
 23fb590:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb592:	da0b      	bge.n	23fb5ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
 23fb594:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb596:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fb598:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb59a:	1b52      	subs	r2, r2, r5
 23fb59c:	1c48      	adds	r0, r1, #1
 23fb59e:	f003 fe14 	bl	23ff1ca <memmove>
    new(p) T(std::move(value));
 23fb5a2:	557e      	strb	r6, [r7, r5]
    ++size_;
 23fb5a4:	6863      	ldr	r3, [r4, #4]
 23fb5a6:	3301      	adds	r3, #1
 23fb5a8:	6063      	str	r3, [r4, #4]
}
 23fb5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb5ac:	3101      	adds	r1, #1
 23fb5ae:	f7ff ff4f 	bl	23fb450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fb5b2:	2800      	cmp	r0, #0
 23fb5b4:	d1ee      	bne.n	23fb594 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
 23fb5b6:	e7f8      	b.n	23fb5aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

023fb5b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fb5b8:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
 23fb5ba:	6841      	ldr	r1, [r0, #4]
 23fb5bc:	f7ff bfe2 	b.w	23fb584 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

023fb5c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fb5c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fb5c4:	4604      	mov	r4, r0
 23fb5c6:	461d      	mov	r5, r3
 23fb5c8:	460f      	mov	r7, r1
 23fb5ca:	ab01      	add	r3, sp, #4
 23fb5cc:	4690      	mov	r8, r2
 23fb5ce:	460a      	mov	r2, r1
 23fb5d0:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fb5d4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 23fb5d8:	f7fe feae 	bl	23fa338 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
 23fb5dc:	1cae      	adds	r6, r5, #2
 23fb5de:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
 23fb5e0:	6863      	ldr	r3, [r4, #4]
 23fb5e2:	f1b9 0f00 	cmp.w	r9, #0
 23fb5e6:	d126      	bne.n	23fb636 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
 23fb5e8:	b328      	cbz	r0, 23fb636 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_SUPPORTED_ADV_DATA_LEN) {
 23fb5ea:	4433      	add	r3, r6
 23fb5ec:	1a1b      	subs	r3, r3, r0
 23fb5ee:	2b1f      	cmp	r3, #31
 23fb5f0:	d809      	bhi.n	23fb606 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
 23fb5f2:	4620      	mov	r0, r4
 23fb5f4:	9901      	ldr	r1, [sp, #4]
 23fb5f6:	f7ff fcc9 	bl	23faf8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fb5fa:	6861      	ldr	r1, [r4, #4]
 23fb5fc:	4620      	mov	r0, r4
 23fb5fe:	4431      	add	r1, r6
 23fb600:	f7ff ff36 	bl	23fb470 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fb604:	b918      	cbnz	r0, 23fb60e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
 23fb606:	6860      	ldr	r0, [r4, #4]
}
 23fb608:	b003      	add	sp, #12
 23fb60a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
 23fb60e:	1c6a      	adds	r2, r5, #1
 23fb610:	4620      	mov	r0, r4
 23fb612:	9901      	ldr	r1, [sp, #4]
 23fb614:	b2d2      	uxtb	r2, r2
 23fb616:	f7ff ffb5 	bl	23fb584 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
 23fb61a:	9901      	ldr	r1, [sp, #4]
 23fb61c:	463a      	mov	r2, r7
 23fb61e:	3101      	adds	r1, #1
 23fb620:	4620      	mov	r0, r4
 23fb622:	f7ff ffaf 	bl	23fb584 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
 23fb626:	462b      	mov	r3, r5
 23fb628:	4642      	mov	r2, r8
 23fb62a:	9901      	ldr	r1, [sp, #4]
 23fb62c:	3102      	adds	r1, #2
    return insert(size_, values, n);
 23fb62e:	4620      	mov	r0, r4
 23fb630:	f7ff ff72 	bl	23fb518 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
 23fb634:	e7e7      	b.n	23fb606 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_SUPPORTED_ADV_DATA_LEN) {
 23fb636:	18f1      	adds	r1, r6, r3
 23fb638:	291f      	cmp	r1, #31
 23fb63a:	d811      	bhi.n	23fb660 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0xa0>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fb63c:	4620      	mov	r0, r4
 23fb63e:	f7ff ff17 	bl	23fb470 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fb642:	2800      	cmp	r0, #0
 23fb644:	d0df      	beq.n	23fb606 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
 23fb646:	1c69      	adds	r1, r5, #1
 23fb648:	4620      	mov	r0, r4
 23fb64a:	b2c9      	uxtb	r1, r1
 23fb64c:	f7ff ffb4 	bl	23fb5b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
 23fb650:	4639      	mov	r1, r7
 23fb652:	4620      	mov	r0, r4
 23fb654:	f7ff ffb0 	bl	23fb5b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
 23fb658:	462b      	mov	r3, r5
 23fb65a:	4642      	mov	r2, r8
 23fb65c:	6861      	ldr	r1, [r4, #4]
 23fb65e:	e7e6      	b.n	23fb62e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>
        return SYSTEM_ERROR_TOO_LARGE;
 23fb660:	f06f 00bd 	mvn.w	r0, #189	; 0xbd
 23fb664:	e7d0      	b.n	23fb608 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x48>

023fb666 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fb666:	b430      	push	{r4, r5}
 23fb668:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
 23fb66c:	b11a      	cbz	r2, 23fb676 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
 23fb66e:	9502      	str	r5, [sp, #8]
}
 23fb670:	bc30      	pop	{r4, r5}
 23fb672:	f7ff bfa5 	b.w	23fb5c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
 23fb676:	6840      	ldr	r0, [r0, #4]
}
 23fb678:	bc30      	pop	{r4, r5}
 23fb67a:	4770      	bx	lr

023fb67c <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
 23fb67c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23fb67e:	2300      	movs	r3, #0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fb680:	2206      	movs	r2, #6
 23fb682:	e9c0 3300 	strd	r3, r3, [r0]
 23fb686:	6083      	str	r3, [r0, #8]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fb688:	9300      	str	r3, [sp, #0]
 23fb68a:	2301      	movs	r3, #1
BleAdvertisingData::BleAdvertisingData()
 23fb68c:	4604      	mov	r4, r0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fb68e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fb692:	4619      	mov	r1, r3
 23fb694:	f10d 020f 	add.w	r2, sp, #15
 23fb698:	f7ff ffe5 	bl	23fb666 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23fb69c:	4620      	mov	r0, r4
 23fb69e:	b004      	add	sp, #16
 23fb6a0:	bd10      	pop	{r4, pc}

023fb6a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fb6a2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb6a6:	4604      	mov	r4, r0
 23fb6a8:	460d      	mov	r5, r1
 23fb6aa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb6ac:	d914      	bls.n	23fb6d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fb6ae:	4290      	cmp	r0, r2
 23fb6b0:	d213      	bcs.n	23fb6da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fb6b2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fb6b6:	1a75      	subs	r5, r6, r1
 23fb6b8:	f1a1 0708 	sub.w	r7, r1, #8
 23fb6bc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb6be:	42b7      	cmp	r7, r6
 23fb6c0:	d018      	beq.n	23fb6f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fb6c2:	b11c      	cbz	r4, 23fb6cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fb6c4:	4631      	mov	r1, r6
 23fb6c6:	4620      	mov	r0, r4
 23fb6c8:	f7ff fcab 	bl	23fb022 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fb6cc:	1d30      	adds	r0, r6, #4
 23fb6ce:	f7fd fce1 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fb6d2:	3e08      	subs	r6, #8
 23fb6d4:	3c08      	subs	r4, #8
 23fb6d6:	e7f2      	b.n	23fb6be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fb6d8:	d00c      	beq.n	23fb6f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fb6da:	42b5      	cmp	r5, r6
 23fb6dc:	d00a      	beq.n	23fb6f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fb6de:	b11c      	cbz	r4, 23fb6e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fb6e0:	4629      	mov	r1, r5
 23fb6e2:	4620      	mov	r0, r4
 23fb6e4:	f7ff fc9d 	bl	23fb022 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fb6e8:	1d28      	adds	r0, r5, #4
 23fb6ea:	f7fd fcd3 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fb6ee:	3508      	adds	r5, #8
 23fb6f0:	3408      	adds	r4, #8
 23fb6f2:	e7f2      	b.n	23fb6da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fb6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb6f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fb6f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb6f8:	4605      	mov	r5, r0
    T* const p = find(data_, data_ + size_, value);
 23fb6fa:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fb6fe:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
 23fb700:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
 23fb704:	42a6      	cmp	r6, r4
 23fb706:	d005      	beq.n	23fb714 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
 23fb708:	4639      	mov	r1, r7
 23fb70a:	4620      	mov	r0, r4
 23fb70c:	f7ff fae9 	bl	23face2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
 23fb710:	b108      	cbz	r0, 23fb716 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
 23fb712:	b914      	cbnz	r4, 23fb71a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
 23fb714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
 23fb716:	3408      	adds	r4, #8
 23fb718:	e7f4      	b.n	23fb704 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
 23fb71a:	1d20      	adds	r0, r4, #4
 23fb71c:	f7fd fcba 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
 23fb720:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fb724:	4620      	mov	r0, r4
 23fb726:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fb72a:	f104 0108 	add.w	r1, r4, #8
 23fb72e:	f7ff ffb8 	bl	23fb6a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
 23fb732:	686b      	ldr	r3, [r5, #4]
 23fb734:	3b01      	subs	r3, #1
 23fb736:	606b      	str	r3, [r5, #4]
    return true;
 23fb738:	e7ec      	b.n	23fb714 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

023fb73a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fb73a:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fb73c:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fb73e:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fb740:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fb742:	dd05      	ble.n	23fb750 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
 23fb744:	2114      	movs	r1, #20
 23fb746:	4369      	muls	r1, r5
 23fb748:	f7fe fbb0 	bl	23f9eac <realloc>
            if (!d) {
 23fb74c:	b918      	cbnz	r0, 23fb756 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
 23fb74e:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fb750:	f7fe fb9e 	bl	23f9e90 <free>
        T* d = nullptr;
 23fb754:	2000      	movs	r0, #0
        data_ = d;
 23fb756:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fb758:	60a5      	str	r5, [r4, #8]
        return true;
 23fb75a:	2001      	movs	r0, #1
 23fb75c:	e7f7      	b.n	23fb74e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

023fb75e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb75e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
 23fb762:	2400      	movs	r4, #0
 23fb764:	e9c0 4400 	strd	r4, r4, [r0]
 23fb768:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb76a:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb76c:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb76e:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb770:	42a1      	cmp	r1, r4
 23fb772:	dd1c      	ble.n	23fb7ae <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
 23fb774:	f7ff ffe1 	bl	23fb73a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fb778:	b1c8      	cbz	r0, 23fb7ae <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb77a:	e9d8 9300 	ldrd	r9, r3, [r8]
 23fb77e:	f04f 0c14 	mov.w	ip, #20
 23fb782:	fb0c 9c03 	mla	ip, ip, r3, r9
 23fb786:	f8d7 e000 	ldr.w	lr, [r7]
        for (; it != end; ++it, ++dest) {
 23fb78a:	eb09 0504 	add.w	r5, r9, r4
 23fb78e:	45ac      	cmp	ip, r5
 23fb790:	d00a      	beq.n	23fb7a8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4a>
            new(dest) T(*it);
 23fb792:	eb1e 0604 	adds.w	r6, lr, r4
 23fb796:	bf1e      	ittt	ne
 23fb798:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
 23fb79a:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
 23fb79c:	682b      	ldrne	r3, [r5, #0]
 23fb79e:	f104 0414 	add.w	r4, r4, #20
 23fb7a2:	bf18      	it	ne
 23fb7a4:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
 23fb7a6:	e7f0      	b.n	23fb78a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
 23fb7a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fb7ac:	607b      	str	r3, [r7, #4]
}
 23fb7ae:	4638      	mov	r0, r7
 23fb7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fb7b4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fb7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(size_, vector);
 23fb7b8:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb7ba:	6883      	ldr	r3, [r0, #8]
    return insert(i, vector.data_, vector.size_);
 23fb7bc:	e9d1 8700 	ldrd	r8, r7, [r1]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb7c0:	19e9      	adds	r1, r5, r7
 23fb7c2:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fb7c4:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb7c6:	dc17      	bgt.n	23fb7f8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
 23fb7c8:	2314      	movs	r3, #20
    move(p + n, p, data_ + size_);
 23fb7ca:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fb7cc:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
 23fb7ce:	fb03 f907 	mul.w	r9, r3, r7
 23fb7d2:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fb7d4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb7d6:	1b52      	subs	r2, r2, r5
    T* const p = data_ + i;
 23fb7d8:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb7da:	4631      	mov	r1, r6
 23fb7dc:	eb06 0009 	add.w	r0, r6, r9
 23fb7e0:	f003 fcf3 	bl	23ff1ca <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fb7e4:	464a      	mov	r2, r9
 23fb7e6:	4641      	mov	r1, r8
 23fb7e8:	4630      	mov	r0, r6
 23fb7ea:	f003 fce1 	bl	23ff1b0 <memcpy>
    size_ += n;
 23fb7ee:	6863      	ldr	r3, [r4, #4]
 23fb7f0:	443b      	add	r3, r7
 23fb7f2:	6063      	str	r3, [r4, #4]
}
 23fb7f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fb7f8:	f7ff ff9f 	bl	23fb73a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fb7fc:	2800      	cmp	r0, #0
 23fb7fe:	d1e3      	bne.n	23fb7c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
 23fb800:	e7f8      	b.n	23fb7f4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

023fb802 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fb802:	b082      	sub	sp, #8
 23fb804:	b570      	push	{r4, r5, r6, lr}
 23fb806:	460c      	mov	r4, r1
 23fb808:	a904      	add	r1, sp, #16
 23fb80a:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb80e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fb812:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fb814:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb816:	da17      	bge.n	23fb848 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
 23fb818:	2314      	movs	r3, #20
    move(p + 1, p, data_ + size_);
 23fb81a:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 23fb81c:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
 23fb820:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fb822:	682c      	ldr	r4, [r5, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb824:	1a52      	subs	r2, r2, r1
    T* const p = data_ + i;
 23fb826:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb828:	4621      	mov	r1, r4
 23fb82a:	18e0      	adds	r0, r4, r3
    new(p) T(std::move(value));
 23fb82c:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb82e:	f003 fccc 	bl	23ff1ca <memmove>
    new(p) T(std::move(value));
 23fb832:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23fb834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fb836:	6833      	ldr	r3, [r6, #0]
 23fb838:	6023      	str	r3, [r4, #0]
    ++size_;
 23fb83a:	686b      	ldr	r3, [r5, #4]
 23fb83c:	3301      	adds	r3, #1
 23fb83e:	606b      	str	r3, [r5, #4]
}
 23fb840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fb844:	b002      	add	sp, #8
 23fb846:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb848:	3101      	adds	r1, #1
 23fb84a:	f7ff ff76 	bl	23fb73a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fb84e:	2800      	cmp	r0, #0
 23fb850:	d1e2      	bne.n	23fb818 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
 23fb852:	e7f5      	b.n	23fb840 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

023fb854 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fb854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
 23fb858:	2400      	movs	r4, #0
 23fb85a:	4605      	mov	r5, r0
 23fb85c:	460f      	mov	r7, r1
 23fb85e:	4690      	mov	r8, r2
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fb860:	1e93      	subs	r3, r2, #2
 23fb862:	e9c0 4400 	strd	r4, r4, [r0]
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fb866:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fb868:	b2db      	uxtb	r3, r3
 23fb86a:	6084      	str	r4, [r0, #8]
 23fb86c:	9305      	str	r3, [sp, #20]
    return size_;
 23fb86e:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fb870:	428c      	cmp	r4, r1
 23fb872:	da72      	bge.n	23fb95a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
 23fb874:	6838      	ldr	r0, [r7, #0]
 23fb876:	4642      	mov	r2, r8
 23fb878:	ab07      	add	r3, sp, #28
 23fb87a:	1b09      	subs	r1, r1, r4
 23fb87c:	4420      	add	r0, r4
 23fb87e:	f7fe fd5b 	bl	23fa338 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
 23fb882:	4606      	mov	r6, r0
 23fb884:	2800      	cmp	r0, #0
 23fb886:	d068      	beq.n	23fb95a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fb888:	9b05      	ldr	r3, [sp, #20]
 23fb88a:	2b01      	cmp	r3, #1
 23fb88c:	d82f      	bhi.n	23fb8ee <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fb88e:	f04f 0900 	mov.w	r9, #0
 23fb892:	f1a0 0b02 	sub.w	fp, r0, #2
 23fb896:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    return insert(size_, std::move(value));
 23fb89a:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fb89e:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fb8a0:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fb8a2:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fb8a4:	d055      	beq.n	23fb952 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
 23fb8a6:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fb8a8:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 23fb8ac:	4413      	add	r3, r2
 23fb8ae:	78d9      	ldrb	r1, [r3, #3]
 23fb8b0:	789b      	ldrb	r3, [r3, #2]
 23fb8b2:	a808      	add	r0, sp, #32
 23fb8b4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 23fb8b8:	f7fe ff1b 	bl	23fa6f2 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
 23fb8bc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fb8c0:	f10d 0e20 	add.w	lr, sp, #32
 23fb8c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fb8c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fb8cc:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fb8d0:	f109 0901 	add.w	r9, r9, #1
 23fb8d4:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fb8d8:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fb8dc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fb8e0:	ab0d      	add	r3, sp, #52	; 0x34
 23fb8e2:	4628      	mov	r0, r5
 23fb8e4:	cb0c      	ldmia	r3, {r2, r3}
 23fb8e6:	6869      	ldr	r1, [r5, #4]
 23fb8e8:	f7ff ff8b 	bl	23fb802 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fb8ec:	e7d7      	b.n	23fb89e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
 23fb8ee:	f1a8 0306 	sub.w	r3, r8, #6
 23fb8f2:	2b01      	cmp	r3, #1
 23fb8f4:	d82d      	bhi.n	23fb952 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fb8f6:	f04f 0900 	mov.w	r9, #0
 23fb8fa:	f1a0 0b02 	sub.w	fp, r0, #2
 23fb8fe:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 23fb902:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 23fb906:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23fb908:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fb90a:	d022      	beq.n	23fb952 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23fb90c:	3302      	adds	r3, #2
    return data_[i];
 23fb90e:	6839      	ldr	r1, [r7, #0]
 23fb910:	4423      	add	r3, r4
 23fb912:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 23fb916:	2201      	movs	r2, #1
 23fb918:	4419      	add	r1, r3
 23fb91a:	a808      	add	r0, sp, #32
 23fb91c:	f7fe feca 	bl	23fa6b4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
 23fb920:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fb924:	f10d 0e20 	add.w	lr, sp, #32
 23fb928:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fb92c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fb930:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fb934:	f109 0901 	add.w	r9, r9, #1
 23fb938:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fb93c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fb940:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fb944:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 23fb948:	4628      	mov	r0, r5
 23fb94a:	6869      	ldr	r1, [r5, #4]
 23fb94c:	f7ff ff59 	bl	23fb802 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fb950:	e7d9      	b.n	23fb906 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fb952:	9b07      	ldr	r3, [sp, #28]
 23fb954:	441c      	add	r4, r3
 23fb956:	4434      	add	r4, r6
 23fb958:	e789      	b.n	23fb86e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
 23fb95a:	4628      	mov	r0, r5
 23fb95c:	b013      	add	sp, #76	; 0x4c
 23fb95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb962 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
        capacity_(0) {
 23fb962:	2300      	movs	r3, #0
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
 23fb964:	b530      	push	{r4, r5, lr}
 23fb966:	4604      	mov	r4, r0
 23fb968:	460d      	mov	r5, r1
 23fb96a:	b085      	sub	sp, #20
 23fb96c:	e9c0 3300 	strd	r3, r3, [r0]
 23fb970:	6083      	str	r3, [r0, #8]
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23fb972:	2202      	movs	r2, #2
 23fb974:	a801      	add	r0, sp, #4
 23fb976:	f7ff ff6d 	bl	23fb854 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fb97a:	a901      	add	r1, sp, #4
 23fb97c:	4620      	mov	r0, r4
 23fb97e:	f7ff ff19 	bl	23fb7b4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fb982:	a801      	add	r0, sp, #4
 23fb984:	f7ff fab4 	bl	23faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23fb988:	2202      	movs	r2, #2
 23fb98a:	4629      	mov	r1, r5
 23fb98c:	a801      	add	r0, sp, #4
 23fb98e:	f7ff ff61 	bl	23fb854 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fb992:	a901      	add	r1, sp, #4
 23fb994:	4620      	mov	r0, r4
 23fb996:	f7ff ff0d 	bl	23fb7b4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fb99a:	a801      	add	r0, sp, #4
 23fb99c:	f7ff faa8 	bl	23faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
 23fb9a0:	2203      	movs	r2, #3
 23fb9a2:	4629      	mov	r1, r5
 23fb9a4:	a801      	add	r0, sp, #4
 23fb9a6:	f7ff ff55 	bl	23fb854 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fb9aa:	a901      	add	r1, sp, #4
 23fb9ac:	4620      	mov	r0, r4
 23fb9ae:	f7ff ff01 	bl	23fb7b4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fb9b2:	a801      	add	r0, sp, #4
 23fb9b4:	f7ff fa9c 	bl	23faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
 23fb9b8:	2206      	movs	r2, #6
 23fb9ba:	4629      	mov	r1, r5
 23fb9bc:	a801      	add	r0, sp, #4
 23fb9be:	f7ff ff49 	bl	23fb854 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fb9c2:	a901      	add	r1, sp, #4
 23fb9c4:	4620      	mov	r0, r4
 23fb9c6:	f7ff fef5 	bl	23fb7b4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fb9ca:	a801      	add	r0, sp, #4
 23fb9cc:	f7ff fa90 	bl	23faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
 23fb9d0:	2207      	movs	r2, #7
 23fb9d2:	4629      	mov	r1, r5
 23fb9d4:	a801      	add	r0, sp, #4
 23fb9d6:	f7ff ff3d 	bl	23fb854 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fb9da:	4620      	mov	r0, r4
 23fb9dc:	a901      	add	r1, sp, #4
 23fb9de:	f7ff fee9 	bl	23fb7b4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fb9e2:	a801      	add	r0, sp, #4
 23fb9e4:	f7ff fa84 	bl	23faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
 23fb9e8:	4620      	mov	r0, r4
 23fb9ea:	b005      	add	sp, #20
 23fb9ec:	bd30      	pop	{r4, r5, pc}

023fb9ee <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
 23fb9ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fb9f2:	b085      	sub	sp, #20
 23fb9f4:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
 23fb9f6:	4601      	mov	r1, r0
 23fb9f8:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
 23fb9fa:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
 23fb9fc:	f7ff ffb1 	bl	23fb962 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_ + size_;
 23fba00:	f04f 0e14 	mov.w	lr, #20
 23fba04:	2700      	movs	r7, #0
    return data_;
 23fba06:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
 23fba08:	9b02      	ldr	r3, [sp, #8]
 23fba0a:	fb0e 6c03 	mla	ip, lr, r3, r6
    for (const auto& uuid : foundUuids) {
 23fba0e:	45b4      	cmp	ip, r6
 23fba10:	d00d      	beq.n	23fba2e <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
 23fba12:	45b9      	cmp	r9, r7
 23fba14:	f106 0614 	add.w	r6, r6, #20
 23fba18:	d009      	beq.n	23fba2e <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
 23fba1a:	fb0e 8407 	mla	r4, lr, r7, r8
 23fba1e:	f1a6 0514 	sub.w	r5, r6, #20
 23fba22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fba24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fba26:	682b      	ldr	r3, [r5, #0]
 23fba28:	3701      	adds	r7, #1
 23fba2a:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
 23fba2c:	e7ef      	b.n	23fba0e <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
 23fba2e:	a801      	add	r0, sp, #4
 23fba30:	f7ff fa5e 	bl	23faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
 23fba34:	4638      	mov	r0, r7
 23fba36:	b005      	add	sp, #20
 23fba38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fba3c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
 23fba3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fba40:	b08b      	sub	sp, #44	; 0x2c
 23fba42:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fba44:	f100 0144 	add.w	r1, r0, #68	; 0x44
 23fba48:	a801      	add	r0, sp, #4
 23fba4a:	f7ff fe88 	bl	23fb75e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
 23fba4e:	9b02      	ldr	r3, [sp, #8]
 23fba50:	2b00      	cmp	r3, #0
 23fba52:	dd4a      	ble.n	23fbaea <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fba54:	f104 0114 	add.w	r1, r4, #20
 23fba58:	a804      	add	r0, sp, #16
 23fba5a:	f7ff ff82 	bl	23fb962 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fba5e:	f104 0108 	add.w	r1, r4, #8
 23fba62:	a807      	add	r0, sp, #28
 23fba64:	f7ff ff7d 	bl	23fb962 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
 23fba68:	9d05      	ldr	r5, [sp, #20]
 23fba6a:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
 23fba6c:	2d00      	cmp	r5, #0
 23fba6e:	dc01      	bgt.n	23fba74 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
 23fba70:	2e00      	cmp	r6, #0
 23fba72:	dd38      	ble.n	23fbae6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_ + size_;
 23fba74:	2314      	movs	r3, #20
    return data_;
 23fba76:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
 23fba78:	9f02      	ldr	r7, [sp, #8]
 23fba7a:	4692      	mov	sl, r2
    return data_;
 23fba7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 23fba80:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
 23fba84:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
 23fba88:	fb03 8505 	mla	r5, r3, r5, r8
 23fba8c:	fb03 9606 	mla	r6, r3, r6, r9
            for (const auto& uuid : filterServiceUuids) {
 23fba90:	45ba      	cmp	sl, r7
 23fba92:	d028      	beq.n	23fbae6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
 23fba94:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
 23fba96:	45ab      	cmp	fp, r5
 23fba98:	d015      	beq.n	23fbac6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
 23fba9a:	4659      	mov	r1, fp
 23fba9c:	4650      	mov	r0, sl
 23fba9e:	f7fe fe32 	bl	23fa706 <_ZNK8particle7BleUuideqERKS0_>
 23fbaa2:	f10b 0b14 	add.w	fp, fp, #20
 23fbaa6:	4604      	mov	r4, r0
 23fbaa8:	2800      	cmp	r0, #0
 23fbaaa:	d0f4      	beq.n	23fba96 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fbaac:	a807      	add	r0, sp, #28
 23fbaae:	f7ff fa1f 	bl	23faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fbab2:	a804      	add	r0, sp, #16
 23fbab4:	f7ff fa1c 	bl	23faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fbab8:	a801      	add	r0, sp, #4
 23fbaba:	f7ff fa19 	bl	23faef0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
 23fbabe:	4620      	mov	r0, r4
 23fbac0:	b00b      	add	sp, #44	; 0x2c
 23fbac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbac6:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
 23fbac8:	45b3      	cmp	fp, r6
 23fbaca:	d009      	beq.n	23fbae0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
 23fbacc:	4659      	mov	r1, fp
 23fbace:	4650      	mov	r0, sl
 23fbad0:	f7fe fe19 	bl	23fa706 <_ZNK8particle7BleUuideqERKS0_>
 23fbad4:	f10b 0b14 	add.w	fp, fp, #20
 23fbad8:	4604      	mov	r4, r0
 23fbada:	2800      	cmp	r0, #0
 23fbadc:	d0f4      	beq.n	23fbac8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
 23fbade:	e7e5      	b.n	23fbaac <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
 23fbae0:	f10a 0a14 	add.w	sl, sl, #20
 23fbae4:	e7d4      	b.n	23fba90 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
 23fbae6:	2400      	movs	r4, #0
 23fbae8:	e7e0      	b.n	23fbaac <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
 23fbaea:	2401      	movs	r4, #1
 23fbaec:	e7e4      	b.n	23fbab8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

023fbaee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fbaee:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fbaf0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fbaf2:	4605      	mov	r5, r0
        if (n > 0) {
 23fbaf4:	dd11      	ble.n	23fbb1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fbaf6:	00f0      	lsls	r0, r6, #3
 23fbaf8:	f7fe f9bc 	bl	23f9e74 <malloc>
            if (!d) {
 23fbafc:	4604      	mov	r4, r0
 23fbafe:	b158      	cbz	r0, 23fbb18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fbb00:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fbb04:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fbb08:	f7ff fdcb 	bl	23fb6a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fbb0c:	6828      	ldr	r0, [r5, #0]
 23fbb0e:	f7fe f9bf 	bl	23f9e90 <free>
        return true;
 23fbb12:	2001      	movs	r0, #1
        data_ = d;
 23fbb14:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fbb16:	60ae      	str	r6, [r5, #8]
    }
 23fbb18:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fbb1a:	2400      	movs	r4, #0
 23fbb1c:	e7f6      	b.n	23fbb0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fbb1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fbb1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fbb20:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fbb22:	6845      	ldr	r5, [r0, #4]
 23fbb24:	4668      	mov	r0, sp
 23fbb26:	f7ff fa7c 	bl	23fb022 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbb2a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fbb2e:	4299      	cmp	r1, r3
 23fbb30:	da10      	bge.n	23fbb54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fbb32:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fbb34:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fbb36:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fbb3a:	4629      	mov	r1, r5
 23fbb3c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fbb40:	f105 0008 	add.w	r0, r5, #8
 23fbb44:	f7ff fdad 	bl	23fb6a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fbb48:	b98d      	cbnz	r5, 23fbb6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fbb4a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fbb4c:	2601      	movs	r6, #1
    ++size_;
 23fbb4e:	3301      	adds	r3, #1
 23fbb50:	6063      	str	r3, [r4, #4]
    return true;
 23fbb52:	e006      	b.n	23fbb62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbb54:	4620      	mov	r0, r4
 23fbb56:	3101      	adds	r1, #1
 23fbb58:	f7ff ffc9 	bl	23fbaee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fbb5c:	4606      	mov	r6, r0
 23fbb5e:	2800      	cmp	r0, #0
 23fbb60:	d1e7      	bne.n	23fbb32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x14>
 23fbb62:	a801      	add	r0, sp, #4
 23fbb64:	f7fd fa96 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fbb68:	4630      	mov	r0, r6
 23fbb6a:	b002      	add	sp, #8
 23fbb6c:	bd70      	pop	{r4, r5, r6, pc}
 23fbb6e:	4669      	mov	r1, sp
 23fbb70:	4628      	mov	r0, r5
 23fbb72:	f7ff fa56 	bl	23fb022 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fbb76:	e7e8      	b.n	23fbb4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fbb78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fbb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbb7c:	4605      	mov	r5, r0
 23fbb7e:	b090      	sub	sp, #64	; 0x40
        WiringBleLock lk;
 23fbb80:	a805      	add	r0, sp, #20
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fbb82:	460c      	mov	r4, r1
        WiringBleLock lk;
 23fbb84:	f7fe fca6 	bl	23fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
 23fbb88:	682e      	ldr	r6, [r5, #0]
 23fbb8a:	1ef3      	subs	r3, r6, #3
 23fbb8c:	2b0d      	cmp	r3, #13
 23fbb8e:	d86a      	bhi.n	23fbc66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fbb90:	e8df f013 	tbh	[pc, r3, lsl #1]
 23fbb94:	0078000e 	.word	0x0078000e
 23fbb98:	00fe0069 	.word	0x00fe0069
 23fbb9c:	00690069 	.word	0x00690069
 23fbba0:	00690069 	.word	0x00690069
 23fbba4:	00c80069 	.word	0x00c80069
 23fbba8:	00c800c8 	.word	0x00c800c8
 23fbbac:	00c800c8 	.word	0x00c800c8
        return address_;
 23fbbb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    impl->peers_.append(impl->connectingPeer_);
 23fbbb2:	f104 0618 	add.w	r6, r4, #24
                if (impl->connectingPeer_.impl()->address().isValid()) {
 23fbbb6:	3002      	adds	r0, #2
 23fbbb8:	f7fe fcc2 	bl	23fa540 <_ZNK8particle10BleAddress7isValidEv>
 23fbbbc:	b338      	cbz	r0, 23fbc0e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x96>
      { return _M_ptr; }
 23fbbbe:	4621      	mov	r1, r4
                    impl->connectingPeer_.impl()->connHandle() = event->conn_handle;
 23fbbc0:	89aa      	ldrh	r2, [r5, #12]
 23fbbc2:	f851 3f24 	ldr.w	r3, [r1, #36]!
 23fbbc6:	a808      	add	r0, sp, #32
 23fbbc8:	801a      	strh	r2, [r3, #0]
 23fbbca:	f7ff fa2a 	bl	23fb022 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    impl->peers_.append(impl->connectingPeer_);
 23fbbce:	a908      	add	r1, sp, #32
 23fbbd0:	4630      	mov	r0, r6
 23fbbd2:	f7ff ffa4 	bl	23fbb1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fbbd6:	a809      	add	r0, sp, #36	; 0x24
 23fbbd8:	f7fd fa5c 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                    impl->connectingPeer_ = {};
 23fbbdc:	a808      	add	r0, sp, #32
 23fbbde:	f7ff f82f 	bl	23fac40 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fbbe2:	9b08      	ldr	r3, [sp, #32]
 23fbbe4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fbbe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fbbea:	6263      	str	r3, [r4, #36]	; 0x24
 23fbbec:	f7fe fc4d 	bl	23fa48a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23fbbf0:	a809      	add	r0, sp, #36	; 0x24
 23fbbf2:	f7fd fa4f 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
 23fbbf6:	2120      	movs	r1, #32
 23fbbf8:	2300      	movs	r3, #0
 23fbbfa:	e9cd 1308 	strd	r1, r3, [sp, #32]
 23fbbfe:	4a6e      	ldr	r2, [pc, #440]	; (23fbdb8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
                    LOG(TRACE, "Disconnected");
 23fbc00:	9200      	str	r2, [sp, #0]
 23fbc02:	2001      	movs	r0, #1
 23fbc04:	496d      	ldr	r1, [pc, #436]	; (23fbdbc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23fbc06:	aa08      	add	r2, sp, #32
 23fbc08:	f7fd ff90 	bl	23f9b2c <log_message>
 23fbc0c:	e02b      	b.n	23fbc66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    BlePeerDevice peer;
 23fbc0e:	a806      	add	r0, sp, #24
 23fbc10:	f7ff f816 	bl	23fac40 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
 23fbc14:	89aa      	ldrh	r2, [r5, #12]
      { return _M_ptr; }
 23fbc16:	9b06      	ldr	r3, [sp, #24]
 23fbc18:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
 23fbc1a:	6869      	ldr	r1, [r5, #4]
 23fbc1c:	9806      	ldr	r0, [sp, #24]
 23fbc1e:	3108      	adds	r1, #8
 23fbc20:	3002      	adds	r0, #2
 23fbc22:	f7fe fc71 	bl	23fa508 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
 23fbc26:	a906      	add	r1, sp, #24
 23fbc28:	a808      	add	r0, sp, #32
 23fbc2a:	f7ff f9fa 	bl	23fb022 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
 23fbc2e:	4630      	mov	r0, r6
 23fbc30:	a908      	add	r1, sp, #32
 23fbc32:	f7ff ff74 	bl	23fbb1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23fbc36:	4605      	mov	r5, r0
      ~__shared_ptr() = default;
 23fbc38:	a809      	add	r0, sp, #36	; 0x24
 23fbc3a:	f7fd fa2b 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbc3e:	b9c5      	cbnz	r5, 23fbc72 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
                        LOG(TRACE, "Failed to append peer Central device.");
 23fbc40:	2320      	movs	r3, #32
 23fbc42:	e9cd 3508 	strd	r3, r5, [sp, #32]
 23fbc46:	4b5e      	ldr	r3, [pc, #376]	; (23fbdc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x248>)
 23fbc48:	2001      	movs	r0, #1
 23fbc4a:	495c      	ldr	r1, [pc, #368]	; (23fbdbc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23fbc4c:	9300      	str	r3, [sp, #0]
 23fbc4e:	aa08      	add	r2, sp, #32
 23fbc50:	462b      	mov	r3, r5
 23fbc52:	f7fd ff6b 	bl	23f9b2c <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
 23fbc56:	9b06      	ldr	r3, [sp, #24]
 23fbc58:	4629      	mov	r1, r5
 23fbc5a:	8818      	ldrh	r0, [r3, #0]
 23fbc5c:	f7fd fcf0 	bl	23f9640 <hal_ble_gap_disconnect>
 23fbc60:	a807      	add	r0, sp, #28
 23fbc62:	f7fd fa17 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
 23fbc66:	a805      	add	r0, sp, #20
 23fbc68:	f7fe fc42 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
 23fbc6c:	b010      	add	sp, #64	; 0x40
 23fbc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
 23fbc72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23fbc74:	b123      	cbz	r3, 23fbc80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x108>
                        impl->connectedCallback_(peer);
 23fbc76:	a906      	add	r1, sp, #24
 23fbc78:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fbc7c:	f7ff fa90 	bl	23fb1a0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fbc80:	a807      	add	r0, sp, #28
 23fbc82:	e7b6      	b.n	23fbbf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fbc84:	89a9      	ldrh	r1, [r5, #12]
 23fbc86:	4620      	mov	r0, r4
 23fbc88:	f7fe fedb 	bl	23faa42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fbc8c:	4601      	mov	r1, r0
 23fbc8e:	2800      	cmp	r0, #0
 23fbc90:	d0e9      	beq.n	23fbc66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->disconnectingPeer_ == *peer) {
 23fbc92:	9003      	str	r0, [sp, #12]
 23fbc94:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fbc98:	f7ff f823 	bl	23face2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
                    impl->peers_.append(impl->connectingPeer_);
 23fbc9c:	f104 0718 	add.w	r7, r4, #24
                    if (impl->disconnectingPeer_ == *peer) {
 23fbca0:	9903      	ldr	r1, [sp, #12]
 23fbca2:	b140      	cbz	r0, 23fbcb6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
                        impl->peers_.removeOne(*peer);
 23fbca4:	4638      	mov	r0, r7
 23fbca6:	f7ff fd26 	bl	23fb6f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
 23fbcaa:	2220      	movs	r2, #32
 23fbcac:	2300      	movs	r3, #0
 23fbcae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fbcb2:	4a44      	ldr	r2, [pc, #272]	; (23fbdc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x24c>)
 23fbcb4:	e7a4      	b.n	23fbc00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x88>
        connHandle_ = BLE_INVALID_CONN_HANDLE;
 23fbcb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
      { return _M_ptr; }
 23fbcba:	680d      	ldr	r5, [r1, #0]
    return data_ + size_;
 23fbcbc:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 23fbcc0:	8028      	strh	r0, [r5, #0]
 23fbcc2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
 23fbcc6:	429a      	cmp	r2, r3
 23fbcc8:	d003      	beq.n	23fbcd2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15a>
 23fbcca:	f853 6b08 	ldr.w	r6, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fbcce:	8070      	strh	r0, [r6, #2]
        for (auto& characteristic : characteristics()) {
 23fbcd0:	e7f9      	b.n	23fbcc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    destruct(data_, data_ + size_);
 23fbcd2:	e9d5 6303 	ldrd	r6, r3, [r5, #12]
 23fbcd6:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; p != end; ++p) {
 23fbcda:	45b0      	cmp	r8, r6
 23fbcdc:	d006      	beq.n	23fbcec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x174>
      ~__shared_ptr() = default;
 23fbcde:	1d30      	adds	r0, r6, #4
 23fbce0:	9103      	str	r1, [sp, #12]
 23fbce2:	3608      	adds	r6, #8
 23fbce4:	f7fd f9d6 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbce8:	9903      	ldr	r1, [sp, #12]
 23fbcea:	e7f6      	b.n	23fbcda <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x162>
    size_ = 0;
 23fbcec:	2300      	movs	r3, #0
 23fbcee:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
 23fbcf0:	e9d5 6306 	ldrd	r6, r3, [r5, #24]
 23fbcf4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; p != end; ++p) {
 23fbcf8:	45b0      	cmp	r8, r6
 23fbcfa:	d006      	beq.n	23fbd0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x192>
 23fbcfc:	1d30      	adds	r0, r6, #4
 23fbcfe:	9103      	str	r1, [sp, #12]
 23fbd00:	3608      	adds	r6, #8
 23fbd02:	f7fd f9c7 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbd06:	9903      	ldr	r1, [sp, #12]
 23fbd08:	e7f6      	b.n	23fbcf8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x180>
    size_ = 0;
 23fbd0a:	2300      	movs	r3, #0
 23fbd0c:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
 23fbd0e:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
 23fbd10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23fbd12:	2b00      	cmp	r3, #0
 23fbd14:	d0c6      	beq.n	23fbca4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                            impl->disconnectedCallback_(*peer);
 23fbd16:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fbd1a:	9103      	str	r1, [sp, #12]
 23fbd1c:	f7ff fa40 	bl	23fb1a0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fbd20:	9903      	ldr	r1, [sp, #12]
 23fbd22:	e7bf      	b.n	23fbca4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fbd24:	4620      	mov	r0, r4
 23fbd26:	89a9      	ldrh	r1, [r5, #12]
 23fbd28:	f7fe fe8b 	bl	23faa42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fbd2c:	2800      	cmp	r0, #0
 23fbd2e:	d09a      	beq.n	23fbc66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->pairingEventCallback_) {
 23fbd30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 23fbd32:	2b00      	cmp	r3, #0
 23fbd34:	d097      	beq.n	23fbc66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        BlePairingEventPayload payload = {};
 23fbd36:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fbd38:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
 23fbd3a:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fbd3e:	d001      	beq.n	23fbd44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1cc>
 23fbd40:	2e10      	cmp	r6, #16
 23fbd42:	d117      	bne.n	23fbd74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1fc>
                        BlePairingEventPayload payload = {};
 23fbd44:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
 23fbd46:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
 23fbd48:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
 23fbd4a:	2506      	movs	r5, #6
                        };
 23fbd4c:	f88d 301d 	strb.w	r3, [sp, #29]
 23fbd50:	9106      	str	r1, [sp, #24]
 23fbd52:	ab0b      	add	r3, sp, #44	; 0x2c
 23fbd54:	f88d 201c 	strb.w	r2, [sp, #28]
 23fbd58:	9008      	str	r0, [sp, #32]
                            .type = static_cast<BlePairingEventType>(event->type),
 23fbd5a:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
                        };
 23fbd5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 23fbd62:	950a      	str	r5, [sp, #40]	; 0x28
 23fbd64:	e883 0003 	stmia.w	r3, {r0, r1}
 23fbd68:	6e23      	ldr	r3, [r4, #96]	; 0x60
 23fbd6a:	a908      	add	r1, sp, #32
 23fbd6c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fbd70:	4798      	blx	r3
 23fbd72:	e778      	b.n	23fbc66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
 23fbd74:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fbd76:	bf01      	itttt	eq
 23fbd78:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
 23fbd7a:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fbd7c:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fbd80:	2508      	moveq	r5, #8
                        BlePairingEventPayload payload = {};
 23fbd82:	bf1d      	ittte	ne
 23fbd84:	461a      	movne	r2, r3
 23fbd86:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
 23fbd88:	461d      	movne	r5, r3
                            payload.status.lesc = event->params.pairing_status.lesc;
 23fbd8a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fbd8e:	e7dd      	b.n	23fbd4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1d4>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fbd90:	89a9      	ldrh	r1, [r5, #12]
 23fbd92:	4620      	mov	r0, r4
 23fbd94:	f7fe fe55 	bl	23faa42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
 23fbd98:	4601      	mov	r1, r0
 23fbd9a:	2800      	cmp	r0, #0
 23fbd9c:	f43f af63 	beq.w	23fbc66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fbda0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 23fbda2:	2b00      	cmp	r3, #0
 23fbda4:	f43f af5f 	beq.w	23fbc66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
 23fbda8:	686b      	ldr	r3, [r5, #4]
 23fbdaa:	aa08      	add	r2, sp, #32
 23fbdac:	9308      	str	r3, [sp, #32]
 23fbdae:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23fbdb2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 23fbdb4:	4798      	blx	r3
 23fbdb6:	e756      	b.n	23fbc66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fbdb8:	023ff958 	.word	0x023ff958
 23fbdbc:	023ff88f 	.word	0x023ff88f
 23fbdc0:	023ff932 	.word	0x023ff932
 23fbdc4:	023ff962 	.word	0x023ff962

023fbdc8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 23fbdc8:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbdca:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fbdcc:	460b      	mov	r3, r1
 23fbdce:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbdd0:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fbdd4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fbdd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fbddc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fbde0:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fbde4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fbde8:	b002      	add	sp, #8
 23fbdea:	bd10      	pop	{r4, pc}

023fbdec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
 23fbdec:	b538      	push	{r3, r4, r5, lr}
 23fbdee:	4605      	mov	r5, r0
 23fbdf0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
 23fbdf2:	f7ff ffe9 	bl	23fbdc8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbdf6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fbdf8:	68a2      	ldr	r2, [r4, #8]
 23fbdfa:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbdfc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbdfe:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fbe00:	68e2      	ldr	r2, [r4, #12]
 23fbe02:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbe04:	60e3      	str	r3, [r4, #12]
      }
 23fbe06:	bd38      	pop	{r3, r4, r5, pc}

023fbe08 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
    _Function_base() : _M_manager(nullptr) { }
 23fbe08:	2300      	movs	r3, #0
      operator=(const function& __x)
 23fbe0a:	b530      	push	{r4, r5, lr}
 23fbe0c:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
 23fbe0e:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23fbe10:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
 23fbe12:	4605      	mov	r5, r0
 23fbe14:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23fbe16:	b133      	cbz	r3, 23fbe26 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fbe18:	2202      	movs	r2, #2
 23fbe1a:	4668      	mov	r0, sp
 23fbe1c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fbe1e:	68e3      	ldr	r3, [r4, #12]
 23fbe20:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23fbe22:	68a3      	ldr	r3, [r4, #8]
 23fbe24:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
 23fbe26:	4629      	mov	r1, r5
 23fbe28:	4668      	mov	r0, sp
 23fbe2a:	f7ff ffdf 	bl	23fbdec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
 23fbe2e:	4668      	mov	r0, sp
 23fbe30:	f7fe f8ef 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
      }
 23fbe34:	b005      	add	sp, #20
 23fbe36:	bd30      	pop	{r4, r5, pc}

023fbe38 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
 23fbe38:	b538      	push	{r3, r4, r5, lr}
 23fbe3a:	460d      	mov	r5, r1
      { return _M_ptr; }
 23fbe3c:	6801      	ldr	r1, [r0, #0]
 23fbe3e:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
 23fbe40:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 23fbe42:	b123      	cbz	r3, 23fbe4e <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
 23fbe44:	6828      	ldr	r0, [r5, #0]
 23fbe46:	314c      	adds	r1, #76	; 0x4c
 23fbe48:	304c      	adds	r0, #76	; 0x4c
 23fbe4a:	f7ff ffdd 	bl	23fbe08 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fbe4e:	4620      	mov	r0, r4
 23fbe50:	682b      	ldr	r3, [r5, #0]
 23fbe52:	f840 3b04 	str.w	r3, [r0], #4
 23fbe56:	6869      	ldr	r1, [r5, #4]
 23fbe58:	f7fe fb17 	bl	23fa48a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
 23fbe5c:	4620      	mov	r0, r4
 23fbe5e:	bd38      	pop	{r3, r4, r5, pc}

023fbe60 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
 23fbe60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fbe64:	4604      	mov	r4, r0
 23fbe66:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fbe68:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
 23fbe6a:	460e      	mov	r6, r1
 23fbe6c:	4617      	mov	r7, r2
    WiringBleLock lk;
 23fbe6e:	f7fe fb31 	bl	23fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fbe72:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
 23fbe74:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
 23fbe78:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
 23fbe7c:	4544      	cmp	r4, r8
 23fbe7e:	46a1      	mov	r9, r4
 23fbe80:	d016      	beq.n	23fbeb0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
 23fbe82:	4621      	mov	r1, r4
 23fbe84:	a801      	add	r0, sp, #4
 23fbe86:	f7fe fe07 	bl	23faa98 <_ZNK8particle17BleCharacteristic4UUIDEv>
 23fbe8a:	4639      	mov	r1, r7
 23fbe8c:	a801      	add	r0, sp, #4
 23fbe8e:	f7fe fc3a 	bl	23fa706 <_ZNK8particle7BleUuideqERKS0_>
 23fbe92:	3408      	adds	r4, #8
 23fbe94:	4605      	mov	r5, r0
 23fbe96:	2800      	cmp	r0, #0
 23fbe98:	d0f0      	beq.n	23fbe7c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
 23fbe9a:	4649      	mov	r1, r9
 23fbe9c:	4630      	mov	r0, r6
 23fbe9e:	f7ff ffcb 	bl	23fbe38 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
 23fbea2:	4668      	mov	r0, sp
 23fbea4:	f7fe fb24 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fbea8:	4628      	mov	r0, r5
 23fbeaa:	b007      	add	sp, #28
 23fbeac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
 23fbeb0:	2500      	movs	r5, #0
 23fbeb2:	e7f6      	b.n	23fbea2 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

023fbeb4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
 23fbeb4:	b510      	push	{r4, lr}
 23fbeb6:	6804      	ldr	r4, [r0, #0]
 23fbeb8:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
 23fbeba:	b1c1      	cbz	r1, 23fbeee <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
 23fbebc:	e9cd 1200 	strd	r1, r2, [sp]
 23fbec0:	a802      	add	r0, sp, #8
 23fbec2:	4669      	mov	r1, sp
 23fbec4:	f7ff f876 	bl	23fafb4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
 23fbec8:	2300      	movs	r3, #0
	__x.swap(*this);
 23fbeca:	a906      	add	r1, sp, #24
 23fbecc:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
 23fbece:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
 23fbed0:	f7ff ff8c 	bl	23fbdec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
 23fbed4:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 23fbed8:	a806      	add	r0, sp, #24
 23fbeda:	f7ff ff87 	bl	23fbdec <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
 23fbede:	a806      	add	r0, sp, #24
 23fbee0:	f7fe f897 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
 23fbee4:	a802      	add	r0, sp, #8
 23fbee6:	f7fe f894 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
}
 23fbeea:	b00a      	add	sp, #40	; 0x28
 23fbeec:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
 23fbeee:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
 23fbef0:	e7ea      	b.n	23fbec8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x14>

023fbef2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fbef2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fbef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbef6:	4604      	mov	r4, r0
 23fbef8:	460d      	mov	r5, r1
 23fbefa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fbefc:	d914      	bls.n	23fbf28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fbefe:	4290      	cmp	r0, r2
 23fbf00:	d213      	bcs.n	23fbf2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fbf02:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fbf06:	1a75      	subs	r5, r6, r1
 23fbf08:	f1a1 0708 	sub.w	r7, r1, #8
 23fbf0c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fbf0e:	42b7      	cmp	r7, r6
 23fbf10:	d018      	beq.n	23fbf44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fbf12:	b11c      	cbz	r4, 23fbf1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fbf14:	4631      	mov	r1, r6
 23fbf16:	4620      	mov	r0, r4
 23fbf18:	f7ff f879 	bl	23fb00e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23fbf1c:	1d30      	adds	r0, r6, #4
 23fbf1e:	f7fd f8b9 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fbf22:	3e08      	subs	r6, #8
 23fbf24:	3c08      	subs	r4, #8
 23fbf26:	e7f2      	b.n	23fbf0e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fbf28:	d00c      	beq.n	23fbf44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fbf2a:	42b5      	cmp	r5, r6
 23fbf2c:	d00a      	beq.n	23fbf44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fbf2e:	b11c      	cbz	r4, 23fbf38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fbf30:	4629      	mov	r1, r5
 23fbf32:	4620      	mov	r0, r4
 23fbf34:	f7ff f86b 	bl	23fb00e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fbf38:	1d28      	adds	r0, r5, #4
 23fbf3a:	f7fd f8ab 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fbf3e:	3508      	adds	r5, #8
 23fbf40:	3408      	adds	r4, #8
 23fbf42:	e7f2      	b.n	23fbf2a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fbf44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbf46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fbf46:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fbf48:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fbf4a:	4605      	mov	r5, r0
        if (n > 0) {
 23fbf4c:	dd11      	ble.n	23fbf72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fbf4e:	00f0      	lsls	r0, r6, #3
 23fbf50:	f7fd ff90 	bl	23f9e74 <malloc>
            if (!d) {
 23fbf54:	4604      	mov	r4, r0
 23fbf56:	b158      	cbz	r0, 23fbf70 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fbf58:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fbf5c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fbf60:	f7ff ffc7 	bl	23fbef2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fbf64:	6828      	ldr	r0, [r5, #0]
 23fbf66:	f7fd ff93 	bl	23f9e90 <free>
        return true;
 23fbf6a:	2001      	movs	r0, #1
        data_ = d;
 23fbf6c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fbf6e:	60ae      	str	r6, [r5, #8]
    }
 23fbf70:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fbf72:	2400      	movs	r4, #0
 23fbf74:	e7f6      	b.n	23fbf64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fbf76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23fbf76:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fbf7c:	e9c0 3300 	strd	r3, r3, [r0]
 23fbf80:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf82:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf84:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf86:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf88:	4299      	cmp	r1, r3
 23fbf8a:	dd13      	ble.n	23fbfb4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
 23fbf8c:	f7ff ffdb 	bl	23fbf46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fbf90:	b180      	cbz	r0, 23fbfb4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fbf92:	e9d5 6300 	ldrd	r6, r3, [r5]
 23fbf96:	6827      	ldr	r7, [r4, #0]
 23fbf98:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
 23fbf9c:	45b0      	cmp	r8, r6
 23fbf9e:	d007      	beq.n	23fbfb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
 23fbfa0:	b11f      	cbz	r7, 23fbfaa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
 23fbfa2:	4631      	mov	r1, r6
 23fbfa4:	4638      	mov	r0, r7
 23fbfa6:	f7ff f832 	bl	23fb00e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
 23fbfaa:	3608      	adds	r6, #8
 23fbfac:	3708      	adds	r7, #8
 23fbfae:	e7f5      	b.n	23fbf9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
 23fbfb0:	686b      	ldr	r3, [r5, #4]
 23fbfb2:	6063      	str	r3, [r4, #4]
}
 23fbfb4:	4620      	mov	r0, r4
 23fbfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbfba <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
 23fbfba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbfbc:	460d      	mov	r5, r1
 23fbfbe:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fbfc0:	a801      	add	r0, sp, #4
 23fbfc2:	f7fe fa87 	bl	23fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
 23fbfc6:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
 23fbfc8:	4620      	mov	r0, r4
 23fbfca:	310c      	adds	r1, #12
 23fbfcc:	f7ff ffd3 	bl	23fbf76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
 23fbfd0:	a801      	add	r0, sp, #4
 23fbfd2:	f7fe fa8d 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fbfd6:	4620      	mov	r0, r4
 23fbfd8:	b003      	add	sp, #12
 23fbfda:	bd30      	pop	{r4, r5, pc}

023fbfdc <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fbfdc:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
 23fbfde:	680b      	ldr	r3, [r1, #0]
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fbfe0:	4605      	mov	r5, r0
    if (!impl()->servicesDiscovered()) {
 23fbfe2:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fbfe4:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
 23fbfe6:	b933      	cbnz	r3, 23fbff6 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
 23fbfe8:	4608      	mov	r0, r1
 23fbfea:	f7fe fa07 	bl	23fa3fc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
 23fbfee:	b910      	cbnz	r0, 23fbff6 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        servicesDiscovered_ = discovered;
 23fbff0:	2201      	movs	r2, #1
      { return _M_ptr; }
 23fbff2:	6823      	ldr	r3, [r4, #0]
 23fbff4:	729a      	strb	r2, [r3, #10]
    return services();
 23fbff6:	4628      	mov	r0, r5
 23fbff8:	4621      	mov	r1, r4
 23fbffa:	f7ff ffde 	bl	23fbfba <_ZNK8particle13BlePeerDevice8servicesEv>
}
 23fbffe:	4628      	mov	r0, r5
 23fc000:	bd38      	pop	{r3, r4, r5, pc}

023fc002 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc004:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fc006:	6845      	ldr	r5, [r0, #4]
 23fc008:	4668      	mov	r0, sp
 23fc00a:	f7ff f800 	bl	23fb00e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc00e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fc012:	4299      	cmp	r1, r3
 23fc014:	da10      	bge.n	23fc038 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fc016:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fc018:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc01a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fc01e:	4629      	mov	r1, r5
 23fc020:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fc024:	f105 0008 	add.w	r0, r5, #8
 23fc028:	f7ff ff63 	bl	23fbef2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fc02c:	b98d      	cbnz	r5, 23fc052 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fc02e:	6863      	ldr	r3, [r4, #4]
    return true;
 23fc030:	2601      	movs	r6, #1
    ++size_;
 23fc032:	3301      	adds	r3, #1
 23fc034:	6063      	str	r3, [r4, #4]
    return true;
 23fc036:	e006      	b.n	23fc046 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc038:	4620      	mov	r0, r4
 23fc03a:	3101      	adds	r1, #1
 23fc03c:	f7ff ff83 	bl	23fbf46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc040:	4606      	mov	r6, r0
 23fc042:	2800      	cmp	r0, #0
 23fc044:	d1e7      	bne.n	23fc016 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
 23fc046:	a801      	add	r0, sp, #4
 23fc048:	f7fd f824 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc04c:	4630      	mov	r0, r6
 23fc04e:	b002      	add	sp, #8
 23fc050:	bd70      	pop	{r4, r5, r6, pc}
 23fc052:	4669      	mov	r1, sp
 23fc054:	4628      	mov	r0, r5
 23fc056:	f7fe ffda 	bl	23fb00e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fc05a:	e7e8      	b.n	23fc02e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fc05c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
 23fc05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc060:	4605      	mov	r5, r0
 23fc062:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
 23fc064:	2700      	movs	r7, #0
                LOG(ERROR, "Failed to append discovered service.");
 23fc066:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 23fc11c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
 23fc06a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 23fc120 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
 23fc06e:	b093      	sub	sp, #76	; 0x4c
        for (size_t i = 0; i < event->count; i++) {
 23fc070:	682b      	ldr	r3, [r5, #0]
 23fc072:	42bb      	cmp	r3, r7
 23fc074:	d94e      	bls.n	23fc114 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
 23fc076:	261c      	movs	r6, #28
 23fc078:	a803      	add	r0, sp, #12
 23fc07a:	f7fe fdc5 	bl	23fac08 <_ZN8particle10BleServiceC1Ev>
            service.impl()->UUID() = event->services[i].uuid;
 23fc07e:	f10d 0c14 	add.w	ip, sp, #20
 23fc082:	46e3      	mov	fp, ip
 23fc084:	437e      	muls	r6, r7
      get() const noexcept
 23fc086:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
 23fc088:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
 23fc08a:	4432      	add	r2, r6
 23fc08c:	1d13      	adds	r3, r2, #4
 23fc08e:	3214      	adds	r2, #20
 23fc090:	46e6      	mov	lr, ip
 23fc092:	6818      	ldr	r0, [r3, #0]
 23fc094:	6859      	ldr	r1, [r3, #4]
 23fc096:	3308      	adds	r3, #8
 23fc098:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 23fc09c:	4293      	cmp	r3, r2
 23fc09e:	46f4      	mov	ip, lr
 23fc0a0:	d1f6      	bne.n	23fc090 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
 23fc0a2:	6818      	ldr	r0, [r3, #0]
        return *this = BleUuid(uuid);
 23fc0a4:	4659      	mov	r1, fp
 23fc0a6:	f8ce 0000 	str.w	r0, [lr]
 23fc0aa:	a80a      	add	r0, sp, #40	; 0x28
 23fc0ac:	f7fe fae0 	bl	23fa670 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
 23fc0b0:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 23fc0b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fc0b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc0ba:	f8dc 3000 	ldr.w	r3, [ip]
 23fc0be:	9a03      	ldr	r2, [sp, #12]
 23fc0c0:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
 23fc0c2:	686b      	ldr	r3, [r5, #4]
 23fc0c4:	a903      	add	r1, sp, #12
 23fc0c6:	4433      	add	r3, r6
 23fc0c8:	8b1b      	ldrh	r3, [r3, #24]
 23fc0ca:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
 23fc0cc:	686b      	ldr	r3, [r5, #4]
 23fc0ce:	4433      	add	r3, r6
 23fc0d0:	8b5b      	ldrh	r3, [r3, #26]
 23fc0d2:	82d3      	strh	r3, [r2, #22]
        return services_;
 23fc0d4:	f8d8 0000 	ldr.w	r0, [r8]
 23fc0d8:	f100 040c 	add.w	r4, r0, #12
 23fc0dc:	a80a      	add	r0, sp, #40	; 0x28
 23fc0de:	f7fe ff96 	bl	23fb00e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
 23fc0e2:	4620      	mov	r0, r4
 23fc0e4:	a90a      	add	r1, sp, #40	; 0x28
 23fc0e6:	f7ff ff8c 	bl	23fc002 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
 23fc0ea:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fc0ec:	a80b      	add	r0, sp, #44	; 0x2c
 23fc0ee:	f7fc ffd1 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc0f2:	b954      	cbnz	r4, 23fc10a <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
 23fc0f4:	2320      	movs	r3, #32
 23fc0f6:	4651      	mov	r1, sl
 23fc0f8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 23fc0fc:	2032      	movs	r0, #50	; 0x32
 23fc0fe:	4623      	mov	r3, r4
 23fc100:	f8cd 9000 	str.w	r9, [sp]
 23fc104:	aa0a      	add	r2, sp, #40	; 0x28
 23fc106:	f7fd fd11 	bl	23f9b2c <log_message>
 23fc10a:	a804      	add	r0, sp, #16
 23fc10c:	f7fc ffc2 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
 23fc110:	3701      	adds	r7, #1
 23fc112:	e7ad      	b.n	23fc070 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
 23fc114:	b013      	add	sp, #76	; 0x4c
 23fc116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc11a:	bf00      	nop
 23fc11c:	023ff96f 	.word	0x023ff96f
 23fc120:	023ff88f 	.word	0x023ff88f

023fc124 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fc124:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc128:	4604      	mov	r4, r0
 23fc12a:	460d      	mov	r5, r1
 23fc12c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc12e:	d914      	bls.n	23fc15a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fc130:	4290      	cmp	r0, r2
 23fc132:	d213      	bcs.n	23fc15c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fc134:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fc138:	1a75      	subs	r5, r6, r1
 23fc13a:	f1a1 0708 	sub.w	r7, r1, #8
 23fc13e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc140:	42b7      	cmp	r7, r6
 23fc142:	d018      	beq.n	23fc176 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fc144:	b11c      	cbz	r4, 23fc14e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fc146:	4631      	mov	r1, r6
 23fc148:	4620      	mov	r0, r4
 23fc14a:	f7fe ff52 	bl	23faff2 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fc14e:	1d30      	adds	r0, r6, #4
 23fc150:	f7fc ffa0 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fc154:	3e08      	subs	r6, #8
 23fc156:	3c08      	subs	r4, #8
 23fc158:	e7f2      	b.n	23fc140 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fc15a:	d00c      	beq.n	23fc176 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fc15c:	42b5      	cmp	r5, r6
 23fc15e:	d00a      	beq.n	23fc176 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fc160:	b11c      	cbz	r4, 23fc16a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fc162:	4629      	mov	r1, r5
 23fc164:	4620      	mov	r0, r4
 23fc166:	f7fe ff44 	bl	23faff2 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fc16a:	1d28      	adds	r0, r5, #4
 23fc16c:	f7fc ff92 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fc170:	3508      	adds	r5, #8
 23fc172:	3408      	adds	r4, #8
 23fc174:	e7f2      	b.n	23fc15c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fc176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc178 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fc178:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fc17a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fc17c:	4605      	mov	r5, r0
        if (n > 0) {
 23fc17e:	dd11      	ble.n	23fc1a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fc180:	00f0      	lsls	r0, r6, #3
 23fc182:	f7fd fe77 	bl	23f9e74 <malloc>
            if (!d) {
 23fc186:	4604      	mov	r4, r0
 23fc188:	b158      	cbz	r0, 23fc1a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fc18a:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fc18e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fc192:	f7ff ffc7 	bl	23fc124 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fc196:	6828      	ldr	r0, [r5, #0]
 23fc198:	f7fd fe7a 	bl	23f9e90 <free>
        return true;
 23fc19c:	2001      	movs	r0, #1
        data_ = d;
 23fc19e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fc1a0:	60ae      	str	r6, [r5, #8]
    }
 23fc1a2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fc1a4:	2400      	movs	r4, #0
 23fc1a6:	e7f6      	b.n	23fc196 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fc1a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23fc1a8:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fc1ae:	e9c0 3300 	strd	r3, r3, [r0]
 23fc1b2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc1b4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc1b6:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc1b8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc1ba:	4299      	cmp	r1, r3
 23fc1bc:	dd13      	ble.n	23fc1e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
 23fc1be:	f7ff ffdb 	bl	23fc178 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc1c2:	b180      	cbz	r0, 23fc1e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc1c4:	e9d5 6300 	ldrd	r6, r3, [r5]
 23fc1c8:	6827      	ldr	r7, [r4, #0]
 23fc1ca:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
 23fc1ce:	45b0      	cmp	r8, r6
 23fc1d0:	d007      	beq.n	23fc1e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
 23fc1d2:	b11f      	cbz	r7, 23fc1dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
 23fc1d4:	4631      	mov	r1, r6
 23fc1d6:	4638      	mov	r0, r7
 23fc1d8:	f7fe ff0b 	bl	23faff2 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
 23fc1dc:	3608      	adds	r6, #8
 23fc1de:	3708      	adds	r7, #8
 23fc1e0:	e7f5      	b.n	23fc1ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
 23fc1e2:	686b      	ldr	r3, [r5, #4]
 23fc1e4:	6063      	str	r3, [r4, #4]
}
 23fc1e6:	4620      	mov	r0, r4
 23fc1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc1ec <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
 23fc1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc1ee:	460d      	mov	r5, r1
 23fc1f0:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fc1f2:	a801      	add	r0, sp, #4
 23fc1f4:	f7fe f96e 	bl	23fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
 23fc1f8:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
 23fc1fa:	4620      	mov	r0, r4
 23fc1fc:	3118      	adds	r1, #24
 23fc1fe:	f7ff ffd3 	bl	23fc1a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
 23fc202:	a801      	add	r0, sp, #4
 23fc204:	f7fe f974 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fc208:	4620      	mov	r0, r4
 23fc20a:	b003      	add	sp, #12
 23fc20c:	bd30      	pop	{r4, r5, pc}

023fc20e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc20e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc210:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fc212:	6845      	ldr	r5, [r0, #4]
 23fc214:	4668      	mov	r0, sp
 23fc216:	f7fe feec 	bl	23faff2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc21a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fc21e:	4299      	cmp	r1, r3
 23fc220:	da10      	bge.n	23fc244 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fc222:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fc224:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc226:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fc22a:	4629      	mov	r1, r5
 23fc22c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fc230:	f105 0008 	add.w	r0, r5, #8
 23fc234:	f7ff ff76 	bl	23fc124 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fc238:	b98d      	cbnz	r5, 23fc25e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fc23a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fc23c:	2601      	movs	r6, #1
    ++size_;
 23fc23e:	3301      	adds	r3, #1
 23fc240:	6063      	str	r3, [r4, #4]
    return true;
 23fc242:	e006      	b.n	23fc252 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc244:	4620      	mov	r0, r4
 23fc246:	3101      	adds	r1, #1
 23fc248:	f7ff ff96 	bl	23fc178 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc24c:	4606      	mov	r6, r0
 23fc24e:	2800      	cmp	r0, #0
 23fc250:	d1e7      	bne.n	23fc222 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
 23fc252:	a801      	add	r0, sp, #4
 23fc254:	f7fc ff1e 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc258:	4630      	mov	r0, r6
 23fc25a:	b002      	add	sp, #8
 23fc25c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
 23fc25e:	4669      	mov	r1, sp
 23fc260:	4628      	mov	r0, r5
 23fc262:	f7fe fec6 	bl	23faff2 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fc266:	e7e8      	b.n	23fc23a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fc268 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
 23fc268:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc26a:	b085      	sub	sp, #20
 23fc26c:	4605      	mov	r5, r0
    WiringBleLock lk;
 23fc26e:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
 23fc270:	460c      	mov	r4, r1
 23fc272:	4617      	mov	r7, r2
    WiringBleLock lk;
 23fc274:	f7fe f92e 	bl	23fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
 23fc278:	2300      	movs	r3, #0
 23fc27a:	e9c5 3300 	strd	r3, r3, [r5]
 23fc27e:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
 23fc280:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
 23fc282:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
 23fc286:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
 23fc28a:	42b4      	cmp	r4, r6
 23fc28c:	d011      	beq.n	23fc2b2 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
 23fc28e:	4621      	mov	r1, r4
 23fc290:	6838      	ldr	r0, [r7, #0]
 23fc292:	f7fe fbc1 	bl	23faa18 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
 23fc296:	b150      	cbz	r0, 23fc2ae <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
 23fc298:	4621      	mov	r1, r4
 23fc29a:	a802      	add	r0, sp, #8
 23fc29c:	f7fe fea9 	bl	23faff2 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fc2a0:	4628      	mov	r0, r5
 23fc2a2:	a902      	add	r1, sp, #8
 23fc2a4:	f7ff ffb3 	bl	23fc20e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fc2a8:	a803      	add	r0, sp, #12
 23fc2aa:	f7fc fef3 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
 23fc2ae:	3408      	adds	r4, #8
 23fc2b0:	e7eb      	b.n	23fc28a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
 23fc2b2:	a801      	add	r0, sp, #4
 23fc2b4:	f7fe f91c 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fc2b8:	4628      	mov	r0, r5
 23fc2ba:	b005      	add	sp, #20
 23fc2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fc2c0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fc2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
 23fc2c4:	680b      	ldr	r3, [r1, #0]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fc2c6:	4606      	mov	r6, r0
    if (!impl()->servicesDiscovered()) {
 23fc2c8:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fc2ca:	460f      	mov	r7, r1
 23fc2cc:	4690      	mov	r8, r2
 23fc2ce:	b091      	sub	sp, #68	; 0x44
    if (!impl()->servicesDiscovered()) {
 23fc2d0:	b933      	cbnz	r3, 23fc2e0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
 23fc2d2:	e9c0 3300 	strd	r3, r3, [r0]
 23fc2d6:	6083      	str	r3, [r0, #8]
}
 23fc2d8:	4630      	mov	r0, r6
 23fc2da:	b011      	add	sp, #68	; 0x44
 23fc2dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
 23fc2e0:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
 23fc2e2:	7e0d      	ldrb	r5, [r1, #24]
 23fc2e4:	2d00      	cmp	r5, #0
 23fc2e6:	d158      	bne.n	23fc39a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
 23fc2e8:	2320      	movs	r3, #32
 23fc2ea:	462a      	mov	r2, r5
 23fc2ec:	a803      	add	r0, sp, #12
 23fc2ee:	e9cd 3508 	strd	r3, r5, [sp, #32]
 23fc2f2:	f7fe fb04 	bl	23fa8fe <_ZNK8particle7BleUuid8toStringEb>
 23fc2f6:	9b03      	ldr	r3, [sp, #12]
 23fc2f8:	492b      	ldr	r1, [pc, #172]	; (23fc3a8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
 23fc2fa:	9301      	str	r3, [sp, #4]
 23fc2fc:	4b2b      	ldr	r3, [pc, #172]	; (23fc3ac <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
 23fc2fe:	aa08      	add	r2, sp, #32
 23fc300:	2001      	movs	r0, #1
 23fc302:	9300      	str	r3, [sp, #0]
 23fc304:	462b      	mov	r3, r5
 23fc306:	f7fd fc11 	bl	23f9b2c <log_message>
 23fc30a:	a803      	add	r0, sp, #12
 23fc30c:	f7fd fe9c 	bl	23fa048 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
 23fc310:	231c      	movs	r3, #28
 23fc312:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 23fc316:	f8d8 3000 	ldr.w	r3, [r8]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fc31a:	a908      	add	r1, sp, #32
        halService.start_handle = service.impl()->startHandle();
 23fc31c:	8a9a      	ldrh	r2, [r3, #20]
 23fc31e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
 23fc322:	8adb      	ldrh	r3, [r3, #22]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fc324:	4a22      	ldr	r2, [pc, #136]	; (23fc3b0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
        halService.end_handle = service.impl()->endHandle();
 23fc326:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 23fc32a:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fc32c:	8818      	ldrh	r0, [r3, #0]
 23fc32e:	9500      	str	r5, [sp, #0]
 23fc330:	f7fd f9b0 	bl	23f9694 <hal_ble_gatt_client_discover_characteristics>
 23fc334:	2800      	cmp	r0, #0
 23fc336:	db30      	blt.n	23fc39a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
 23fc338:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
 23fc33a:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
 23fc33e:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 23fc342:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
 23fc344:	f1a4 0308 	sub.w	r3, r4, #8
 23fc348:	4599      	cmp	r9, r3
 23fc34a:	d022      	beq.n	23fc392 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
 23fc34c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23fc350:	89db      	ldrh	r3, [r3, #14]
 23fc352:	2b00      	cmp	r3, #0
 23fc354:	d0f5      	beq.n	23fc342 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
 23fc356:	2210      	movs	r2, #16
 23fc358:	2100      	movs	r1, #0
 23fc35a:	eb0d 0002 	add.w	r0, sp, r2
 23fc35e:	9503      	str	r5, [sp, #12]
 23fc360:	f002 ff4d 	bl	23ff1fe <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
 23fc364:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23fc368:	aa03      	add	r2, sp, #12
 23fc36a:	89d9      	ldrh	r1, [r3, #14]
 23fc36c:	683b      	ldr	r3, [r7, #0]
 23fc36e:	8818      	ldrh	r0, [r3, #0]
 23fc370:	2313      	movs	r3, #19
 23fc372:	9500      	str	r5, [sp, #0]
 23fc374:	f7fd f9b8 	bl	23f96e8 <hal_ble_gatt_client_read>
                if (len > 0) {
 23fc378:	2800      	cmp	r0, #0
 23fc37a:	d0e2      	beq.n	23fc342 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
 23fc37c:	ab10      	add	r3, sp, #64	; 0x40
 23fc37e:	4418      	add	r0, r3
 23fc380:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
 23fc384:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
 23fc388:	a903      	add	r1, sp, #12
 23fc38a:	303c      	adds	r0, #60	; 0x3c
 23fc38c:	f7fd ff12 	bl	23fa1b4 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
 23fc390:	e7d7      	b.n	23fc342 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
        characteristicsDiscovered_ = discovered;
 23fc392:	2201      	movs	r2, #1
 23fc394:	f8d8 3000 	ldr.w	r3, [r8]
 23fc398:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
 23fc39a:	4642      	mov	r2, r8
 23fc39c:	4639      	mov	r1, r7
 23fc39e:	4630      	mov	r0, r6
 23fc3a0:	f7ff ff62 	bl	23fc268 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
 23fc3a4:	e798      	b.n	23fc2d8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
 23fc3a6:	bf00      	nop
 23fc3a8:	023ff88f 	.word	0x023ff88f
 23fc3ac:	023ff994 	.word	0x023ff994
 23fc3b0:	023fc575 	.word	0x023fc575

023fc3b4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23fc3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
 23fc3b6:	680b      	ldr	r3, [r1, #0]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23fc3b8:	4606      	mov	r6, r0
    if (!impl()->servicesDiscovered()) {
 23fc3ba:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23fc3bc:	460d      	mov	r5, r1
 23fc3be:	b085      	sub	sp, #20
    if (!impl()->servicesDiscovered()) {
 23fc3c0:	b92b      	cbnz	r3, 23fc3ce <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
 23fc3c2:	a801      	add	r0, sp, #4
 23fc3c4:	f7ff fe0a 	bl	23fbfdc <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
 23fc3c8:	a801      	add	r0, sp, #4
 23fc3ca:	f7fe fe42 	bl	23fb052 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23fc3ce:	682b      	ldr	r3, [r5, #0]
 23fc3d0:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
 23fc3d4:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
 23fc3d8:	42bc      	cmp	r4, r7
 23fc3da:	d009      	beq.n	23fc3f0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
 23fc3dc:	4622      	mov	r2, r4
 23fc3de:	4629      	mov	r1, r5
 23fc3e0:	a801      	add	r0, sp, #4
 23fc3e2:	f7ff ff6d 	bl	23fc2c0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
 23fc3e6:	a801      	add	r0, sp, #4
 23fc3e8:	f7fe fe45 	bl	23fb076 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
 23fc3ec:	3408      	adds	r4, #8
 23fc3ee:	e7f3      	b.n	23fc3d8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
 23fc3f0:	4630      	mov	r0, r6
 23fc3f2:	4629      	mov	r1, r5
 23fc3f4:	f7ff fefa 	bl	23fc1ec <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
 23fc3f8:	4630      	mov	r0, r6
 23fc3fa:	b005      	add	sp, #20
 23fc3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fc400 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23fc400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    hal_ble_conn_cfg_t connCfg = {};
 23fc404:	f04f 0800 	mov.w	r8, #0
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23fc408:	461f      	mov	r7, r3
    connCfg.version = BLE_API_VERSION;
 23fc40a:	4b4b      	ldr	r3, [pc, #300]	; (23fc538 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x138>)
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23fc40c:	b092      	sub	sp, #72	; 0x48
 23fc40e:	4605      	mov	r5, r0
 23fc410:	460c      	mov	r4, r1
    return address_;
 23fc412:	6808      	ldr	r0, [r1, #0]
 23fc414:	6849      	ldr	r1, [r1, #4]
    connCfg.version = BLE_API_VERSION;
 23fc416:	9304      	str	r3, [sp, #16]
    return address_;
 23fc418:	ae0a      	add	r6, sp, #40	; 0x28
    connCfg.address = addr.halAddress();
 23fc41a:	ab05      	add	r3, sp, #20
    connCfg.conn_params = params;
 23fc41c:	9207      	str	r2, [sp, #28]
    return address_;
 23fc41e:	c603      	stmia	r6!, {r0, r1}
    connCfg.address = addr.halAddress();
 23fc420:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
 23fc424:	e9cd 8808 	strd	r8, r8, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
 23fc428:	f7fe fcba 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fc42c:	4b43      	ldr	r3, [pc, #268]	; (23fc53c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x13c>)
    connCfg.address = addr.halAddress();
 23fc42e:	ae0a      	add	r6, sp, #40	; 0x28
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
 23fc430:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
 23fc432:	f7fe fcb5 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fc436:	6803      	ldr	r3, [r0, #0]
    bind(addr);
 23fc438:	4621      	mov	r1, r4
 23fc43a:	4628      	mov	r0, r5
    connCfg.context = BleLocalDevice::getInstance().impl();
 23fc43c:	9309      	str	r3, [sp, #36]	; 0x24
    bind(addr);
 23fc43e:	f7fe fc2b 	bl	23fac98 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    BleLocalDevice::getInstance().impl()->connectingPeer() = *this;
 23fc442:	f7fe fcad 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc446:	682b      	ldr	r3, [r5, #0]
 23fc448:	6800      	ldr	r0, [r0, #0]
 23fc44a:	6243      	str	r3, [r0, #36]	; 0x24
 23fc44c:	6869      	ldr	r1, [r5, #4]
 23fc44e:	3028      	adds	r0, #40	; 0x28
 23fc450:	f7fe f81b 	bl	23fa48a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
 23fc454:	4642      	mov	r2, r8
 23fc456:	6829      	ldr	r1, [r5, #0]
 23fc458:	a804      	add	r0, sp, #16
 23fc45a:	f7fd f953 	bl	23f9704 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
 23fc45e:	4604      	mov	r4, r0
 23fc460:	b1b0      	cbz	r0, 23fc490 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x90>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fc462:	f64f 72ff 	movw	r2, #65535	; 0xffff
      { return _M_ptr; }
 23fc466:	682b      	ldr	r3, [r5, #0]
 23fc468:	801a      	strh	r2, [r3, #0]
    SCOPE_GUARD ({
 23fc46a:	4630      	mov	r0, r6
 23fc46c:	f7fe fbe8 	bl	23fac40 <_ZN8particle13BlePeerDeviceC1Ev>
 23fc470:	f7fe fc96 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fc476:	6800      	ldr	r0, [r0, #0]
 23fc478:	6243      	str	r3, [r0, #36]	; 0x24
 23fc47a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23fc47c:	3028      	adds	r0, #40	; 0x28
 23fc47e:	f7fe f804 	bl	23fa48a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23fc482:	a80b      	add	r0, sp, #44	; 0x2c
 23fc484:	f7fc fe06 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc488:	4620      	mov	r0, r4
 23fc48a:	b012      	add	sp, #72	; 0x48
 23fc48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        WiringBleLock lk;
 23fc490:	a803      	add	r0, sp, #12
 23fc492:	f7fe f81f 	bl	23fa4d4 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->findPeerDevice(impl()->connHandle())) {
 23fc496:	f7fe fc83 	bl	23fada0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fc49a:	682b      	ldr	r3, [r5, #0]
 23fc49c:	6800      	ldr	r0, [r0, #0]
 23fc49e:	8819      	ldrh	r1, [r3, #0]
 23fc4a0:	f7fe facf 	bl	23faa42 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
 23fc4a4:	f04f 0820 	mov.w	r8, #32
 23fc4a8:	bb18      	cbnz	r0, 23fc4f2 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xf2>
            LOG(ERROR, "Cannot add new peer device.");
 23fc4aa:	4b25      	ldr	r3, [pc, #148]	; (23fc540 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x140>)
 23fc4ac:	4f25      	ldr	r7, [pc, #148]	; (23fc544 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x144>)
 23fc4ae:	4632      	mov	r2, r6
 23fc4b0:	4925      	ldr	r1, [pc, #148]	; (23fc548 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x148>)
 23fc4b2:	2032      	movs	r0, #50	; 0x32
 23fc4b4:	9300      	str	r3, [sp, #0]
 23fc4b6:	4623      	mov	r3, r4
 23fc4b8:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
 23fc4bc:	f7fd fb36 	bl	23f9b2c <log_message>
 23fc4c0:	6838      	ldr	r0, [r7, #0]
 23fc4c2:	f7fd f98f 	bl	23f97e4 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
 23fc4c6:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
 23fc4c8:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
 23fc4cc:	4621      	mov	r1, r4
 23fc4ce:	8818      	ldrh	r0, [r3, #0]
 23fc4d0:	f7fd f8b6 	bl	23f9640 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
 23fc4d4:	6838      	ldr	r0, [r7, #0]
 23fc4d6:	f7fd f977 	bl	23f97c8 <os_mutex_recursive_lock>
        locked_ = true;
 23fc4da:	2301      	movs	r3, #1
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fc4dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
        locked_ = true;
 23fc4e0:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
 23fc4e4:	682b      	ldr	r3, [r5, #0]
            return SYSTEM_ERROR_NO_MEMORY;
 23fc4e6:	a803      	add	r0, sp, #12
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fc4e8:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
 23fc4ea:	f7fe f801 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
 23fc4ee:	4c17      	ldr	r4, [pc, #92]	; (23fc54c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x14c>)
 23fc4f0:	e7bb      	b.n	23fc46a <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
        WiringBleLock lk;
 23fc4f2:	a803      	add	r0, sp, #12
 23fc4f4:	f7fd fffc 	bl	23fa4f0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
 23fc4f8:	4b15      	ldr	r3, [pc, #84]	; (23fc550 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x150>)
 23fc4fa:	4632      	mov	r2, r6
 23fc4fc:	9300      	str	r3, [sp, #0]
 23fc4fe:	2001      	movs	r0, #1
 23fc500:	4623      	mov	r3, r4
 23fc502:	4911      	ldr	r1, [pc, #68]	; (23fc548 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x148>)
 23fc504:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
 23fc508:	f7fd fb10 	bl	23f9b2c <log_message>
    if (automatic) {
 23fc50c:	2f00      	cmp	r7, #0
 23fc50e:	d0ac      	beq.n	23fc46a <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
 23fc510:	4629      	mov	r1, r5
 23fc512:	4630      	mov	r0, r6
 23fc514:	f7ff ff4e 	bl	23fc3b4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
 23fc518:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
 23fc51c:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
 23fc520:	42bd      	cmp	r5, r7
 23fc522:	d005      	beq.n	23fc530 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>
            characteristic.subscribe(true);
 23fc524:	4628      	mov	r0, r5
 23fc526:	2101      	movs	r1, #1
 23fc528:	f7fe fb34 	bl	23fab94 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
 23fc52c:	3508      	adds	r5, #8
 23fc52e:	e7f7      	b.n	23fc520 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
 23fc530:	4630      	mov	r0, r6
 23fc532:	f7fe fda0 	bl	23fb076 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fc536:	e798      	b.n	23fc46a <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
 23fc538:	00180003 	.word	0x00180003
 23fc53c:	023fbb79 	.word	0x023fbb79
 23fc540:	023ff9c6 	.word	0x023ff9c6
 23fc544:	1007ae60 	.word	0x1007ae60
 23fc548:	023ff88f 	.word	0x023ff88f
 23fc54c:	fffffefc 	.word	0xfffffefc
 23fc550:	023ff9e2 	.word	0x023ff9e2

023fc554 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
 23fc554:	b513      	push	{r0, r1, r4, lr}
 23fc556:	4604      	mov	r4, r0
 23fc558:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
 23fc55c:	f7fe fb70 	bl	23fac40 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
 23fc560:	2200      	movs	r2, #0
 23fc562:	4620      	mov	r0, r4
 23fc564:	9b00      	ldr	r3, [sp, #0]
 23fc566:	9901      	ldr	r1, [sp, #4]
 23fc568:	f7ff ff4a 	bl	23fc400 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
 23fc56c:	4620      	mov	r0, r4
 23fc56e:	b002      	add	sp, #8
 23fc570:	bd10      	pop	{r4, pc}
	...

023fc574 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fc574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
 23fc578:	2320      	movs	r3, #32
 23fc57a:	2600      	movs	r6, #0
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fc57c:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
 23fc57e:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
 23fc582:	4b66      	ldr	r3, [pc, #408]	; (23fc71c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fc584:	4605      	mov	r5, r0
        LOG(TRACE, "Characteristic discovered.");
 23fc586:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fc588:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
 23fc58a:	4633      	mov	r3, r6
 23fc58c:	2001      	movs	r0, #1
 23fc58e:	4964      	ldr	r1, [pc, #400]	; (23fc720 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
 23fc590:	aa0c      	add	r2, sp, #48	; 0x30
 23fc592:	f7fd facb 	bl	23f9b2c <log_message>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
 23fc596:	f8df 918c 	ldr.w	r9, [pc, #396]	; 23fc724 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
 23fc59a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 23fc720 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fc59e:	f8df a188 	ldr.w	sl, [pc, #392]	; 23fc728 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        for (size_t i = 0; i < event->count; i++) {
 23fc5a2:	682b      	ldr	r3, [r5, #0]
 23fc5a4:	42b3      	cmp	r3, r6
 23fc5a6:	f240 80b5 	bls.w	23fc714 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
 23fc5aa:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 23fc5ae:	a803      	add	r0, sp, #12
 23fc5b0:	fb0b fb06 	mul.w	fp, fp, r6
 23fc5b4:	f7fe fa56 	bl	23faa64 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
 23fc5b8:	a805      	add	r0, sp, #20
 23fc5ba:	f7fe fb25 	bl	23fac08 <_ZN8particle10BleServiceC1Ev>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
 23fc5be:	686b      	ldr	r3, [r5, #4]
 23fc5c0:	9a03      	ldr	r2, [sp, #12]
 23fc5c2:	445b      	add	r3, fp
        this->size = halHandles.size;
 23fc5c4:	8bd9      	ldrh	r1, [r3, #30]
 23fc5c6:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
 23fc5c8:	8c19      	ldrh	r1, [r3, #32]
 23fc5ca:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
 23fc5cc:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 23fc5ce:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
 23fc5d0:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 23fc5d2:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
 23fc5d4:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 23fc5d6:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
 23fc5d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 23fc5da:	8253      	strh	r3, [r2, #18]
 23fc5dc:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
 23fc5e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
 23fc5e4:	429a      	cmp	r2, r3
 23fc5e6:	d07d      	beq.n	23fc6e4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
 23fc5e8:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
 23fc5ea:	8ac4      	ldrh	r4, [r0, #22]
 23fc5ec:	428c      	cmp	r4, r1
 23fc5ee:	d377      	bcc.n	23fc6e0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
 23fc5f0:	8a84      	ldrh	r4, [r0, #20]
 23fc5f2:	428c      	cmp	r4, r1
 23fc5f4:	d874      	bhi.n	23fc6e0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc5f6:	6859      	ldr	r1, [r3, #4]
 23fc5f8:	9005      	str	r0, [sp, #20]
 23fc5fa:	a806      	add	r0, sp, #24
 23fc5fc:	f7fd ff45 	bl	23fa48a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      { return _M_ptr; }
 23fc600:	f8dd e00c 	ldr.w	lr, [sp, #12]
                characteristic.impl()->svcUUID() = service.impl()->UUID();
 23fc604:	f8dd c014 	ldr.w	ip, [sp, #20]
 23fc608:	f10e 0428 	add.w	r4, lr, #40	; 0x28
 23fc60c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fc610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc612:	f8dc 3000 	ldr.w	r3, [ip]
 23fc616:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
 23fc618:	892b      	ldrh	r3, [r5, #8]
 23fc61a:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
 23fc61e:	686b      	ldr	r3, [r5, #4]
 23fc620:	9c03      	ldr	r4, [sp, #12]
 23fc622:	445b      	add	r3, fp
 23fc624:	7e5b      	ldrb	r3, [r3, #25]
 23fc626:	f013 0f02 	tst.w	r3, #2
 23fc62a:	d16e      	bne.n	23fc70a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
 23fc62c:	686b      	ldr	r3, [r5, #4]
 23fc62e:	445b      	add	r3, fp
 23fc630:	7e5b      	ldrb	r3, [r3, #25]
 23fc632:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
 23fc634:	bf42      	ittt	mi
 23fc636:	7923      	ldrbmi	r3, [r4, #4]
 23fc638:	f043 0304 	orrmi.w	r3, r3, #4
 23fc63c:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
 23fc63e:	686b      	ldr	r3, [r5, #4]
 23fc640:	445b      	add	r3, fp
 23fc642:	7e5b      	ldrb	r3, [r3, #25]
 23fc644:	0719      	lsls	r1, r3, #28
 23fc646:	bf42      	ittt	mi
 23fc648:	7923      	ldrbmi	r3, [r4, #4]
 23fc64a:	f043 0308 	orrmi.w	r3, r3, #8
 23fc64e:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
 23fc650:	686b      	ldr	r3, [r5, #4]
 23fc652:	445b      	add	r3, fp
 23fc654:	7e5b      	ldrb	r3, [r3, #25]
 23fc656:	06da      	lsls	r2, r3, #27
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
 23fc658:	aa07      	add	r2, sp, #28
 23fc65a:	4696      	mov	lr, r2
    value_ |= flags.value_;
 23fc65c:	bf42      	ittt	mi
 23fc65e:	7923      	ldrbmi	r3, [r4, #4]
 23fc660:	f043 0310 	orrmi.w	r3, r3, #16
 23fc664:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
 23fc666:	686b      	ldr	r3, [r5, #4]
 23fc668:	445b      	add	r3, fp
 23fc66a:	7e5b      	ldrb	r3, [r3, #25]
 23fc66c:	069b      	lsls	r3, r3, #26
 23fc66e:	bf42      	ittt	mi
 23fc670:	7923      	ldrbmi	r3, [r4, #4]
 23fc672:	f043 0320 	orrmi.w	r3, r3, #32
 23fc676:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
 23fc678:	686b      	ldr	r3, [r5, #4]
 23fc67a:	449b      	add	fp, r3
 23fc67c:	f10b 0304 	add.w	r3, fp, #4
 23fc680:	f10b 0b14 	add.w	fp, fp, #20
 23fc684:	4694      	mov	ip, r2
 23fc686:	6818      	ldr	r0, [r3, #0]
 23fc688:	6859      	ldr	r1, [r3, #4]
 23fc68a:	3308      	adds	r3, #8
 23fc68c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23fc690:	455b      	cmp	r3, fp
 23fc692:	4662      	mov	r2, ip
 23fc694:	d1f6      	bne.n	23fc684 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
 23fc696:	6818      	ldr	r0, [r3, #0]
        return *this = BleUuid(uuid);
 23fc698:	4671      	mov	r1, lr
 23fc69a:	f8cc 0000 	str.w	r0, [ip]
 23fc69e:	a80c      	add	r0, sp, #48	; 0x30
 23fc6a0:	f7fd ffe6 	bl	23fa670 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
 23fc6a4:	3414      	adds	r4, #20
 23fc6a6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 23fc6aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fc6ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc6b0:	f8dc 3000 	ldr.w	r3, [ip]
                if (!peerImpl->characteristics().append(characteristic)) {
 23fc6b4:	a903      	add	r1, sp, #12
 23fc6b6:	6023      	str	r3, [r4, #0]
 23fc6b8:	a80c      	add	r0, sp, #48	; 0x30
 23fc6ba:	f7fe fc9a 	bl	23faff2 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fc6be:	a90c      	add	r1, sp, #48	; 0x30
 23fc6c0:	f107 0018 	add.w	r0, r7, #24
 23fc6c4:	f7ff fda3 	bl	23fc20e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
 23fc6c8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fc6ca:	a80d      	add	r0, sp, #52	; 0x34
 23fc6cc:	f7fc fce2 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc6d0:	b99c      	cbnz	r4, 23fc6fa <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fc6d2:	2320      	movs	r3, #32
 23fc6d4:	f8cd a000 	str.w	sl, [sp]
 23fc6d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 23fc6dc:	4623      	mov	r3, r4
 23fc6de:	e007      	b.n	23fc6f0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
 23fc6e0:	3308      	adds	r3, #8
 23fc6e2:	e77f      	b.n	23fc5e4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
 23fc6e4:	2420      	movs	r4, #32
 23fc6e6:	2300      	movs	r3, #0
 23fc6e8:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
 23fc6ec:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fc6f0:	4641      	mov	r1, r8
 23fc6f2:	2032      	movs	r0, #50	; 0x32
 23fc6f4:	aa0c      	add	r2, sp, #48	; 0x30
 23fc6f6:	f7fd fa19 	bl	23f9b2c <log_message>
 23fc6fa:	a806      	add	r0, sp, #24
 23fc6fc:	f7fc fcca 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc700:	a804      	add	r0, sp, #16
 23fc702:	f7fc fcc7 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
 23fc706:	3601      	adds	r6, #1
 23fc708:	e74b      	b.n	23fc5a2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
 23fc70a:	7923      	ldrb	r3, [r4, #4]
 23fc70c:	f043 0302 	orr.w	r3, r3, #2
 23fc710:	7123      	strb	r3, [r4, #4]
 23fc712:	e78b      	b.n	23fc62c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
 23fc714:	b015      	add	sp, #84	; 0x54
 23fc716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc71a:	bf00      	nop
 23fc71c:	023ff9ff 	.word	0x023ff9ff
 23fc720:	023ff88f 	.word	0x023ff88f
 23fc724:	023ffa1a 	.word	0x023ffa1a
 23fc728:	023ffa49 	.word	0x023ffa49

023fc72c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fc72c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc730:	4604      	mov	r4, r0
 23fc732:	460d      	mov	r5, r1
 23fc734:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc736:	d914      	bls.n	23fc762 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fc738:	4290      	cmp	r0, r2
 23fc73a:	d213      	bcs.n	23fc764 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fc73c:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
 23fc740:	1a75      	subs	r5, r6, r1
 23fc742:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
 23fc746:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc748:	42b7      	cmp	r7, r6
 23fc74a:	d018      	beq.n	23fc77e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fc74c:	b11c      	cbz	r4, 23fc756 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fc74e:	4631      	mov	r1, r6
 23fc750:	4620      	mov	r0, r4
 23fc752:	f7fe feb3 	bl	23fb4bc <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
 23fc756:	4630      	mov	r0, r6
 23fc758:	f7fe fb8c 	bl	23fae74 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
 23fc75c:	3e24      	subs	r6, #36	; 0x24
 23fc75e:	3c24      	subs	r4, #36	; 0x24
 23fc760:	e7f2      	b.n	23fc748 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fc762:	d00c      	beq.n	23fc77e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fc764:	42b5      	cmp	r5, r6
 23fc766:	d00a      	beq.n	23fc77e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fc768:	b11c      	cbz	r4, 23fc772 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fc76a:	4629      	mov	r1, r5
 23fc76c:	4620      	mov	r0, r4
 23fc76e:	f7fe fea5 	bl	23fb4bc <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
 23fc772:	4628      	mov	r0, r5
 23fc774:	f7fe fb7e 	bl	23fae74 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
 23fc778:	3524      	adds	r5, #36	; 0x24
 23fc77a:	3424      	adds	r4, #36	; 0x24
 23fc77c:	e7f2      	b.n	23fc764 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fc77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc780 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fc780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23fc782:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fc784:	4605      	mov	r5, r0
        if (n > 0) {
 23fc786:	dd13      	ble.n	23fc7b0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fc788:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
 23fc78a:	fb07 f006 	mul.w	r0, r7, r6
 23fc78e:	f7fd fb71 	bl	23f9e74 <malloc>
            if (!d) {
 23fc792:	4604      	mov	r4, r0
 23fc794:	b158      	cbz	r0, 23fc7ae <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23fc796:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fc79a:	fb07 1202 	mla	r2, r7, r2, r1
 23fc79e:	f7ff ffc5 	bl	23fc72c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fc7a2:	6828      	ldr	r0, [r5, #0]
 23fc7a4:	f7fd fb74 	bl	23f9e90 <free>
        return true;
 23fc7a8:	2001      	movs	r0, #1
        data_ = d;
 23fc7aa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fc7ac:	60ae      	str	r6, [r5, #8]
    }
 23fc7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fc7b0:	2400      	movs	r4, #0
 23fc7b2:	e7f6      	b.n	23fc7a2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

023fc7b4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fc7b4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc7b6:	b510      	push	{r4, lr}
        if (dest > p && dest < end) {
 23fc7b8:	d910      	bls.n	23fc7dc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x28>
 23fc7ba:	4290      	cmp	r0, r2
 23fc7bc:	d20f      	bcs.n	23fc7de <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
            --end;
 23fc7be:	3a08      	subs	r2, #8
            dest += end - p - 1;
 23fc7c0:	f1a1 0408 	sub.w	r4, r1, #8
 23fc7c4:	1a51      	subs	r1, r2, r1
 23fc7c6:	4408      	add	r0, r1
            for (; end != p; --end, --dest) {
 23fc7c8:	4294      	cmp	r4, r2
 23fc7ca:	d012      	beq.n	23fc7f2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
                new(dest) T(std::move(*end));
 23fc7cc:	b118      	cbz	r0, 23fc7d6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x22>
    address_ = addr.address_;
 23fc7ce:	6813      	ldr	r3, [r2, #0]
 23fc7d0:	6003      	str	r3, [r0, #0]
 23fc7d2:	6853      	ldr	r3, [r2, #4]
 23fc7d4:	6043      	str	r3, [r0, #4]
            for (; end != p; --end, --dest) {
 23fc7d6:	3a08      	subs	r2, #8
 23fc7d8:	3808      	subs	r0, #8
 23fc7da:	e7f5      	b.n	23fc7c8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x14>
        } else if (dest != p) {
 23fc7dc:	d009      	beq.n	23fc7f2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
            for (; p != end; ++p, ++dest) {
 23fc7de:	4291      	cmp	r1, r2
 23fc7e0:	d007      	beq.n	23fc7f2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
                new(dest) T(std::move(*p));
 23fc7e2:	b118      	cbz	r0, 23fc7ec <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
 23fc7e4:	680b      	ldr	r3, [r1, #0]
 23fc7e6:	6003      	str	r3, [r0, #0]
 23fc7e8:	684b      	ldr	r3, [r1, #4]
 23fc7ea:	6043      	str	r3, [r0, #4]
            for (; p != end; ++p, ++dest) {
 23fc7ec:	3108      	adds	r1, #8
 23fc7ee:	3008      	adds	r0, #8
 23fc7f0:	e7f5      	b.n	23fc7de <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
    }
 23fc7f2:	bd10      	pop	{r4, pc}

023fc7f4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fc7f4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fc7f6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fc7f8:	4605      	mov	r5, r0
        if (n > 0) {
 23fc7fa:	dd11      	ble.n	23fc820 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fc7fc:	00f0      	lsls	r0, r6, #3
 23fc7fe:	f7fd fb39 	bl	23f9e74 <malloc>
            if (!d) {
 23fc802:	4604      	mov	r4, r0
 23fc804:	b158      	cbz	r0, 23fc81e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fc806:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fc80a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fc80e:	f7ff ffd1 	bl	23fc7b4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fc812:	6828      	ldr	r0, [r5, #0]
 23fc814:	f7fd fb3c 	bl	23f9e90 <free>
        return true;
 23fc818:	2001      	movs	r0, #1
        data_ = d;
 23fc81a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fc81c:	60ae      	str	r6, [r5, #8]
    }
 23fc81e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fc820:	2400      	movs	r4, #0
 23fc822:	e7f6      	b.n	23fc812 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fc824 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc824:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fc826:	2300      	movs	r3, #0
 23fc828:	e9c0 3300 	strd	r3, r3, [r0]
 23fc82c:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc82e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc830:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc832:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc834:	4299      	cmp	r1, r3
 23fc836:	dd13      	ble.n	23fc860 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x3c>
 23fc838:	f7ff ffdc 	bl	23fc7f4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc83c:	b180      	cbz	r0, 23fc860 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x3c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc83e:	e9d5 3100 	ldrd	r3, r1, [r5]
 23fc842:	6822      	ldr	r2, [r4, #0]
 23fc844:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
 23fc848:	4299      	cmp	r1, r3
 23fc84a:	d007      	beq.n	23fc85c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
            new(dest) T(*it);
 23fc84c:	b11a      	cbz	r2, 23fc856 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x32>
 23fc84e:	6818      	ldr	r0, [r3, #0]
 23fc850:	6010      	str	r0, [r2, #0]
 23fc852:	6858      	ldr	r0, [r3, #4]
 23fc854:	6050      	str	r0, [r2, #4]
        for (; it != end; ++it, ++dest) {
 23fc856:	3308      	adds	r3, #8
 23fc858:	3208      	adds	r2, #8
 23fc85a:	e7f5      	b.n	23fc848 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x24>
        size_ = vector.size_;
 23fc85c:	686b      	ldr	r3, [r5, #4]
 23fc85e:	6063      	str	r3, [r4, #4]
}
 23fc860:	4620      	mov	r0, r4
 23fc862:	bd38      	pop	{r3, r4, r5, pc}

023fc864 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
 23fc864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (!delegator->filter_.allowDuplicates()) {
 23fc868:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
 23fc86c:	b09d      	sub	sp, #116	; 0x74
 23fc86e:	4607      	mov	r7, r0
 23fc870:	460c      	mov	r4, r1
 23fc872:	ad13      	add	r5, sp, #76	; 0x4c
 23fc874:	f100 0910 	add.w	r9, r0, #16
        if (!delegator->filter_.allowDuplicates()) {
 23fc878:	2b00      	cmp	r3, #0
 23fc87a:	f040 80bb 	bne.w	23fc9f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x190>
    return data_ + size_;
 23fc87e:	e9d4 6a1e 	ldrd	r6, sl, [r4, #120]	; 0x78
    address_ = addr;
 23fc882:	462b      	mov	r3, r5
 23fc884:	6900      	ldr	r0, [r0, #16]
 23fc886:	f8d9 1004 	ldr.w	r1, [r9, #4]
 23fc88a:	ea4f 08ca 	mov.w	r8, sl, lsl #3
 23fc88e:	c303      	stmia	r3!, {r0, r1}
 23fc890:	eb06 0bca 	add.w	fp, r6, sl, lsl #3
        for (const auto& addr : cachedDevices_) {
 23fc894:	45b3      	cmp	fp, r6
 23fc896:	f000 8086 	beq.w	23fc9a6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x142>
            if (address == addr) {
 23fc89a:	4631      	mov	r1, r6
 23fc89c:	4628      	mov	r0, r5
 23fc89e:	f7fd fe40 	bl	23fa522 <_ZNK8particle10BleAddresseqERKS0_>
 23fc8a2:	3608      	adds	r6, #8
 23fc8a4:	2800      	cmp	r0, #0
 23fc8a6:	d0f5      	beq.n	23fc894 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x30>
    }
 23fc8a8:	b01d      	add	sp, #116	; 0x74
 23fc8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return true;
 23fc8ae:	f04f 0801 	mov.w	r8, #1
 23fc8b2:	e0e4      	b.n	23fca7e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x21a>
            return false;
 23fc8b4:	f04f 0800 	mov.w	r8, #0
 23fc8b8:	e0e1      	b.n	23fca7e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x21a>
            return false;
 23fc8ba:	2700      	movs	r7, #0
 23fc8bc:	e10d      	b.n	23fcada <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x276>
        } else if (delegator->scanResultCallbackRef_) {
 23fc8be:	6b27      	ldr	r7, [r4, #48]	; 0x30
 23fc8c0:	b13f      	cbz	r7, 23fc8d2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x6e>
            delegator->foundCount_++;
 23fc8c2:	6963      	ldr	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc8c4:	4631      	mov	r1, r6
 23fc8c6:	3301      	adds	r3, #1
 23fc8c8:	6163      	str	r3, [r4, #20]
 23fc8ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fc8ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23fc8d0:	e118      	b.n	23fcb04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a0>
        if (delegator->resultsPtr_) {
 23fc8d2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 23fc8d6:	f1bc 0f00 	cmp.w	ip, #0
 23fc8da:	d026      	beq.n	23fc92a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xc6>
            if (delegator->foundCount_ < delegator->targetCount_) {
 23fc8dc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23fc8e0:	4293      	cmp	r3, r2
 23fc8e2:	f080 8110 	bcs.w	23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
                delegator->resultsPtr_[delegator->foundCount_] = result;
 23fc8e6:	2224      	movs	r2, #36	; 0x24
 23fc8e8:	4353      	muls	r3, r2
    address_ = addr.address_;
 23fc8ea:	4632      	mov	r2, r6
                delegator->resultsPtr_[delegator->foundCount_] = result;
 23fc8ec:	eb0c 0503 	add.w	r5, ip, r3
    address_ = addr.address_;
 23fc8f0:	ca03      	ldmia	r2!, {r0, r1}
 23fc8f2:	f84c 0003 	str.w	r0, [ip, r3]
 23fc8f6:	6069      	str	r1, [r5, #4]
class BleScanResult {
 23fc8f8:	f105 0008 	add.w	r0, r5, #8
 23fc8fc:	a903      	add	r1, sp, #12
 23fc8fe:	f7fe fdf6 	bl	23fb4ee <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23fc902:	a906      	add	r1, sp, #24
 23fc904:	f105 0014 	add.w	r0, r5, #20
 23fc908:	f7fe fdf1 	bl	23fb4ee <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23fc90c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
 23fc910:	f885 3020 	strb.w	r3, [r5, #32]
                delegator->foundCount_++;
 23fc914:	6963      	ldr	r3, [r4, #20]
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23fc916:	6922      	ldr	r2, [r4, #16]
                delegator->foundCount_++;
 23fc918:	3301      	adds	r3, #1
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23fc91a:	4293      	cmp	r3, r2
                delegator->foundCount_++;
 23fc91c:	6163      	str	r3, [r4, #20]
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23fc91e:	f0c0 80f2 	bcc.w	23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
                    hal_ble_gap_stop_scan(nullptr);
 23fc922:	4638      	mov	r0, r7
 23fc924:	f7fc fe7e 	bl	23f9624 <hal_ble_gap_stop_scan>
 23fc928:	e0ed      	b.n	23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
    address_ = addr.address_;
 23fc92a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 23fc92e:	e896 0003 	ldmia.w	r6, {r0, r1}
 23fc932:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
 23fc936:	a903      	add	r1, sp, #12
 23fc938:	a80c      	add	r0, sp, #48	; 0x30
 23fc93a:	f7fe fda2 	bl	23fb482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fc93e:	a906      	add	r1, sp, #24
 23fc940:	a80f      	add	r0, sp, #60	; 0x3c
 23fc942:	f7fe fd9e 	bl	23fb482 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fc946:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    return insert(size_, std::move(value));
 23fc94a:	4641      	mov	r1, r8
 23fc94c:	4628      	mov	r0, r5
 23fc94e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 23fc952:	6867      	ldr	r7, [r4, #4]
 23fc954:	f7fe fdb2 	bl	23fb4bc <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc958:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fc95c:	4299      	cmp	r1, r3
 23fc95e:	da10      	bge.n	23fc982 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11e>
    T* const p = data_ + i;
 23fc960:	2224      	movs	r2, #36	; 0x24
 23fc962:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fc964:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
 23fc966:	fb02 3707 	mla	r7, r2, r7, r3
    move(p + 1, p, data_ + size_);
 23fc96a:	fb02 3201 	mla	r2, r2, r1, r3
 23fc96e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 23fc972:	4639      	mov	r1, r7
 23fc974:	f7ff feda 	bl	23fc72c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fc978:	b987      	cbnz	r7, 23fc99c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x138>
    ++size_;
 23fc97a:	6863      	ldr	r3, [r4, #4]
 23fc97c:	3301      	adds	r3, #1
 23fc97e:	6063      	str	r3, [r4, #4]
    return true;
 23fc980:	e005      	b.n	23fc98e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12a>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc982:	4620      	mov	r0, r4
 23fc984:	3101      	adds	r1, #1
 23fc986:	f7ff fefb 	bl	23fc780 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc98a:	2800      	cmp	r0, #0
 23fc98c:	d1e8      	bne.n	23fc960 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xfc>
    return insert(size_, std::move(value));
 23fc98e:	4628      	mov	r0, r5
 23fc990:	f7fe fa70 	bl	23fae74 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
 23fc994:	4640      	mov	r0, r8
 23fc996:	f7fe fa6d 	bl	23fae74 <_ZN8particle13BleScanResultD1Ev>
 23fc99a:	e0b4      	b.n	23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
    new(p) T(std::move(value));
 23fc99c:	4629      	mov	r1, r5
 23fc99e:	4638      	mov	r0, r7
 23fc9a0:	f7fe fd8c 	bl	23fb4bc <_ZN8particle13BleScanResultC1EOS0_>
 23fc9a4:	e7e9      	b.n	23fc97a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x116>
    address_ = addr;
 23fc9a6:	6938      	ldr	r0, [r7, #16]
 23fc9a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 23fc9ac:	ab0a      	add	r3, sp, #40	; 0x28
 23fc9ae:	c303      	stmia	r3!, {r0, r1}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc9b0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    address_ = addr.address_;
 23fc9b4:	e885 0003 	stmia.w	r5, {r0, r1}
 23fc9b8:	459a      	cmp	sl, r3
 23fc9ba:	db06      	blt.n	23fc9ca <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x166>
 23fc9bc:	f10a 0101 	add.w	r1, sl, #1
 23fc9c0:	f104 0078 	add.w	r0, r4, #120	; 0x78
 23fc9c4:	f7ff ff16 	bl	23fc7f4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc9c8:	b1a0      	cbz	r0, 23fc9f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x190>
    T* const p = data_ + i;
 23fc9ca:	f8d4 b078 	ldr.w	fp, [r4, #120]	; 0x78
    move(p + 1, p, data_ + size_);
 23fc9ce:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    T* const p = data_ + i;
 23fc9d0:	eb0b 0608 	add.w	r6, fp, r8
    move(p + 1, p, data_ + size_);
 23fc9d4:	4631      	mov	r1, r6
 23fc9d6:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 23fc9da:	f106 0008 	add.w	r0, r6, #8
 23fc9de:	f7ff fee9 	bl	23fc7b4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fc9e2:	b126      	cbz	r6, 23fc9ee <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x18a>
 23fc9e4:	462b      	mov	r3, r5
 23fc9e6:	cb03      	ldmia	r3!, {r0, r1}
 23fc9e8:	f84b 003a 	str.w	r0, [fp, sl, lsl #3]
 23fc9ec:	6071      	str	r1, [r6, #4]
    ++size_;
 23fc9ee:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 23fc9f0:	3301      	adds	r3, #1
 23fc9f2:	67e3      	str	r3, [r4, #124]	; 0x7c
            : rssi_(BLE_RSSI_INVALID) {
 23fc9f4:	ae01      	add	r6, sp, #4
 23fc9f6:	4630      	mov	r0, r6
 23fc9f8:	f7fd fe20 	bl	23fa63c <_ZN8particle10BleAddressC1Ev>
 23fc9fc:	a803      	add	r0, sp, #12
 23fc9fe:	f7fe fe3d 	bl	23fb67c <_ZN8particle18BleAdvertisingDataC1Ev>
 23fca02:	a806      	add	r0, sp, #24
 23fca04:	f7fe fe3a 	bl	23fb67c <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
 23fca08:	462b      	mov	r3, r5
 23fca0a:	6938      	ldr	r0, [r7, #16]
 23fca0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
        scanResponse_.set(buf, len);
 23fca10:	89fa      	ldrh	r2, [r7, #14]
 23fca12:	c303      	stmia	r3!, {r0, r1}
        rssi_ = value;
 23fca14:	783b      	ldrb	r3, [r7, #0]
    address_ = addr.address_;
 23fca16:	e886 0003 	stmia.w	r6, {r0, r1}
        scanResponse_.set(buf, len);
 23fca1a:	68b9      	ldr	r1, [r7, #8]
 23fca1c:	a806      	add	r0, sp, #24
        rssi_ = value;
 23fca1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
 23fca22:	f7fe fd9c 	bl	23fb55e <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
 23fca26:	89ba      	ldrh	r2, [r7, #12]
 23fca28:	6879      	ldr	r1, [r7, #4]
 23fca2a:	a803      	add	r0, sp, #12
 23fca2c:	f7fe fd97 	bl	23fb55e <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
 23fca30:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
 23fca34:	2b7f      	cmp	r3, #127	; 0x7f
 23fca36:	d003      	beq.n	23fca40 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1dc>
 23fca38:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23fca3c:	429a      	cmp	r2, r3
 23fca3e:	db62      	blt.n	23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
        return maxRssi_;
 23fca40:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
 23fca44:	2b7f      	cmp	r3, #127	; 0x7f
 23fca46:	d003      	beq.n	23fca50 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>
 23fca48:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23fca4c:	429a      	cmp	r2, r3
 23fca4e:	dc5a      	bgt.n	23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
        auto filerAddresses = filter_.addresses();
 23fca50:	4628      	mov	r0, r5
 23fca52:	f104 0150 	add.w	r1, r4, #80	; 0x50
 23fca56:	f7ff fee5 	bl	23fc824 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
 23fca5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
 23fca5c:	2b00      	cmp	r3, #0
 23fca5e:	f77f af26 	ble.w	23fc8ae <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x4a>
    return data_;
 23fca62:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    return data_ + size_;
 23fca64:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
            for (const auto& address : filerAddresses) {
 23fca68:	45b9      	cmp	r9, r7
 23fca6a:	f43f af23 	beq.w	23fc8b4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x50>
                if (address == result.address()) {
 23fca6e:	4638      	mov	r0, r7
 23fca70:	4631      	mov	r1, r6
 23fca72:	f7fd fd56 	bl	23fa522 <_ZNK8particle10BleAddresseqERKS0_>
 23fca76:	3708      	adds	r7, #8
 23fca78:	4680      	mov	r8, r0
 23fca7a:	2800      	cmp	r0, #0
 23fca7c:	d0f4      	beq.n	23fca68 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x204>
    ::free(ptr);
 23fca7e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23fca80:	f7fd fa06 	bl	23f9e90 <free>
        if (!delegator->filterByRssi(result) ||
 23fca84:	f1b8 0f00 	cmp.w	r8, #0
 23fca88:	d03d      	beq.n	23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
              !delegator->filterByDeviceName(result) ||
 23fca8a:	4631      	mov	r1, r6
 23fca8c:	4620      	mov	r0, r4
 23fca8e:	f7fe fbea 	bl	23fb266 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
 23fca92:	2800      	cmp	r0, #0
 23fca94:	d037      	beq.n	23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
              !delegator->filterByServiceUUID(result) ||
 23fca96:	4631      	mov	r1, r6
 23fca98:	4620      	mov	r0, r4
 23fca9a:	f7fe ffcf 	bl	23fba3c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
 23fca9e:	4607      	mov	r7, r0
 23fcaa0:	b388      	cbz	r0, 23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
        auto filterAppearances = filter_.appearances();
 23fcaa2:	4628      	mov	r0, r5
 23fcaa4:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 23fcaa8:	f7fe fc1a 	bl	23fb2e0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
 23fcaac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fcaae:	2b00      	cmp	r3, #0
 23fcab0:	dd13      	ble.n	23fcada <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x276>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
 23fcab2:	a806      	add	r0, sp, #24
 23fcab4:	f7fd ff84 	bl	23fa9c0 <_ZNK8particle18BleAdvertisingData10appearanceEv>
 23fcab8:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
 23fcaba:	a803      	add	r0, sp, #12
 23fcabc:	f7fd ff80 	bl	23fa9c0 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
 23fcac0:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 23fcac4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
 23fcac8:	429a      	cmp	r2, r3
 23fcaca:	f43f aef6 	beq.w	23fc8ba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
                if (appearance == srAppearance || appearance == advAppearance) {
 23fcace:	f833 1b02 	ldrh.w	r1, [r3], #2
 23fcad2:	4588      	cmp	r8, r1
 23fcad4:	d001      	beq.n	23fcada <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x276>
 23fcad6:	4288      	cmp	r0, r1
 23fcad8:	d1f6      	bne.n	23fcac8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x264>
    ::free(ptr);
 23fcada:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23fcadc:	f7fd f9d8 	bl	23f9e90 <free>
              !delegator->filterByServiceUUID(result) ||
 23fcae0:	b18f      	cbz	r7, 23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
              !delegator->filterByCustomData(result)) {
 23fcae2:	4631      	mov	r1, r6
 23fcae4:	4620      	mov	r0, r4
 23fcae6:	f7fe fc31 	bl	23fb34c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
 23fcaea:	b160      	cbz	r0, 23fcb06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x2a2>
        if (delegator->scanResultCallback_) {
 23fcaec:	6a23      	ldr	r3, [r4, #32]
 23fcaee:	2b00      	cmp	r3, #0
 23fcaf0:	f43f aee5 	beq.w	23fc8be <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x5a>
 23fcaf4:	4629      	mov	r1, r5
            delegator->foundCount_++;
 23fcaf6:	6963      	ldr	r3, [r4, #20]
 23fcaf8:	9613      	str	r6, [sp, #76]	; 0x4c
 23fcafa:	3301      	adds	r3, #1
 23fcafc:	6163      	str	r3, [r4, #20]
 23fcafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fcb00:	f104 0018 	add.w	r0, r4, #24
 23fcb04:	4798      	blx	r3
            return;
 23fcb06:	4630      	mov	r0, r6
 23fcb08:	f7fe f9b4 	bl	23fae74 <_ZN8particle13BleScanResultD1Ev>
 23fcb0c:	e6cc      	b.n	23fc8a8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x44>
	...

023fcb10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23fcb10:	2300      	movs	r3, #0
 23fcb12:	4802      	ldr	r0, [pc, #8]	; (23fcb1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fcb14:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23fcb16:	f7fc be3b 	b.w	23f9790 <os_mutex_recursive_create>
 23fcb1a:	bf00      	nop
 23fcb1c:	1007ae60 	.word	0x1007ae60

023fcb20 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
 23fcb20:	b510      	push	{r4, lr}
 23fcb22:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
 23fcb24:	6880      	ldr	r0, [r0, #8]
 23fcb26:	6803      	ldr	r3, [r0, #0]
 23fcb28:	68db      	ldr	r3, [r3, #12]
 23fcb2a:	4798      	blx	r3
 23fcb2c:	68e3      	ldr	r3, [r4, #12]
 23fcb2e:	4418      	add	r0, r3
 23fcb30:	60e0      	str	r0, [r4, #12]
}
 23fcb32:	bd10      	pop	{r4, pc}

023fcb34 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fcb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcb36:	4606      	mov	r6, r0
 23fcb38:	460d      	mov	r5, r1
  size_t n = 0;
 23fcb3a:	2400      	movs	r4, #0
 23fcb3c:	188f      	adds	r7, r1, r2
  while (size--) {
 23fcb3e:	42bd      	cmp	r5, r7
 23fcb40:	d00c      	beq.n	23fcb5c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fcb42:	6833      	ldr	r3, [r6, #0]
 23fcb44:	4630      	mov	r0, r6
 23fcb46:	689b      	ldr	r3, [r3, #8]
 23fcb48:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fcb4c:	4798      	blx	r3
     if (chunk>=0)
 23fcb4e:	1e03      	subs	r3, r0, #0
 23fcb50:	db01      	blt.n	23fcb56 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fcb52:	441c      	add	r4, r3
  while (size--) {
 23fcb54:	e7f3      	b.n	23fcb3e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fcb56:	2c00      	cmp	r4, #0
 23fcb58:	bf08      	it	eq
 23fcb5a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fcb5c:	4620      	mov	r0, r4
 23fcb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcb60 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fcb60:	4770      	bx	lr

023fcb62 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fcb62:	b510      	push	{r4, lr}
 23fcb64:	4604      	mov	r4, r0
 23fcb66:	2110      	movs	r1, #16
 23fcb68:	f7fb ffb5 	bl	23f8ad6 <_ZdlPvj>
 23fcb6c:	4620      	mov	r0, r4
 23fcb6e:	bd10      	pop	{r4, pc}

023fcb70 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fcb70:	b513      	push	{r0, r1, r4, lr}
 23fcb72:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fcb74:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fcb76:	b159      	cbz	r1, 23fcb90 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fcb78:	9101      	str	r1, [sp, #4]
 23fcb7a:	f7fb ff83 	bl	23f8a84 <strlen>
 23fcb7e:	4602      	mov	r2, r0
 23fcb80:	4620      	mov	r0, r4
 23fcb82:	6823      	ldr	r3, [r4, #0]
 23fcb84:	9901      	ldr	r1, [sp, #4]
 23fcb86:	68db      	ldr	r3, [r3, #12]
    }
 23fcb88:	b002      	add	sp, #8
 23fcb8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fcb8e:	4718      	bx	r3
    }
 23fcb90:	b002      	add	sp, #8
 23fcb92:	bd10      	pop	{r4, pc}

023fcb94 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fcb94:	6803      	ldr	r3, [r0, #0]
 23fcb96:	689b      	ldr	r3, [r3, #8]
 23fcb98:	4718      	bx	r3

023fcb9a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fcb9a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fcb9c:	210d      	movs	r1, #13
{
 23fcb9e:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fcba0:	f7ff fff8 	bl	23fcb94 <_ZN5Print5printEc>
  n += print('\n');
 23fcba4:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fcba6:	4604      	mov	r4, r0
  n += print('\n');
 23fcba8:	4628      	mov	r0, r5
 23fcbaa:	f7ff fff3 	bl	23fcb94 <_ZN5Print5printEc>
  return n;
}
 23fcbae:	4420      	add	r0, r4
 23fcbb0:	bd38      	pop	{r3, r4, r5, pc}

023fcbb2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fcbb2:	b538      	push	{r3, r4, r5, lr}
 23fcbb4:	4605      	mov	r5, r0
  return write(str);
 23fcbb6:	f7ff ffdb 	bl	23fcb70 <_ZN5Print5writeEPKc>
 23fcbba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fcbbc:	4628      	mov	r0, r5
 23fcbbe:	f7ff ffec 	bl	23fcb9a <_ZN5Print7printlnEv>
  return n;
}
 23fcbc2:	4420      	add	r0, r4
 23fcbc4:	bd38      	pop	{r3, r4, r5, pc}

023fcbc6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fcbc6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fcbc8:	2a01      	cmp	r2, #1
 23fcbca:	bf98      	it	ls
 23fcbcc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fcbce:	b530      	push	{r4, r5, lr}
 23fcbd0:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fcbd2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fcbd6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fcbd8:	460d      	mov	r5, r1
 23fcbda:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fcbde:	fb01 5312 	mls	r3, r1, r2, r5
 23fcbe2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fcbe6:	2b09      	cmp	r3, #9
 23fcbe8:	bf94      	ite	ls
 23fcbea:	3330      	addls	r3, #48	; 0x30
 23fcbec:	3337      	addhi	r3, #55	; 0x37
 23fcbee:	b2db      	uxtb	r3, r3
  } while(n);
 23fcbf0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fcbf2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fcbf6:	d9ef      	bls.n	23fcbd8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fcbf8:	4621      	mov	r1, r4
 23fcbfa:	f7ff ffb9 	bl	23fcb70 <_ZN5Print5writeEPKc>
}
 23fcbfe:	b00b      	add	sp, #44	; 0x2c
 23fcc00:	bd30      	pop	{r4, r5, pc}

023fcc02 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fcc02:	b510      	push	{r4, lr}
 23fcc04:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fcc06:	f7fc fce3 	bl	23f95d0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fcc0a:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fcc0c:	6823      	ldr	r3, [r4, #0]
 23fcc0e:	4620      	mov	r0, r4
 23fcc10:	695b      	ldr	r3, [r3, #20]
 23fcc12:	4798      	blx	r3
    if (c >= 0) return c;
 23fcc14:	2800      	cmp	r0, #0
 23fcc16:	da08      	bge.n	23fcc2a <_ZN6Stream9timedReadEv+0x28>
 23fcc18:	f7fc fcda 	bl	23f95d0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fcc1c:	68e3      	ldr	r3, [r4, #12]
 23fcc1e:	1ac0      	subs	r0, r0, r3
 23fcc20:	68a3      	ldr	r3, [r4, #8]
 23fcc22:	4298      	cmp	r0, r3
 23fcc24:	d3f2      	bcc.n	23fcc0c <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fcc26:	f04f 30ff 	mov.w	r0, #4294967295
}
 23fcc2a:	bd10      	pop	{r4, pc}

023fcc2c <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fcc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fcc30:	4607      	mov	r7, r0
 23fcc32:	460c      	mov	r4, r1
 23fcc34:	460d      	mov	r5, r1
 23fcc36:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fcc38:	42b5      	cmp	r5, r6
 23fcc3a:	eba5 0804 	sub.w	r8, r5, r4
 23fcc3e:	d007      	beq.n	23fcc50 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fcc40:	4638      	mov	r0, r7
 23fcc42:	f7ff ffde 	bl	23fcc02 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fcc46:	1e03      	subs	r3, r0, #0
 23fcc48:	db02      	blt.n	23fcc50 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fcc4a:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fcc4e:	e7f3      	b.n	23fcc38 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fcc50:	4640      	mov	r0, r8
 23fcc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fcc56 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fcc56:	4770      	bx	lr

023fcc58 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fcc58:	4608      	mov	r0, r1
 23fcc5a:	b111      	cbz	r1, 23fcc62 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fcc5c:	680b      	ldr	r3, [r1, #0]
 23fcc5e:	685b      	ldr	r3, [r3, #4]
 23fcc60:	4718      	bx	r3
}
 23fcc62:	4770      	bx	lr

023fcc64 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fcc64:	4770      	bx	lr

023fcc66 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fcc66:	4770      	bx	lr

023fcc68 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fcc68:	4770      	bx	lr

023fcc6a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fcc6a:	b538      	push	{r3, r4, r5, lr}
 23fcc6c:	4604      	mov	r4, r0
 23fcc6e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fcc70:	6800      	ldr	r0, [r0, #0]
 23fcc72:	212e      	movs	r1, #46	; 0x2e
 23fcc74:	f002 fb07 	bl	23ff286 <strchrnul>
    size = s - category;
 23fcc78:	6823      	ldr	r3, [r4, #0]
 23fcc7a:	1ac3      	subs	r3, r0, r3
 23fcc7c:	602b      	str	r3, [r5, #0]
    if (size) {
 23fcc7e:	b123      	cbz	r3, 23fcc8a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fcc80:	7803      	ldrb	r3, [r0, #0]
 23fcc82:	b103      	cbz	r3, 23fcc86 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fcc84:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fcc86:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcc88:	6020      	str	r0, [r4, #0]
}
 23fcc8a:	4618      	mov	r0, r3
 23fcc8c:	bd38      	pop	{r3, r4, r5, pc}

023fcc8e <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fcc8e:	b510      	push	{r4, lr}
 23fcc90:	4604      	mov	r4, r0
 23fcc92:	2104      	movs	r1, #4
 23fcc94:	f7fb ff1f 	bl	23f8ad6 <_ZdlPvj>
 23fcc98:	4620      	mov	r0, r4
 23fcc9a:	bd10      	pop	{r4, pc}

023fcc9c <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fcc9c:	b510      	push	{r4, lr}
 23fcc9e:	4604      	mov	r4, r0
 23fcca0:	2104      	movs	r1, #4
 23fcca2:	f7fb ff18 	bl	23f8ad6 <_ZdlPvj>
 23fcca6:	4620      	mov	r0, r4
 23fcca8:	bd10      	pop	{r4, pc}

023fccaa <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
 23fccaa:	f7fc bd8d 	b.w	23f97c8 <os_mutex_recursive_lock>

023fccae <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fccae:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fccb0:	f7fb fede 	bl	23f8a70 <strcmp>
}
 23fccb4:	fab0 f080 	clz	r0, r0
 23fccb8:	0940      	lsrs	r0, r0, #5
 23fccba:	bd08      	pop	{r3, pc}

023fccbc <__tcf_1>:
 23fccbc:	4770      	bx	lr

023fccbe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fccbe:	b510      	push	{r4, lr}
 23fccc0:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fccc2:	f001 fbcb 	bl	23fe45c <_Z16_fetch_usbserialv>
 23fccc6:	4284      	cmp	r4, r0
 23fccc8:	d105      	bne.n	23fccd6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fccca:	f001 fbc7 	bl	23fe45c <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fccce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fccd2:	f001 bbb7 	b.w	23fe444 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fccd6:	f002 f863 	bl	23feda0 <_Z22__fetch_global_Serial1v>
 23fccda:	4284      	cmp	r4, r0
 23fccdc:	d105      	bne.n	23fccea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fccde:	f002 f85f 	bl	23feda0 <_Z22__fetch_global_Serial1v>
}
 23fcce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fcce6:	f001 be0e 	b.w	23fe906 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fccea:	b12c      	cbz	r4, 23fccf8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fccec:	6823      	ldr	r3, [r4, #0]
 23fccee:	4620      	mov	r0, r4
}
 23fccf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fccf4:	685b      	ldr	r3, [r3, #4]
 23fccf6:	4718      	bx	r3
 23fccf8:	bd10      	pop	{r4, pc}

023fccfa <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fccfa:	b513      	push	{r0, r1, r4, lr}
 23fccfc:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fccfe:	4608      	mov	r0, r1
 23fcd00:	9101      	str	r1, [sp, #4]
 23fcd02:	f7fb febf 	bl	23f8a84 <strlen>
 23fcd06:	4602      	mov	r2, r0
 23fcd08:	4620      	mov	r0, r4
 23fcd0a:	9901      	ldr	r1, [sp, #4]
}
 23fcd0c:	b002      	add	sp, #8
 23fcd0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fcd12:	f001 bd8f 	b.w	23fe834 <_ZN5spark10JSONWriter5valueEPKcj>

023fcd16 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fcd16:	b513      	push	{r0, r1, r4, lr}
 23fcd18:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fcd1a:	4608      	mov	r0, r1
 23fcd1c:	9101      	str	r1, [sp, #4]
 23fcd1e:	f7fb feb1 	bl	23f8a84 <strlen>
 23fcd22:	4602      	mov	r2, r0
 23fcd24:	4620      	mov	r0, r4
 23fcd26:	6823      	ldr	r3, [r4, #0]
 23fcd28:	9901      	ldr	r1, [sp, #4]
 23fcd2a:	68db      	ldr	r3, [r3, #12]
}
 23fcd2c:	b002      	add	sp, #8
 23fcd2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fcd32:	4718      	bx	r3

023fcd34 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fcd34:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fcd36:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fcd38:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fcd3c:	2201      	movs	r2, #1
 23fcd3e:	68db      	ldr	r3, [r3, #12]
 23fcd40:	f10d 0107 	add.w	r1, sp, #7
 23fcd44:	4798      	blx	r3
}
 23fcd46:	b003      	add	sp, #12
 23fcd48:	f85d fb04 	ldr.w	pc, [sp], #4

023fcd4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fcd4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
 23fcd50:	f04f 0a14 	mov.w	sl, #20
 23fcd54:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fcd58:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fcd5a:	4645      	mov	r5, r8
 23fcd5c:	fb0a f404 	mul.w	r4, sl, r4
 23fcd60:	9300      	str	r3, [sp, #0]
 23fcd62:	4b17      	ldr	r3, [pc, #92]	; (23fcdc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fcd64:	10a4      	asrs	r4, r4, #2
 23fcd66:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fcd68:	2c00      	cmp	r4, #0
 23fcd6a:	dd21      	ble.n	23fcdb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fcd6c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fcd6e:	fb0a f006 	mul.w	r0, sl, r6
 23fcd72:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fcd76:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fcd7a:	463a      	mov	r2, r7
 23fcd7c:	455f      	cmp	r7, fp
 23fcd7e:	bf28      	it	cs
 23fcd80:	465a      	movcs	r2, fp
 23fcd82:	5828      	ldr	r0, [r5, r0]
 23fcd84:	9101      	str	r1, [sp, #4]
 23fcd86:	f002 faae 	bl	23ff2e6 <strncmp>
                if (cmp == 0) {
 23fcd8a:	2800      	cmp	r0, #0
 23fcd8c:	f04f 0301 	mov.w	r3, #1
 23fcd90:	9901      	ldr	r1, [sp, #4]
 23fcd92:	d10b      	bne.n	23fcdac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fcd94:	455f      	cmp	r7, fp
 23fcd96:	d103      	bne.n	23fcda0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fcd98:	9a00      	ldr	r2, [sp, #0]
 23fcd9a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fcd9c:	4634      	mov	r4, r6
 23fcd9e:	e7e3      	b.n	23fcd68 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fcda0:	d9fc      	bls.n	23fcd9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fcda2:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fcda4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fcda8:	3e01      	subs	r6, #1
 23fcdaa:	e7f7      	b.n	23fcd9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fcdac:	dbf9      	blt.n	23fcda2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fcdae:	e7f5      	b.n	23fcd9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fcdb0:	eba5 0508 	sub.w	r5, r5, r8
}
 23fcdb4:	4802      	ldr	r0, [pc, #8]	; (23fcdc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fcdb6:	10ad      	asrs	r5, r5, #2
 23fcdb8:	4368      	muls	r0, r5
 23fcdba:	b003      	add	sp, #12
 23fcdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcdc0:	cccccccd 	.word	0xcccccccd

023fcdc4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fcdc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fcdc6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fcdc8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fcdca:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fcdcc:	b303      	cbz	r3, 23fce10 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fcdce:	b1f9      	cbz	r1, 23fce10 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fcdd0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fcdd2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fcdd6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fcdd8:	a903      	add	r1, sp, #12
 23fcdda:	a801      	add	r0, sp, #4
 23fcddc:	f7ff ff45 	bl	23fcc6a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fcde0:	4601      	mov	r1, r0
 23fcde2:	b1a8      	cbz	r0, 23fce10 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcde4:	f10d 030b 	add.w	r3, sp, #11
 23fcde8:	4620      	mov	r0, r4
 23fcdea:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fcdec:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcdf0:	f7ff ffac 	bl	23fcd4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fcdf4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fcdf8:	b153      	cbz	r3, 23fce10 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fcdfa:	6823      	ldr	r3, [r4, #0]
 23fcdfc:	2414      	movs	r4, #20
 23fcdfe:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fce02:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fce06:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fce08:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fce0a:	bfa8      	it	ge
 23fce0c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fce0e:	e7e3      	b.n	23fcdd8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fce10:	4628      	mov	r0, r5
 23fce12:	b004      	add	sp, #16
 23fce14:	bd70      	pop	{r4, r5, r6, pc}

023fce16 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fce16:	b40e      	push	{r1, r2, r3}
 23fce18:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fce1a:	b08c      	sub	sp, #48	; 0x30
 23fce1c:	af00      	add	r7, sp, #0
 23fce1e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fce22:	f855 2b04 	ldr.w	r2, [r5], #4
 23fce26:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fce28:	462b      	mov	r3, r5
 23fce2a:	2120      	movs	r1, #32
 23fce2c:	f107 0010 	add.w	r0, r7, #16
 23fce30:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fce32:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fce34:	f7fd f848 	bl	23f9ec8 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fce38:	281f      	cmp	r0, #31
 23fce3a:	687a      	ldr	r2, [r7, #4]
 23fce3c:	d91a      	bls.n	23fce74 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fce3e:	f100 0308 	add.w	r3, r0, #8
 23fce42:	f023 0307 	bic.w	r3, r3, #7
        }
 23fce46:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fce48:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fce4c:	1c41      	adds	r1, r0, #1
 23fce4e:	462b      	mov	r3, r5
 23fce50:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fce52:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fce54:	f7fd f838 	bl	23f9ec8 <vsnprintf>
        if (n > 0) {
 23fce58:	1e02      	subs	r2, r0, #0
 23fce5a:	dd04      	ble.n	23fce66 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fce5c:	6823      	ldr	r3, [r4, #0]
 23fce5e:	4669      	mov	r1, sp
 23fce60:	4620      	mov	r0, r4
 23fce62:	68db      	ldr	r3, [r3, #12]
 23fce64:	4798      	blx	r3
 23fce66:	46b5      	mov	sp, r6
}
 23fce68:	3730      	adds	r7, #48	; 0x30
 23fce6a:	46bd      	mov	sp, r7
 23fce6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fce70:	b003      	add	sp, #12
 23fce72:	4770      	bx	lr
    } else if (n > 0) {
 23fce74:	2800      	cmp	r0, #0
 23fce76:	d0f7      	beq.n	23fce68 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fce78:	6823      	ldr	r3, [r4, #0]
 23fce7a:	4602      	mov	r2, r0
 23fce7c:	68db      	ldr	r3, [r3, #12]
 23fce7e:	4620      	mov	r0, r4
 23fce80:	f107 0110 	add.w	r1, r7, #16
 23fce84:	4798      	blx	r3
}
 23fce86:	e7ef      	b.n	23fce68 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fce88 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fce88:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fce8a:	4c08      	ldr	r4, [pc, #32]	; (23fceac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fce8c:	e8d4 3f8f 	ldab	r3, [r4]
 23fce90:	07db      	lsls	r3, r3, #31
 23fce92:	d409      	bmi.n	23fcea8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fce94:	4620      	mov	r0, r4
 23fce96:	f7fb fe2d 	bl	23f8af4 <__cxa_guard_acquire>
 23fce9a:	b128      	cbz	r0, 23fcea8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fce9c:	4620      	mov	r0, r4
 23fce9e:	f7fb fe2e 	bl	23f8afe <__cxa_guard_release>
 23fcea2:	4803      	ldr	r0, [pc, #12]	; (23fceb0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fcea4:	f002 f966 	bl	23ff174 <atexit>
}
 23fcea8:	4802      	ldr	r0, [pc, #8]	; (23fceb4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fceaa:	bd10      	pop	{r4, pc}
 23fceac:	1007ae6c 	.word	0x1007ae6c
 23fceb0:	023fcc65 	.word	0x023fcc65
 23fceb4:	1007a890 	.word	0x1007a890

023fceb8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fceb8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fceba:	4c08      	ldr	r4, [pc, #32]	; (23fcedc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fcebc:	e8d4 3f8f 	ldab	r3, [r4]
 23fcec0:	07db      	lsls	r3, r3, #31
 23fcec2:	d409      	bmi.n	23fced8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fcec4:	4620      	mov	r0, r4
 23fcec6:	f7fb fe15 	bl	23f8af4 <__cxa_guard_acquire>
 23fceca:	b128      	cbz	r0, 23fced8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fcecc:	4620      	mov	r0, r4
 23fcece:	f7fb fe16 	bl	23f8afe <__cxa_guard_release>
 23fced2:	4803      	ldr	r0, [pc, #12]	; (23fcee0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fced4:	f002 f94e 	bl	23ff174 <atexit>
    return &factory;
}
 23fced8:	4802      	ldr	r0, [pc, #8]	; (23fcee4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fceda:	bd10      	pop	{r4, pc}
 23fcedc:	1007ae70 	.word	0x1007ae70
 23fcee0:	023fccbd 	.word	0x023fccbd
 23fcee4:	1007a894 	.word	0x1007a894

023fcee8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fcee8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fceea:	2500      	movs	r5, #0
 23fceec:	4604      	mov	r4, r0
 23fceee:	e9c0 5500 	strd	r5, r5, [r0]
 23fcef2:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fcef6:	6085      	str	r5, [r0, #8]
 23fcef8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fcefa:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fcefe:	f7fc fc47 	bl	23f9790 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fcf02:	f7ff ffc1 	bl	23fce88 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fcf06:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fcf08:	f7ff ffd6 	bl	23fceb8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fcf0c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fcf0e:	6220      	str	r0, [r4, #32]
}
 23fcf10:	4620      	mov	r0, r4
 23fcf12:	bd38      	pop	{r3, r4, r5, pc}

023fcf14 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fcf14:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fcf16:	4c0a      	ldr	r4, [pc, #40]	; (23fcf40 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fcf18:	e8d4 3f8f 	ldab	r3, [r4]
 23fcf1c:	07db      	lsls	r3, r3, #31
 23fcf1e:	d40c      	bmi.n	23fcf3a <_ZN5spark10LogManager8instanceEv+0x26>
 23fcf20:	4620      	mov	r0, r4
 23fcf22:	f7fb fde7 	bl	23f8af4 <__cxa_guard_acquire>
 23fcf26:	b140      	cbz	r0, 23fcf3a <_ZN5spark10LogManager8instanceEv+0x26>
 23fcf28:	4806      	ldr	r0, [pc, #24]	; (23fcf44 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fcf2a:	f7ff ffdd 	bl	23fcee8 <_ZN5spark10LogManagerC1Ev>
 23fcf2e:	4620      	mov	r0, r4
 23fcf30:	f7fb fde5 	bl	23f8afe <__cxa_guard_release>
 23fcf34:	4804      	ldr	r0, [pc, #16]	; (23fcf48 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fcf36:	f002 f91d 	bl	23ff174 <atexit>
    return &mgr;
}
 23fcf3a:	4802      	ldr	r0, [pc, #8]	; (23fcf44 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fcf3c:	bd10      	pop	{r4, pc}
 23fcf3e:	bf00      	nop
 23fcf40:	1007ae68 	.word	0x1007ae68
 23fcf44:	1007ae78 	.word	0x1007ae78
 23fcf48:	023fd489 	.word	0x023fd489

023fcf4c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fcf4c:	2300      	movs	r3, #0
 23fcf4e:	4a02      	ldr	r2, [pc, #8]	; (23fcf58 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fcf50:	4902      	ldr	r1, [pc, #8]	; (23fcf5c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fcf52:	4803      	ldr	r0, [pc, #12]	; (23fcf60 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fcf54:	f7fc be14 	b.w	23f9b80 <log_set_callbacks>
 23fcf58:	023fd271 	.word	0x023fd271
 23fcf5c:	023fd1fd 	.word	0x023fd1fd
 23fcf60:	023fd17d 	.word	0x023fd17d

023fcf64 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fcf64:	2300      	movs	r3, #0
 23fcf66:	461a      	mov	r2, r3
 23fcf68:	4619      	mov	r1, r3
 23fcf6a:	4618      	mov	r0, r3
 23fcf6c:	f7fc be08 	b.w	23f9b80 <log_set_callbacks>

023fcf70 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fcf70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcf72:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fcf74:	688d      	ldr	r5, [r1, #8]
 23fcf76:	4668      	mov	r0, sp
 23fcf78:	f7fd f838 	bl	23f9fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcf7c:	466a      	mov	r2, sp
 23fcf7e:	4629      	mov	r1, r5
 23fcf80:	4620      	mov	r0, r4
 23fcf82:	f001 fb77 	bl	23fe674 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcf86:	a801      	add	r0, sp, #4
 23fcf88:	f7fc f884 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcf8c:	4620      	mov	r0, r4
 23fcf8e:	b003      	add	sp, #12
 23fcf90:	bd30      	pop	{r4, r5, pc}

023fcf92 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fcf92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcf94:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fcf96:	68cd      	ldr	r5, [r1, #12]
 23fcf98:	4668      	mov	r0, sp
 23fcf9a:	f7fd f827 	bl	23f9fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcf9e:	466a      	mov	r2, sp
 23fcfa0:	4629      	mov	r1, r5
 23fcfa2:	4620      	mov	r0, r4
 23fcfa4:	f001 fb42 	bl	23fe62c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcfa8:	a801      	add	r0, sp, #4
 23fcfaa:	f7fc f873 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcfae:	4620      	mov	r0, r4
 23fcfb0:	b003      	add	sp, #12
 23fcfb2:	bd30      	pop	{r4, r5, pc}

023fcfb4 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fcfb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcfb6:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fcfb8:	690d      	ldr	r5, [r1, #16]
 23fcfba:	4668      	mov	r0, sp
 23fcfbc:	f7fd f816 	bl	23f9fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcfc0:	466a      	mov	r2, sp
 23fcfc2:	4629      	mov	r1, r5
 23fcfc4:	4620      	mov	r0, r4
 23fcfc6:	f001 fada 	bl	23fe57e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcfca:	a801      	add	r0, sp, #4
 23fcfcc:	f7fc f862 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcfd0:	4620      	mov	r0, r4
 23fcfd2:	b003      	add	sp, #12
 23fcfd4:	bd30      	pop	{r4, r5, pc}
	...

023fcfd8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fcfd8:	b570      	push	{r4, r5, r6, lr}
 23fcfda:	b08a      	sub	sp, #40	; 0x28
 23fcfdc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fcfde:	4601      	mov	r1, r0
 23fcfe0:	a804      	add	r0, sp, #16
 23fcfe2:	f7ff ffc5 	bl	23fcf70 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fcfe6:	4e14      	ldr	r6, [pc, #80]	; (23fd038 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fcfe8:	a804      	add	r0, sp, #16
 23fcfea:	f001 fb5b 	bl	23fe6a4 <_ZN5spark18JSONObjectIterator4nextEv>
 23fcfee:	b1e8      	cbz	r0, 23fd02c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fcff0:	4668      	mov	r0, sp
 23fcff2:	a904      	add	r1, sp, #16
 23fcff4:	f7ff ffcd 	bl	23fcf92 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fcff8:	4631      	mov	r1, r6
 23fcffa:	9802      	ldr	r0, [sp, #8]
 23fcffc:	f7ff fe57 	bl	23fccae <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd000:	4604      	mov	r4, r0
 23fd002:	b110      	cbz	r0, 23fd00a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd004:	1e2c      	subs	r4, r5, #0
 23fd006:	bf18      	it	ne
 23fd008:	2401      	movne	r4, #1
 23fd00a:	a801      	add	r0, sp, #4
 23fd00c:	f7fc f842 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd010:	2c00      	cmp	r4, #0
 23fd012:	d0e9      	beq.n	23fcfe8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd014:	4668      	mov	r0, sp
 23fd016:	a904      	add	r1, sp, #16
 23fd018:	f7ff ffcc 	bl	23fcfb4 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd01c:	4668      	mov	r0, sp
 23fd01e:	f001 fae4 	bl	23fe5ea <_ZNK5spark9JSONValue5toIntEv>
 23fd022:	6028      	str	r0, [r5, #0]
 23fd024:	a801      	add	r0, sp, #4
 23fd026:	f7fc f835 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd02a:	e7dd      	b.n	23fcfe8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd02c:	a805      	add	r0, sp, #20
 23fd02e:	f7fc f831 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd032:	b00a      	add	sp, #40	; 0x28
 23fd034:	bd70      	pop	{r4, r5, r6, pc}
 23fd036:	bf00      	nop
 23fd038:	023ffaec 	.word	0x023ffaec

023fd03c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd03c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd03e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fd040:	4913      	ldr	r1, [pc, #76]	; (23fd090 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fd042:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd044:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fd046:	f7fb fd13 	bl	23f8a70 <strcmp>
 23fd04a:	b950      	cbnz	r0, 23fd062 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fd04c:	f001 fa06 	bl	23fe45c <_Z16_fetch_usbserialv>
 23fd050:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd054:	f001 f9f2 	bl	23fe43c <_ZN9USBSerial5beginEl>
}
 23fd058:	b003      	add	sp, #12
 23fd05a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fd05e:	f001 b9fd 	b.w	23fe45c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fd062:	4620      	mov	r0, r4
 23fd064:	490b      	ldr	r1, [pc, #44]	; (23fd094 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fd066:	f7fb fd03 	bl	23f8a70 <strcmp>
 23fd06a:	b978      	cbnz	r0, 23fd08c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fd06c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fd070:	a901      	add	r1, sp, #4
 23fd072:	4628      	mov	r0, r5
        int baud = 9600;
 23fd074:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fd076:	f7ff ffaf 	bl	23fcfd8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fd07a:	f001 fe91 	bl	23feda0 <_Z22__fetch_global_Serial1v>
 23fd07e:	9901      	ldr	r1, [sp, #4]
 23fd080:	f001 fc3e 	bl	23fe900 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fd084:	f001 fe8c 	bl	23feda0 <_Z22__fetch_global_Serial1v>
}
 23fd088:	b003      	add	sp, #12
 23fd08a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fd08c:	2000      	movs	r0, #0
 23fd08e:	e7fb      	b.n	23fd088 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fd090:	023ffaf1 	.word	0x023ffaf1
 23fd094:	023ffaf8 	.word	0x023ffaf8

023fd098 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd098:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fd09a:	2614      	movs	r6, #20
 23fd09c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd0a0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd0a2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd0a6:	42ae      	cmp	r6, r5
 23fd0a8:	d005      	beq.n	23fd0b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fd0aa:	f105 0008 	add.w	r0, r5, #8
 23fd0ae:	f7ff fff3 	bl	23fd098 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd0b2:	3514      	adds	r5, #20
 23fd0b4:	e7f7      	b.n	23fd0a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fd0b6:	6820      	ldr	r0, [r4, #0]
 23fd0b8:	f7fc feea 	bl	23f9e90 <free>
}
 23fd0bc:	4620      	mov	r0, r4
 23fd0be:	bd70      	pop	{r4, r5, r6, pc}

023fd0c0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fd0c0:	b510      	push	{r4, lr}
 23fd0c2:	4604      	mov	r4, r0
 23fd0c4:	300c      	adds	r0, #12
 23fd0c6:	f7ff ffe7 	bl	23fd098 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd0ca:	4620      	mov	r0, r4
 23fd0cc:	f7fd fefe 	bl	23faecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd0d0:	4620      	mov	r0, r4
 23fd0d2:	bd10      	pop	{r4, pc}

023fd0d4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fd0d4:	b510      	push	{r4, lr}
 23fd0d6:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fd0d8:	4b03      	ldr	r3, [pc, #12]	; (23fd0e8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fd0da:	f840 3b04 	str.w	r3, [r0], #4
 23fd0de:	f7ff ffef 	bl	23fd0c0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fd0e2:	4620      	mov	r0, r4
 23fd0e4:	bd10      	pop	{r4, pc}
 23fd0e6:	bf00      	nop
 23fd0e8:	023ff80c 	.word	0x023ff80c

023fd0ec <_ZN5spark16StreamLogHandlerD0Ev>:
 23fd0ec:	b510      	push	{r4, lr}
 23fd0ee:	4604      	mov	r4, r0
 23fd0f0:	f7ff fff0 	bl	23fd0d4 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd0f4:	4620      	mov	r0, r4
 23fd0f6:	2124      	movs	r1, #36	; 0x24
 23fd0f8:	f7fb fced 	bl	23f8ad6 <_ZdlPvj>
 23fd0fc:	4620      	mov	r0, r4
 23fd0fe:	bd10      	pop	{r4, pc}

023fd100 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fd100:	b510      	push	{r4, lr}
 23fd102:	4604      	mov	r4, r0
 23fd104:	4b02      	ldr	r3, [pc, #8]	; (23fd110 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fd106:	6003      	str	r3, [r0, #0]
 23fd108:	f7ff ffe4 	bl	23fd0d4 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd10c:	4620      	mov	r0, r4
 23fd10e:	bd10      	pop	{r4, pc}
 23fd110:	023ffb84 	.word	0x023ffb84

023fd114 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fd114:	b510      	push	{r4, lr}
 23fd116:	4604      	mov	r4, r0
 23fd118:	f7ff fff2 	bl	23fd100 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fd11c:	4620      	mov	r0, r4
 23fd11e:	2124      	movs	r1, #36	; 0x24
 23fd120:	f7fb fcd9 	bl	23f8ad6 <_ZdlPvj>
 23fd124:	4620      	mov	r0, r4
 23fd126:	bd10      	pop	{r4, pc}

023fd128 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd128:	680a      	ldr	r2, [r1, #0]
 23fd12a:	b510      	push	{r4, lr}
 23fd12c:	6002      	str	r2, [r0, #0]
 23fd12e:	684a      	ldr	r2, [r1, #4]
 23fd130:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd132:	2200      	movs	r2, #0
 23fd134:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd138:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd13a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd13c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd13e:	6084      	str	r4, [r0, #8]
 23fd140:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd142:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd144:	60c4      	str	r4, [r0, #12]
 23fd146:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd148:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd14a:	6104      	str	r4, [r0, #16]
 23fd14c:	bd10      	pop	{r4, pc}

023fd14e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
 23fd14e:	2200      	movs	r2, #0
 23fd150:	e9c0 2200 	strd	r2, r2, [r0]
 23fd154:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fd156:	b510      	push	{r4, lr}
 23fd158:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd15a:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd15c:	6004      	str	r4, [r0, #0]
 23fd15e:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd160:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd162:	6044      	str	r4, [r0, #4]
 23fd164:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd166:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd168:	6084      	str	r4, [r0, #8]
}
 23fd16a:	bd10      	pop	{r4, pc}

023fd16c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fd16c:	b510      	push	{r4, lr}
 23fd16e:	4604      	mov	r4, r0
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fd170:	6803      	ldr	r3, [r0, #0]
 23fd172:	6818      	ldr	r0, [r3, #0]
 23fd174:	f7fc fb36 	bl	23f97e4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fd178:	4620      	mov	r0, r4
 23fd17a:	bd10      	pop	{r4, pc}

023fd17c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fd17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd180:	b087      	sub	sp, #28
 23fd182:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fd184:	4b1c      	ldr	r3, [pc, #112]	; (23fd1f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fd186:	4680      	mov	r8, r0
 23fd188:	685b      	ldr	r3, [r3, #4]
 23fd18a:	4689      	mov	r9, r1
 23fd18c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd190:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fd192:	b96b      	cbnz	r3, 23fd1b0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fd194:	f7ff febe 	bl	23fcf14 <_ZN5spark10LogManager8instanceEv>
 23fd198:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd19a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fd19e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd1a0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fd1a2:	f7ff fd82 	bl	23fccaa <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fd1a6:	7b23      	ldrb	r3, [r4, #12]
 23fd1a8:	b12b      	cbz	r3, 23fd1b6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fd1aa:	a805      	add	r0, sp, #20
 23fd1ac:	f7ff ffde 	bl	23fd16c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fd1b0:	b007      	add	sp, #28
 23fd1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fd1b6:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fd1b8:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fd1bc:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fd1be:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd1c2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd1c6:	45aa      	cmp	sl, r5
 23fd1c8:	d012      	beq.n	23fd1f0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fd1ca:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fd1ce:	4631      	mov	r1, r6
 23fd1d0:	1d38      	adds	r0, r7, #4
 23fd1d2:	f7ff fdf7 	bl	23fcdc4 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd1d6:	4581      	cmp	r9, r0
 23fd1d8:	d3f5      	bcc.n	23fd1c6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fd1da:	9a03      	ldr	r2, [sp, #12]
 23fd1dc:	683b      	ldr	r3, [r7, #0]
 23fd1de:	9200      	str	r2, [sp, #0]
 23fd1e0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fd1e4:	464a      	mov	r2, r9
 23fd1e6:	4633      	mov	r3, r6
 23fd1e8:	4641      	mov	r1, r8
 23fd1ea:	4638      	mov	r0, r7
 23fd1ec:	47d8      	blx	fp
 23fd1ee:	e7ea      	b.n	23fd1c6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fd1f0:	2300      	movs	r3, #0
 23fd1f2:	7323      	strb	r3, [r4, #12]
 23fd1f4:	e7d9      	b.n	23fd1aa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fd1f6:	bf00      	nop
 23fd1f8:	e000ed00 	.word	0xe000ed00

023fd1fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fd1fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd200:	469b      	mov	fp, r3
 23fd202:	4b1a      	ldr	r3, [pc, #104]	; (23fd26c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fd204:	4680      	mov	r8, r0
 23fd206:	685b      	ldr	r3, [r3, #4]
 23fd208:	4689      	mov	r9, r1
 23fd20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd20e:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fd210:	b96b      	cbnz	r3, 23fd22e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fd212:	f7ff fe7f 	bl	23fcf14 <_ZN5spark10LogManager8instanceEv>
 23fd216:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd218:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd21c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd21e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd220:	f7ff fd43 	bl	23fccaa <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fd224:	7b23      	ldrb	r3, [r4, #12]
 23fd226:	b12b      	cbz	r3, 23fd234 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fd228:	a801      	add	r0, sp, #4
 23fd22a:	f7ff ff9f 	bl	23fd16c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd22e:	b003      	add	sp, #12
 23fd230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fd234:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fd236:	b2f6      	uxtb	r6, r6
 23fd238:	7323      	strb	r3, [r4, #12]
 23fd23a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd23e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd242:	4555      	cmp	r5, sl
 23fd244:	d00e      	beq.n	23fd264 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fd246:	f855 7b04 	ldr.w	r7, [r5], #4
 23fd24a:	4659      	mov	r1, fp
 23fd24c:	1d38      	adds	r0, r7, #4
 23fd24e:	f7ff fdb9 	bl	23fcdc4 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd252:	4286      	cmp	r6, r0
 23fd254:	d3f5      	bcc.n	23fd242 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fd256:	683b      	ldr	r3, [r7, #0]
 23fd258:	464a      	mov	r2, r9
 23fd25a:	4641      	mov	r1, r8
 23fd25c:	4638      	mov	r0, r7
 23fd25e:	68db      	ldr	r3, [r3, #12]
 23fd260:	4798      	blx	r3
 23fd262:	e7ee      	b.n	23fd242 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fd264:	2300      	movs	r3, #0
 23fd266:	7323      	strb	r3, [r4, #12]
 23fd268:	e7de      	b.n	23fd228 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fd26a:	bf00      	nop
 23fd26c:	e000ed00 	.word	0xe000ed00

023fd270 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fd270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fd274:	4b16      	ldr	r3, [pc, #88]	; (23fd2d0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fd276:	4605      	mov	r5, r0
 23fd278:	685b      	ldr	r3, [r3, #4]
 23fd27a:	460f      	mov	r7, r1
 23fd27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fd280:	bb1b      	cbnz	r3, 23fd2ca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fd282:	f7ff fe47 	bl	23fcf14 <_ZN5spark10LogManager8instanceEv>
 23fd286:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd288:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd28c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd28e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd290:	f7ff fd0b 	bl	23fccaa <_ZN14RecursiveMutex4lockEv.isra.0>
 23fd294:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fd298:	2446      	movs	r4, #70	; 0x46
 23fd29a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd29e:	45b0      	cmp	r8, r6
 23fd2a0:	d109      	bne.n	23fd2b6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fd2a2:	a801      	add	r0, sp, #4
 23fd2a4:	f7ff ff62 	bl	23fd16c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fd2a8:	42a5      	cmp	r5, r4
 23fd2aa:	bfb4      	ite	lt
 23fd2ac:	2000      	movlt	r0, #0
 23fd2ae:	2001      	movge	r0, #1
}
 23fd2b0:	b002      	add	sp, #8
 23fd2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fd2b6:	f856 0b04 	ldr.w	r0, [r6], #4
 23fd2ba:	4639      	mov	r1, r7
 23fd2bc:	3004      	adds	r0, #4
 23fd2be:	f7ff fd81 	bl	23fcdc4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fd2c2:	4284      	cmp	r4, r0
 23fd2c4:	bfa8      	it	ge
 23fd2c6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fd2c8:	e7e9      	b.n	23fd29e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fd2ca:	2000      	movs	r0, #0
 23fd2cc:	e7f0      	b.n	23fd2b0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fd2ce:	bf00      	nop
 23fd2d0:	e000ed00 	.word	0xe000ed00

023fd2d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd2d6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fd2da:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd2dc:	4604      	mov	r4, r0
 23fd2de:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd2e0:	db0d      	blt.n	23fd2fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fd2e2:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fd2e4:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fd2e6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fd2e8:	dd04      	ble.n	23fd2f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fd2ea:	00b9      	lsls	r1, r7, #2
 23fd2ec:	f7fc fdde 	bl	23f9eac <realloc>
            if (!d) {
 23fd2f0:	b918      	cbnz	r0, 23fd2fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fd2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fd2f4:	f7fc fdcc 	bl	23f9e90 <free>
        T* d = nullptr;
 23fd2f8:	2000      	movs	r0, #0
        data_ = d;
 23fd2fa:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fd2fc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fd2fe:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fd300:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fd302:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fd306:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd308:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fd30c:	1d08      	adds	r0, r1, #4
 23fd30e:	f001 ff5c 	bl	23ff1ca <memmove>
    new(p) T(std::move(value));
 23fd312:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fd316:	6863      	ldr	r3, [r4, #4]
    return true;
 23fd318:	2001      	movs	r0, #1
    ++size_;
 23fd31a:	3301      	adds	r3, #1
 23fd31c:	6063      	str	r3, [r4, #4]
    return true;
 23fd31e:	e7e8      	b.n	23fd2f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fd320 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd322:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd324:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd328:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd32a:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd32c:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fd32e:	f7ff fcbc 	bl	23fccaa <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fd332:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fd336:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fd33a:	4293      	cmp	r3, r2
 23fd33c:	4619      	mov	r1, r3
 23fd33e:	d00a      	beq.n	23fd356 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fd340:	6809      	ldr	r1, [r1, #0]
 23fd342:	3304      	adds	r3, #4
 23fd344:	42a9      	cmp	r1, r5
 23fd346:	d1f8      	bne.n	23fd33a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fd348:	a801      	add	r0, sp, #4
 23fd34a:	f7ff ff0f 	bl	23fd16c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd34e:	2500      	movs	r5, #0
}
 23fd350:	4628      	mov	r0, r5
 23fd352:	b003      	add	sp, #12
 23fd354:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fd356:	4629      	mov	r1, r5
 23fd358:	4620      	mov	r0, r4
 23fd35a:	f7ff ffbb 	bl	23fd2d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fd35e:	4605      	mov	r5, r0
 23fd360:	2800      	cmp	r0, #0
 23fd362:	d0f1      	beq.n	23fd348 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fd364:	6863      	ldr	r3, [r4, #4]
 23fd366:	2b01      	cmp	r3, #1
 23fd368:	d101      	bne.n	23fd36e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fd36a:	f7ff fdef 	bl	23fcf4c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd36e:	a801      	add	r0, sp, #4
 23fd370:	f7ff fefc 	bl	23fd16c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd374:	e7ec      	b.n	23fd350 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fd376 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fd376:	460b      	mov	r3, r1
 23fd378:	b570      	push	{r4, r5, r6, lr}
 23fd37a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fd37c:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fd380:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fd384:	4282      	cmp	r2, r0
 23fd386:	d00f      	beq.n	23fd3a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fd388:	4601      	mov	r1, r0
            if (*p == value) {
 23fd38a:	681d      	ldr	r5, [r3, #0]
 23fd38c:	f851 6b04 	ldr.w	r6, [r1], #4
 23fd390:	42ae      	cmp	r6, r5
 23fd392:	d107      	bne.n	23fd3a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd394:	1a52      	subs	r2, r2, r1
 23fd396:	f001 ff18 	bl	23ff1ca <memmove>
    return true;
 23fd39a:	2001      	movs	r0, #1
    --size_;
 23fd39c:	6863      	ldr	r3, [r4, #4]
 23fd39e:	3b01      	subs	r3, #1
 23fd3a0:	6063      	str	r3, [r4, #4]
}
 23fd3a2:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fd3a4:	4608      	mov	r0, r1
 23fd3a6:	e7ed      	b.n	23fd384 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fd3a8:	2000      	movs	r0, #0
 23fd3aa:	e7fa      	b.n	23fd3a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fd3ac <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd3ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fd3ae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd3b0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd3b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd3b6:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd3b8:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fd3ba:	f7ff fc76 	bl	23fccaa <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fd3be:	4620      	mov	r0, r4
 23fd3c0:	a901      	add	r1, sp, #4
 23fd3c2:	f7ff ffd8 	bl	23fd376 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fd3c6:	b118      	cbz	r0, 23fd3d0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fd3c8:	6863      	ldr	r3, [r4, #4]
 23fd3ca:	b90b      	cbnz	r3, 23fd3d0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fd3cc:	f7ff fdca 	bl	23fcf64 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd3d0:	a803      	add	r0, sp, #12
 23fd3d2:	f7ff fecb 	bl	23fd16c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd3d6:	b004      	add	sp, #16
 23fd3d8:	bd10      	pop	{r4, pc}

023fd3da <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fd3da:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fd3dc:	b570      	push	{r4, r5, r6, lr}
 23fd3de:	4604      	mov	r4, r0
 23fd3e0:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fd3e4:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd3e8:	42ae      	cmp	r6, r5
 23fd3ea:	d015      	beq.n	23fd418 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fd3ec:	4620      	mov	r0, r4
 23fd3ee:	f105 0110 	add.w	r1, r5, #16
 23fd3f2:	f7ff ffc0 	bl	23fd376 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fd3f6:	6863      	ldr	r3, [r4, #4]
 23fd3f8:	b90b      	cbnz	r3, 23fd3fe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fd3fa:	f7ff fdb3 	bl	23fcf64 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fd3fe:	69e0      	ldr	r0, [r4, #28]
 23fd400:	6929      	ldr	r1, [r5, #16]
 23fd402:	6803      	ldr	r3, [r0, #0]
 23fd404:	68db      	ldr	r3, [r3, #12]
 23fd406:	4798      	blx	r3
        if (h.stream) {
 23fd408:	6969      	ldr	r1, [r5, #20]
 23fd40a:	b119      	cbz	r1, 23fd414 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fd40c:	6a20      	ldr	r0, [r4, #32]
 23fd40e:	6803      	ldr	r3, [r0, #0]
 23fd410:	68db      	ldr	r3, [r3, #12]
 23fd412:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd414:	3518      	adds	r5, #24
 23fd416:	e7e7      	b.n	23fd3e8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fd418:	2618      	movs	r6, #24
 23fd41a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd41e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd422:	42ae      	cmp	r6, r5
 23fd424:	d004      	beq.n	23fd430 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fd426:	4628      	mov	r0, r5
 23fd428:	f7fc fe0e 	bl	23fa048 <_ZN6StringD1Ev>
 23fd42c:	3518      	adds	r5, #24
 23fd42e:	e7f8      	b.n	23fd422 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fd430:	2300      	movs	r3, #0
 23fd432:	6163      	str	r3, [r4, #20]
}
 23fd434:	bd70      	pop	{r4, r5, r6, pc}

023fd436 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fd436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd438:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fd43a:	f7ff fd93 	bl	23fcf64 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd43e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fd442:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd444:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd446:	f7ff fc30 	bl	23fccaa <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fd44a:	4620      	mov	r0, r4
 23fd44c:	f7ff ffc5 	bl	23fd3da <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fd450:	a801      	add	r0, sp, #4
 23fd452:	f7ff fe8b 	bl	23fd16c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fd456:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fd458:	b108      	cbz	r0, 23fd45e <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fd45a:	f7fc f9a7 	bl	23f97ac <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fd45e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd462:	2618      	movs	r6, #24
 23fd464:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd468:	42ae      	cmp	r6, r5
 23fd46a:	d004      	beq.n	23fd476 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fd46c:	4628      	mov	r0, r5
 23fd46e:	f7fc fdeb 	bl	23fa048 <_ZN6StringD1Ev>
 23fd472:	3518      	adds	r5, #24
 23fd474:	e7f8      	b.n	23fd468 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fd476:	6920      	ldr	r0, [r4, #16]
 23fd478:	f7fc fd0a 	bl	23f9e90 <free>
 23fd47c:	6820      	ldr	r0, [r4, #0]
 23fd47e:	f7fc fd07 	bl	23f9e90 <free>
}
 23fd482:	4620      	mov	r0, r4
 23fd484:	b002      	add	sp, #8
 23fd486:	bd70      	pop	{r4, r5, r6, pc}

023fd488 <__tcf_2>:
    static LogManager mgr;
 23fd488:	4801      	ldr	r0, [pc, #4]	; (23fd490 <__tcf_2+0x8>)
 23fd48a:	f7ff bfd4 	b.w	23fd436 <_ZN5spark10LogManagerD1Ev>
 23fd48e:	bf00      	nop
 23fd490:	1007ae78 	.word	0x1007ae78

023fd494 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fd494:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd498:	4604      	mov	r4, r0
 23fd49a:	460d      	mov	r5, r1
 23fd49c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd49e:	d915      	bls.n	23fd4cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fd4a0:	4290      	cmp	r0, r2
 23fd4a2:	d214      	bcs.n	23fd4ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fd4a4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fd4a8:	1a75      	subs	r5, r6, r1
 23fd4aa:	f1a1 0714 	sub.w	r7, r1, #20
 23fd4ae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd4b0:	42b7      	cmp	r7, r6
 23fd4b2:	d01a      	beq.n	23fd4ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fd4b4:	b11c      	cbz	r4, 23fd4be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fd4b6:	4631      	mov	r1, r6
 23fd4b8:	4620      	mov	r0, r4
 23fd4ba:	f7ff fe35 	bl	23fd128 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fd4be:	f106 0008 	add.w	r0, r6, #8
 23fd4c2:	f7ff fde9 	bl	23fd098 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fd4c6:	3e14      	subs	r6, #20
 23fd4c8:	3c14      	subs	r4, #20
 23fd4ca:	e7f1      	b.n	23fd4b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fd4cc:	d00d      	beq.n	23fd4ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fd4ce:	42b5      	cmp	r5, r6
 23fd4d0:	d00b      	beq.n	23fd4ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fd4d2:	b11c      	cbz	r4, 23fd4dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fd4d4:	4629      	mov	r1, r5
 23fd4d6:	4620      	mov	r0, r4
 23fd4d8:	f7ff fe26 	bl	23fd128 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fd4dc:	f105 0008 	add.w	r0, r5, #8
 23fd4e0:	f7ff fdda 	bl	23fd098 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fd4e4:	3514      	adds	r5, #20
 23fd4e6:	3414      	adds	r4, #20
 23fd4e8:	e7f1      	b.n	23fd4ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fd4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd4ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fd4ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd4f0:	4604      	mov	r4, r0
 23fd4f2:	460d      	mov	r5, r1
 23fd4f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd4f6:	d914      	bls.n	23fd522 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fd4f8:	4290      	cmp	r0, r2
 23fd4fa:	d213      	bcs.n	23fd524 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fd4fc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fd500:	1a75      	subs	r5, r6, r1
 23fd502:	f1a1 0710 	sub.w	r7, r1, #16
 23fd506:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd508:	42b7      	cmp	r7, r6
 23fd50a:	d018      	beq.n	23fd53e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fd50c:	b11c      	cbz	r4, 23fd516 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fd50e:	4631      	mov	r1, r6
 23fd510:	4620      	mov	r0, r4
 23fd512:	f7fc fe22 	bl	23fa15a <_ZN6StringC1EOS_>
                end->~T();
 23fd516:	4630      	mov	r0, r6
 23fd518:	f7fc fd96 	bl	23fa048 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd51c:	3e10      	subs	r6, #16
 23fd51e:	3c10      	subs	r4, #16
 23fd520:	e7f2      	b.n	23fd508 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fd522:	d00c      	beq.n	23fd53e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd524:	42b5      	cmp	r5, r6
 23fd526:	d00a      	beq.n	23fd53e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fd528:	b11c      	cbz	r4, 23fd532 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fd52a:	4629      	mov	r1, r5
 23fd52c:	4620      	mov	r0, r4
 23fd52e:	f7fc fe14 	bl	23fa15a <_ZN6StringC1EOS_>
                p->~T();
 23fd532:	4628      	mov	r0, r5
 23fd534:	f7fc fd88 	bl	23fa048 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd538:	3510      	adds	r5, #16
 23fd53a:	3410      	adds	r4, #16
 23fd53c:	e7f2      	b.n	23fd524 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fd53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd540 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fd540:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fd542:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fd544:	4605      	mov	r5, r0
        if (n > 0) {
 23fd546:	dd11      	ble.n	23fd56c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fd548:	0130      	lsls	r0, r6, #4
 23fd54a:	f7fc fc93 	bl	23f9e74 <malloc>
            if (!d) {
 23fd54e:	4604      	mov	r4, r0
 23fd550:	b158      	cbz	r0, 23fd56a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fd552:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd556:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fd55a:	f7ff ffc7 	bl	23fd4ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd55e:	6828      	ldr	r0, [r5, #0]
 23fd560:	f7fc fc96 	bl	23f9e90 <free>
        return true;
 23fd564:	2001      	movs	r0, #1
        data_ = d;
 23fd566:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd568:	60ae      	str	r6, [r5, #8]
    }
 23fd56a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fd56c:	2400      	movs	r4, #0
 23fd56e:	e7f6      	b.n	23fd55e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fd570 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd574:	4690      	mov	r8, r2
        capacity_(0) {
 23fd576:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd578:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd57a:	b095      	sub	sp, #84	; 0x54
 23fd57c:	9103      	str	r1, [sp, #12]
    return size_;
 23fd57e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fd582:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fd584:	4299      	cmp	r1, r3
        capacity_(0) {
 23fd586:	e9c0 3300 	strd	r3, r3, [r0]
 23fd58a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fd58e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fd592:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd596:	7602      	strb	r2, [r0, #24]
 23fd598:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fd59a:	dc23      	bgt.n	23fd5e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fd59c:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fd5a0:	2314      	movs	r3, #20
 23fd5a2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fd5a6:	42af      	cmp	r7, r5
 23fd5a8:	d03b      	beq.n	23fd622 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fd5aa:	4629      	mov	r1, r5
 23fd5ac:	a80b      	add	r0, sp, #44	; 0x2c
 23fd5ae:	f7fc fdd4 	bl	23fa15a <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fd5b2:	a90b      	add	r1, sp, #44	; 0x2c
 23fd5b4:	a80f      	add	r0, sp, #60	; 0x3c
 23fd5b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fd5b8:	f7fc fdcf 	bl	23fa15a <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd5bc:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fd5c0:	4299      	cmp	r1, r3
 23fd5c2:	da1b      	bge.n	23fd5fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fd5c4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fd5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fd5c8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fd5cc:	4631      	mov	r1, r6
 23fd5ce:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fd5d2:	f106 0010 	add.w	r0, r6, #16
 23fd5d6:	f7ff ff89 	bl	23fd4ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fd5da:	b9ee      	cbnz	r6, 23fd618 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fd5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd5de:	3301      	adds	r3, #1
 23fd5e0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fd5e2:	e011      	b.n	23fd608 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fd5e4:	a808      	add	r0, sp, #32
 23fd5e6:	f7ff ffab 	bl	23fd540 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd5ea:	2800      	cmp	r0, #0
 23fd5ec:	d1d6      	bne.n	23fd59c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fd5ee:	a808      	add	r0, sp, #32
 23fd5f0:	f7fd fc6c 	bl	23faecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd5f4:	4620      	mov	r0, r4
 23fd5f6:	b015      	add	sp, #84	; 0x54
 23fd5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd5fc:	3101      	adds	r1, #1
 23fd5fe:	a808      	add	r0, sp, #32
 23fd600:	f7ff ff9e 	bl	23fd540 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd604:	2800      	cmp	r0, #0
 23fd606:	d1dd      	bne.n	23fd5c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fd608:	a80f      	add	r0, sp, #60	; 0x3c
 23fd60a:	f7fc fd1d 	bl	23fa048 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fd60e:	a80b      	add	r0, sp, #44	; 0x2c
 23fd610:	f7fc fd1a 	bl	23fa048 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fd614:	3514      	adds	r5, #20
 23fd616:	e7c6      	b.n	23fd5a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fd618:	4630      	mov	r0, r6
 23fd61a:	a90f      	add	r1, sp, #60	; 0x3c
 23fd61c:	f7fc fd9d 	bl	23fa15a <_ZN6StringC1EOS_>
 23fd620:	e7dc      	b.n	23fd5dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fd622:	2600      	movs	r6, #0
 23fd624:	f04f 0914 	mov.w	r9, #20
 23fd628:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fd62c:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fd62e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fd632:	429e      	cmp	r6, r3
 23fd634:	da7c      	bge.n	23fd730 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fd636:	0133      	lsls	r3, r6, #4
 23fd638:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fd63a:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fd63c:	b90b      	cbnz	r3, 23fd642 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fd63e:	3601      	adds	r6, #1
 23fd640:	e7f5      	b.n	23fd62e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fd642:	2300      	movs	r3, #0
 23fd644:	9307      	str	r3, [sp, #28]
 23fd646:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fd64a:	ad0b      	add	r5, sp, #44	; 0x2c
 23fd64c:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fd64e:	a907      	add	r1, sp, #28
 23fd650:	a806      	add	r0, sp, #24
 23fd652:	f7ff fb0a 	bl	23fcc6a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd656:	4682      	mov	sl, r0
 23fd658:	2800      	cmp	r0, #0
 23fd65a:	d0f0      	beq.n	23fd63e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fd65c:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd660:	4601      	mov	r1, r0
            bool found = false;
 23fd662:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd666:	4628      	mov	r0, r5
 23fd668:	9a07      	ldr	r2, [sp, #28]
 23fd66a:	f10d 0317 	add.w	r3, sp, #23
 23fd66e:	f7ff fb6d 	bl	23fcd4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd672:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd676:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd678:	2f00      	cmp	r7, #0
 23fd67a:	d14a      	bne.n	23fd712 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fd67c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fd680:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fd684:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fd688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd68c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fd690:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fd694:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd696:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fd69a:	4293      	cmp	r3, r2
 23fd69c:	db17      	blt.n	23fd6ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fd69e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fd6a2:	f1ba 0f00 	cmp.w	sl, #0
 23fd6a6:	dd30      	ble.n	23fd70a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fd6a8:	fb09 f00a 	mul.w	r0, r9, sl
 23fd6ac:	f7fc fbe2 	bl	23f9e74 <malloc>
            if (!d) {
 23fd6b0:	4683      	mov	fp, r0
 23fd6b2:	b360      	cbz	r0, 23fd70e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fd6b4:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd6b8:	fb09 1202 	mla	r2, r9, r2, r1
 23fd6bc:	f7ff feea 	bl	23fd494 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fd6c0:	6828      	ldr	r0, [r5, #0]
 23fd6c2:	f7fc fbe5 	bl	23f9e90 <free>
        data_ = d;
 23fd6c6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fd6ca:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fd6ce:	682b      	ldr	r3, [r5, #0]
 23fd6d0:	9a01      	ldr	r2, [sp, #4]
 23fd6d2:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fd6d6:	686a      	ldr	r2, [r5, #4]
 23fd6d8:	4651      	mov	r1, sl
 23fd6da:	fb09 3202 	mla	r2, r9, r2, r3
 23fd6de:	f10a 0014 	add.w	r0, sl, #20
 23fd6e2:	f7ff fed7 	bl	23fd494 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fd6e6:	f1ba 0f00 	cmp.w	sl, #0
 23fd6ea:	d003      	beq.n	23fd6f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fd6ec:	4650      	mov	r0, sl
 23fd6ee:	a90f      	add	r1, sp, #60	; 0x3c
 23fd6f0:	f7ff fd1a 	bl	23fd128 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fd6f4:	686b      	ldr	r3, [r5, #4]
 23fd6f6:	3301      	adds	r3, #1
 23fd6f8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fd6fa:	a811      	add	r0, sp, #68	; 0x44
 23fd6fc:	f7ff fccc 	bl	23fd098 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd700:	b13f      	cbz	r7, 23fd712 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fd702:	a80b      	add	r0, sp, #44	; 0x2c
 23fd704:	f7ff fcc8 	bl	23fd098 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd708:	e771      	b.n	23fd5ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fd70a:	46bb      	mov	fp, r7
 23fd70c:	e7d8      	b.n	23fd6c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd70e:	2701      	movs	r7, #1
 23fd710:	e7f3      	b.n	23fd6fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fd712:	9b01      	ldr	r3, [sp, #4]
 23fd714:	682d      	ldr	r5, [r5, #0]
 23fd716:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fd71a:	9b06      	ldr	r3, [sp, #24]
 23fd71c:	781b      	ldrb	r3, [r3, #0]
 23fd71e:	b92b      	cbnz	r3, 23fd72c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fd720:	f8d8 3000 	ldr.w	r3, [r8]
 23fd724:	9a02      	ldr	r2, [sp, #8]
 23fd726:	4413      	add	r3, r2
 23fd728:	7c1b      	ldrb	r3, [r3, #16]
 23fd72a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fd72c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fd72e:	e78e      	b.n	23fd64e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd730:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd732:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd734:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd736:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd738:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd73a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fd73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fd73e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd740:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd742:	60a2      	str	r2, [r4, #8]
 23fd744:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fd746:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd748:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd74a:	60e2      	str	r2, [r4, #12]
 23fd74c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fd74e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd750:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd752:	6122      	str	r2, [r4, #16]
 23fd754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fd756:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fd758:	9b03      	ldr	r3, [sp, #12]
 23fd75a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fd75c:	6162      	str	r2, [r4, #20]
 23fd75e:	7623      	strb	r3, [r4, #24]
 23fd760:	e7cf      	b.n	23fd702 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fd764 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd764:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd766:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fd768:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd76a:	4617      	mov	r7, r2
 23fd76c:	b087      	sub	sp, #28
 23fd76e:	460d      	mov	r5, r1
        stream_(&stream) {
 23fd770:	4668      	mov	r0, sp
 23fd772:	4619      	mov	r1, r3
 23fd774:	f7fb fda5 	bl	23f92c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fd778:	4b0b      	ldr	r3, [pc, #44]	; (23fd7a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fd77a:	4669      	mov	r1, sp
 23fd77c:	f846 3b04 	str.w	r3, [r6], #4
 23fd780:	a803      	add	r0, sp, #12
 23fd782:	f7fb fd9e 	bl	23f92c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fd786:	4639      	mov	r1, r7
 23fd788:	aa03      	add	r2, sp, #12
 23fd78a:	4630      	mov	r0, r6
 23fd78c:	f7ff fef0 	bl	23fd570 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd790:	a803      	add	r0, sp, #12
 23fd792:	f7fb fd55 	bl	23f9240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fd796:	4668      	mov	r0, sp
 23fd798:	f7fb fd52 	bl	23f9240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fd79c:	4620      	mov	r0, r4
        stream_(&stream) {
 23fd79e:	4b03      	ldr	r3, [pc, #12]	; (23fd7ac <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fd7a0:	6225      	str	r5, [r4, #32]
 23fd7a2:	6023      	str	r3, [r4, #0]
}
 23fd7a4:	b007      	add	sp, #28
 23fd7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fd7a8:	023ff80c 	.word	0x023ff80c
 23fd7ac:	023ffb6c 	.word	0x023ffb6c

023fd7b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fd7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd7b2:	460f      	mov	r7, r1
 23fd7b4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd7b6:	4638      	mov	r0, r7
 23fd7b8:	491c      	ldr	r1, [pc, #112]	; (23fd82c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fd7ba:	4616      	mov	r6, r2
 23fd7bc:	461d      	mov	r5, r3
 23fd7be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd7c0:	f7fb f956 	bl	23f8a70 <strcmp>
 23fd7c4:	b9c0      	cbnz	r0, 23fd7f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fd7c6:	b1a4      	cbz	r4, 23fd7f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fd7c8:	4629      	mov	r1, r5
 23fd7ca:	a801      	add	r0, sp, #4
 23fd7cc:	f7ff fcbf 	bl	23fd14e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd7d0:	2024      	movs	r0, #36	; 0x24
 23fd7d2:	4917      	ldr	r1, [pc, #92]	; (23fd830 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd7d4:	f001 fbb4 	bl	23fef40 <_ZnwjRKSt9nothrow_t>
 23fd7d8:	4605      	mov	r5, r0
 23fd7da:	b130      	cbz	r0, 23fd7ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fd7dc:	ab01      	add	r3, sp, #4
 23fd7de:	4632      	mov	r2, r6
 23fd7e0:	4621      	mov	r1, r4
 23fd7e2:	f7ff ffbf 	bl	23fd764 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd7e6:	4b13      	ldr	r3, [pc, #76]	; (23fd834 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fd7e8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd7ea:	a801      	add	r0, sp, #4
 23fd7ec:	f7fb fd28 	bl	23f9240 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fd7f0:	462c      	mov	r4, r5
}
 23fd7f2:	4620      	mov	r0, r4
 23fd7f4:	b005      	add	sp, #20
 23fd7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fd7f8:	4638      	mov	r0, r7
 23fd7fa:	490f      	ldr	r1, [pc, #60]	; (23fd838 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fd7fc:	f7fb f938 	bl	23f8a70 <strcmp>
 23fd800:	b990      	cbnz	r0, 23fd828 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fd802:	2c00      	cmp	r4, #0
 23fd804:	d0f5      	beq.n	23fd7f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd806:	4629      	mov	r1, r5
 23fd808:	a801      	add	r0, sp, #4
 23fd80a:	f7ff fca0 	bl	23fd14e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd80e:	2024      	movs	r0, #36	; 0x24
 23fd810:	4907      	ldr	r1, [pc, #28]	; (23fd830 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd812:	f001 fb95 	bl	23fef40 <_ZnwjRKSt9nothrow_t>
 23fd816:	4605      	mov	r5, r0
 23fd818:	2800      	cmp	r0, #0
 23fd81a:	d0e6      	beq.n	23fd7ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fd81c:	4632      	mov	r2, r6
 23fd81e:	4621      	mov	r1, r4
 23fd820:	ab01      	add	r3, sp, #4
 23fd822:	f7ff ff9f 	bl	23fd764 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd826:	e7e0      	b.n	23fd7ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fd828:	2400      	movs	r4, #0
 23fd82a:	e7e2      	b.n	23fd7f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fd82c:	023ffb00 	.word	0x023ffb00
 23fd830:	023ffd44 	.word	0x023ffd44
 23fd834:	023ffb84 	.word	0x023ffb84
 23fd838:	023ffb04 	.word	0x023ffb04

023fd83c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fd83c:	4b01      	ldr	r3, [pc, #4]	; (23fd844 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd83e:	4a02      	ldr	r2, [pc, #8]	; (23fd848 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd840:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd842:	4770      	bx	lr
 23fd844:	1007ae74 	.word	0x1007ae74
 23fd848:	023ffb15 	.word	0x023ffb15

023fd84c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd850:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fd852:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd856:	4604      	mov	r4, r0
 23fd858:	460e      	mov	r6, r1
 23fd85a:	4617      	mov	r7, r2
 23fd85c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fd85e:	f000 fdfd 	bl	23fe45c <_Z16_fetch_usbserialv>
 23fd862:	4581      	cmp	r9, r0
 23fd864:	d04d      	beq.n	23fd902 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fd866:	792b      	ldrb	r3, [r5, #4]
 23fd868:	0719      	lsls	r1, r3, #28
 23fd86a:	d504      	bpl.n	23fd876 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fd86c:	4620      	mov	r0, r4
 23fd86e:	696a      	ldr	r2, [r5, #20]
 23fd870:	4954      	ldr	r1, [pc, #336]	; (23fd9c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fd872:	f7ff fad0 	bl	23fce16 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fd876:	f1b8 0f00 	cmp.w	r8, #0
 23fd87a:	d00d      	beq.n	23fd898 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fd87c:	215b      	movs	r1, #91	; 0x5b
 23fd87e:	4620      	mov	r0, r4
 23fd880:	f7ff fa58 	bl	23fcd34 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fd884:	4641      	mov	r1, r8
 23fd886:	4620      	mov	r0, r4
 23fd888:	f7ff fa45 	bl	23fcd16 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fd88c:	6823      	ldr	r3, [r4, #0]
 23fd88e:	2202      	movs	r2, #2
 23fd890:	4620      	mov	r0, r4
 23fd892:	68db      	ldr	r3, [r3, #12]
 23fd894:	494c      	ldr	r1, [pc, #304]	; (23fd9c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fd896:	4798      	blx	r3
    if (attr.has_file) {
 23fd898:	792b      	ldrb	r3, [r5, #4]
 23fd89a:	07da      	lsls	r2, r3, #31
 23fd89c:	d524      	bpl.n	23fd8e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fd89e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fd8a2:	212f      	movs	r1, #47	; 0x2f
 23fd8a4:	4640      	mov	r0, r8
 23fd8a6:	f001 fd3e 	bl	23ff326 <strrchr>
    if (s1) {
 23fd8aa:	b108      	cbz	r0, 23fd8b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fd8ac:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fd8b0:	4641      	mov	r1, r8
 23fd8b2:	4620      	mov	r0, r4
 23fd8b4:	f7ff fa2f 	bl	23fcd16 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fd8b8:	792b      	ldrb	r3, [r5, #4]
 23fd8ba:	079b      	lsls	r3, r3, #30
 23fd8bc:	d508      	bpl.n	23fd8d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fd8be:	213a      	movs	r1, #58	; 0x3a
 23fd8c0:	4620      	mov	r0, r4
 23fd8c2:	f7ff fa37 	bl	23fcd34 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fd8c6:	4620      	mov	r0, r4
 23fd8c8:	68ea      	ldr	r2, [r5, #12]
 23fd8ca:	4940      	ldr	r1, [pc, #256]	; (23fd9cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fd8cc:	f7ff faa3 	bl	23fce16 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fd8d0:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fd8d2:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fd8d4:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fd8d8:	4620      	mov	r0, r4
            write(", ", 2);
 23fd8da:	f04f 0202 	mov.w	r2, #2
 23fd8de:	68db      	ldr	r3, [r3, #12]
 23fd8e0:	bf14      	ite	ne
 23fd8e2:	493b      	ldrne	r1, [pc, #236]	; (23fd9d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fd8e4:	493b      	ldreq	r1, [pc, #236]	; (23fd9d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd8e6:	4798      	blx	r3
    if (attr.has_function) {
 23fd8e8:	792b      	ldrb	r3, [r5, #4]
 23fd8ea:	0758      	lsls	r0, r3, #29
 23fd8ec:	d51d      	bpl.n	23fd92a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd8ee:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd8f0:	460b      	mov	r3, r1
 23fd8f2:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fd8f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd8f8:	b160      	cbz	r0, 23fd914 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fd8fa:	2820      	cmp	r0, #32
 23fd8fc:	d108      	bne.n	23fd910 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fd8fe:	4619      	mov	r1, r3
 23fd900:	e7f7      	b.n	23fd8f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fd902:	4835      	ldr	r0, [pc, #212]	; (23fd9d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fd904:	f001 f8e7 	bl	23fead6 <_ZN5spark12NetworkClass9listeningEv>
 23fd908:	2800      	cmp	r0, #0
 23fd90a:	d0ac      	beq.n	23fd866 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fd90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fd910:	2828      	cmp	r0, #40	; 0x28
 23fd912:	d1ee      	bne.n	23fd8f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fd914:	6823      	ldr	r3, [r4, #0]
 23fd916:	1a52      	subs	r2, r2, r1
 23fd918:	4620      	mov	r0, r4
 23fd91a:	68db      	ldr	r3, [r3, #12]
 23fd91c:	4798      	blx	r3
        write("(): ", 4);
 23fd91e:	6823      	ldr	r3, [r4, #0]
 23fd920:	2204      	movs	r2, #4
 23fd922:	4620      	mov	r0, r4
 23fd924:	68db      	ldr	r3, [r3, #12]
 23fd926:	492d      	ldr	r1, [pc, #180]	; (23fd9dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fd928:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fd92a:	2100      	movs	r1, #0
 23fd92c:	4638      	mov	r0, r7
 23fd92e:	f7fc f919 	bl	23f9b64 <log_level_name>
 23fd932:	4601      	mov	r1, r0
    write(s);
 23fd934:	4620      	mov	r0, r4
 23fd936:	f7ff f9ee 	bl	23fcd16 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fd93a:	6823      	ldr	r3, [r4, #0]
 23fd93c:	2202      	movs	r2, #2
 23fd93e:	4620      	mov	r0, r4
 23fd940:	68db      	ldr	r3, [r3, #12]
 23fd942:	4924      	ldr	r1, [pc, #144]	; (23fd9d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd944:	4798      	blx	r3
    if (msg) {
 23fd946:	b11e      	cbz	r6, 23fd950 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fd948:	4631      	mov	r1, r6
 23fd94a:	4620      	mov	r0, r4
 23fd94c:	f7ff f9e3 	bl	23fcd16 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fd950:	792b      	ldrb	r3, [r5, #4]
 23fd952:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fd956:	d02c      	beq.n	23fd9b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fd958:	6823      	ldr	r3, [r4, #0]
 23fd95a:	4921      	ldr	r1, [pc, #132]	; (23fd9e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fd95c:	68db      	ldr	r3, [r3, #12]
 23fd95e:	2202      	movs	r2, #2
 23fd960:	4620      	mov	r0, r4
 23fd962:	4798      	blx	r3
        if (attr.has_code) {
 23fd964:	792b      	ldrb	r3, [r5, #4]
 23fd966:	06d9      	lsls	r1, r3, #27
 23fd968:	d50a      	bpl.n	23fd980 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fd96a:	6823      	ldr	r3, [r4, #0]
 23fd96c:	2207      	movs	r2, #7
 23fd96e:	4620      	mov	r0, r4
 23fd970:	491c      	ldr	r1, [pc, #112]	; (23fd9e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fd972:	68db      	ldr	r3, [r3, #12]
 23fd974:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fd976:	4620      	mov	r0, r4
 23fd978:	69aa      	ldr	r2, [r5, #24]
 23fd97a:	491b      	ldr	r1, [pc, #108]	; (23fd9e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fd97c:	f7ff fa4b 	bl	23fce16 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fd980:	792b      	ldrb	r3, [r5, #4]
 23fd982:	069a      	lsls	r2, r3, #26
 23fd984:	d511      	bpl.n	23fd9aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fd986:	06db      	lsls	r3, r3, #27
 23fd988:	d505      	bpl.n	23fd996 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fd98a:	6823      	ldr	r3, [r4, #0]
 23fd98c:	2202      	movs	r2, #2
 23fd98e:	4620      	mov	r0, r4
 23fd990:	68db      	ldr	r3, [r3, #12]
 23fd992:	490f      	ldr	r1, [pc, #60]	; (23fd9d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fd994:	4798      	blx	r3
            write("details = ", 10);
 23fd996:	6823      	ldr	r3, [r4, #0]
 23fd998:	4620      	mov	r0, r4
 23fd99a:	4914      	ldr	r1, [pc, #80]	; (23fd9ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fd99c:	220a      	movs	r2, #10
 23fd99e:	68db      	ldr	r3, [r3, #12]
 23fd9a0:	4798      	blx	r3
            write(attr.details);
 23fd9a2:	4620      	mov	r0, r4
 23fd9a4:	69e9      	ldr	r1, [r5, #28]
 23fd9a6:	f7ff f9b6 	bl	23fcd16 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fd9aa:	215d      	movs	r1, #93	; 0x5d
 23fd9ac:	4620      	mov	r0, r4
 23fd9ae:	f7ff f9c1 	bl	23fcd34 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fd9b2:	6823      	ldr	r3, [r4, #0]
 23fd9b4:	4620      	mov	r0, r4
}
 23fd9b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fd9ba:	2202      	movs	r2, #2
 23fd9bc:	68db      	ldr	r3, [r3, #12]
 23fd9be:	490c      	ldr	r1, [pc, #48]	; (23fd9f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fd9c0:	4718      	bx	r3
 23fd9c2:	bf00      	nop
 23fd9c4:	023ffb19 	.word	0x023ffb19
 23fd9c8:	023ffb20 	.word	0x023ffb20
 23fd9cc:	023ffb23 	.word	0x023ffb23
 23fd9d0:	023ffb26 	.word	0x023ffb26
 23fd9d4:	023ffb2b 	.word	0x023ffb2b
 23fd9d8:	1007aef0 	.word	0x1007aef0
 23fd9dc:	023ffb29 	.word	0x023ffb29
 23fd9e0:	023ffb2e 	.word	0x023ffb2e
 23fd9e4:	023ffb31 	.word	0x023ffb31
 23fd9e8:	023ffb39 	.word	0x023ffb39
 23fd9ec:	023ffb3c 	.word	0x023ffb3c
 23fd9f0:	023ffb47 	.word	0x023ffb47

023fd9f4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd9f8:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fd9fa:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd9fc:	460d      	mov	r5, r1
 23fd9fe:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fda00:	f000 fd2c 	bl	23fe45c <_Z16_fetch_usbserialv>
 23fda04:	4287      	cmp	r7, r0
 23fda06:	d007      	beq.n	23fda18 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fda08:	6a20      	ldr	r0, [r4, #32]
 23fda0a:	4632      	mov	r2, r6
 23fda0c:	6803      	ldr	r3, [r0, #0]
 23fda0e:	4629      	mov	r1, r5
}
 23fda10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fda14:	68db      	ldr	r3, [r3, #12]
 23fda16:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fda18:	4803      	ldr	r0, [pc, #12]	; (23fda28 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fda1a:	f001 f85c 	bl	23fead6 <_ZN5spark12NetworkClass9listeningEv>
 23fda1e:	2800      	cmp	r0, #0
 23fda20:	d0f2      	beq.n	23fda08 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fda22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fda26:	bf00      	nop
 23fda28:	1007aef0 	.word	0x1007aef0

023fda2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fda2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fda30:	b085      	sub	sp, #20
    return stream_;
 23fda32:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fda36:	4605      	mov	r5, r0
 23fda38:	460f      	mov	r7, r1
 23fda3a:	4690      	mov	r8, r2
 23fda3c:	461e      	mov	r6, r3
 23fda3e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fda40:	f000 fd0c 	bl	23fe45c <_Z16_fetch_usbserialv>
 23fda44:	4581      	cmp	r9, r0
 23fda46:	d105      	bne.n	23fda54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fda48:	4849      	ldr	r0, [pc, #292]	; (23fdb70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fda4a:	f001 f844 	bl	23fead6 <_ZN5spark12NetworkClass9listeningEv>
 23fda4e:	2800      	cmp	r0, #0
 23fda50:	f040 808a 	bne.w	23fdb68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fda54:	f04f 0900 	mov.w	r9, #0
 23fda58:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
 23fda5a:	4a46      	ldr	r2, [pc, #280]	; (23fdb74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fda5c:	4668      	mov	r0, sp
 23fda5e:	e9cd 3902 	strd	r3, r9, [sp, #8]
 23fda62:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
 23fda64:	f88d 9004 	strb.w	r9, [sp, #4]
 23fda68:	f000 fe45 	bl	23fe6f6 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fda6c:	4649      	mov	r1, r9
 23fda6e:	4640      	mov	r0, r8
 23fda70:	f7fc f878 	bl	23f9b64 <log_level_name>
 23fda74:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fda76:	4940      	ldr	r1, [pc, #256]	; (23fdb78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fda78:	2201      	movs	r2, #1
 23fda7a:	4668      	mov	r0, sp
 23fda7c:	f000 feca 	bl	23fe814 <_ZN5spark10JSONWriter4nameEPKcj>
 23fda80:	4641      	mov	r1, r8
 23fda82:	f7ff f93a 	bl	23fccfa <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fda86:	b13f      	cbz	r7, 23fda98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
 23fda88:	493c      	ldr	r1, [pc, #240]	; (23fdb7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fda8a:	2201      	movs	r2, #1
 23fda8c:	4668      	mov	r0, sp
 23fda8e:	f000 fec1 	bl	23fe814 <_ZN5spark10JSONWriter4nameEPKcj>
 23fda92:	4639      	mov	r1, r7
 23fda94:	f7ff f931 	bl	23fccfa <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fda98:	b13e      	cbz	r6, 23fdaaa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
 23fda9a:	4939      	ldr	r1, [pc, #228]	; (23fdb80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fda9c:	2201      	movs	r2, #1
 23fda9e:	4668      	mov	r0, sp
 23fdaa0:	f000 feb8 	bl	23fe814 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdaa4:	4631      	mov	r1, r6
 23fdaa6:	f7ff f928 	bl	23fccfa <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fdaaa:	7923      	ldrb	r3, [r4, #4]
 23fdaac:	07df      	lsls	r7, r3, #31
 23fdaae:	d50e      	bpl.n	23fdace <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
 23fdab0:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fdab2:	212f      	movs	r1, #47	; 0x2f
 23fdab4:	4630      	mov	r0, r6
 23fdab6:	f001 fc36 	bl	23ff326 <strrchr>
    if (s1) {
 23fdaba:	b100      	cbz	r0, 23fdabe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
 23fdabc:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fdabe:	4931      	ldr	r1, [pc, #196]	; (23fdb84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fdac0:	2201      	movs	r2, #1
 23fdac2:	4668      	mov	r0, sp
 23fdac4:	f000 fea6 	bl	23fe814 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdac8:	4631      	mov	r1, r6
 23fdaca:	f7ff f916 	bl	23fccfa <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fdace:	7923      	ldrb	r3, [r4, #4]
 23fdad0:	079e      	lsls	r6, r3, #30
 23fdad2:	d507      	bpl.n	23fdae4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
 23fdad4:	492c      	ldr	r1, [pc, #176]	; (23fdb88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fdad6:	2202      	movs	r2, #2
 23fdad8:	4668      	mov	r0, sp
 23fdada:	f000 fe9b 	bl	23fe814 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdade:	68e1      	ldr	r1, [r4, #12]
 23fdae0:	f000 fe16 	bl	23fe710 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fdae4:	7923      	ldrb	r3, [r4, #4]
 23fdae6:	0758      	lsls	r0, r3, #29
 23fdae8:	d514      	bpl.n	23fdb14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fdaea:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fdaec:	4633      	mov	r3, r6
 23fdaee:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fdaf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fdaf4:	b12a      	cbz	r2, 23fdb02 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
 23fdaf6:	2a20      	cmp	r2, #32
 23fdaf8:	d101      	bne.n	23fdafe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
 23fdafa:	461e      	mov	r6, r3
 23fdafc:	e7f7      	b.n	23fdaee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
 23fdafe:	2a28      	cmp	r2, #40	; 0x28
 23fdb00:	d1f5      	bne.n	23fdaee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
 23fdb02:	2202      	movs	r2, #2
 23fdb04:	4921      	ldr	r1, [pc, #132]	; (23fdb8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fdb06:	4668      	mov	r0, sp
 23fdb08:	f000 fe84 	bl	23fe814 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdb0c:	4631      	mov	r1, r6
 23fdb0e:	1bba      	subs	r2, r7, r6
 23fdb10:	f000 fe90 	bl	23fe834 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fdb14:	7923      	ldrb	r3, [r4, #4]
 23fdb16:	0719      	lsls	r1, r3, #28
 23fdb18:	d507      	bpl.n	23fdb2a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
 23fdb1a:	491d      	ldr	r1, [pc, #116]	; (23fdb90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fdb1c:	2201      	movs	r2, #1
 23fdb1e:	4668      	mov	r0, sp
 23fdb20:	f000 fe78 	bl	23fe814 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdb24:	6961      	ldr	r1, [r4, #20]
 23fdb26:	f000 fe05 	bl	23fe734 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fdb2a:	7923      	ldrb	r3, [r4, #4]
 23fdb2c:	06da      	lsls	r2, r3, #27
 23fdb2e:	d507      	bpl.n	23fdb40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fdb30:	4918      	ldr	r1, [pc, #96]	; (23fdb94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fdb32:	2204      	movs	r2, #4
 23fdb34:	4668      	mov	r0, sp
 23fdb36:	f000 fe6d 	bl	23fe814 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdb3a:	69a1      	ldr	r1, [r4, #24]
 23fdb3c:	f000 fde8 	bl	23fe710 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fdb40:	7923      	ldrb	r3, [r4, #4]
 23fdb42:	069b      	lsls	r3, r3, #26
 23fdb44:	d507      	bpl.n	23fdb56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fdb46:	4914      	ldr	r1, [pc, #80]	; (23fdb98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fdb48:	2206      	movs	r2, #6
 23fdb4a:	4668      	mov	r0, sp
 23fdb4c:	f000 fe62 	bl	23fe814 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdb50:	69e1      	ldr	r1, [r4, #28]
 23fdb52:	f7ff f8d2 	bl	23fccfa <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fdb56:	4668      	mov	r0, sp
 23fdb58:	f000 fdb7 	bl	23fe6ca <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fdb5c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fdb5e:	2202      	movs	r2, #2
 23fdb60:	6803      	ldr	r3, [r0, #0]
 23fdb62:	490e      	ldr	r1, [pc, #56]	; (23fdb9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fdb64:	68db      	ldr	r3, [r3, #12]
 23fdb66:	4798      	blx	r3
}
 23fdb68:	b005      	add	sp, #20
 23fdb6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fdb6e:	bf00      	nop
 23fdb70:	1007aef0 	.word	0x1007aef0
 23fdb74:	023ffadc 	.word	0x023ffadc
 23fdb78:	023ffaf6 	.word	0x023ffaf6
 23fdb7c:	023ffb4a 	.word	0x023ffb4a
 23fdb80:	023ffecb 	.word	0x023ffecb
 23fdb84:	023ffb4c 	.word	0x023ffb4c
 23fdb88:	023ffb4e 	.word	0x023ffb4e
 23fdb8c:	023ffb51 	.word	0x023ffb51
 23fdb90:	023ffb54 	.word	0x023ffb54
 23fdb94:	023ffb56 	.word	0x023ffb56
 23fdb98:	023ffb5b 	.word	0x023ffb5b
 23fdb9c:	023ffb47 	.word	0x023ffb47

023fdba0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fdba0:	4b02      	ldr	r3, [pc, #8]	; (23fdbac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fdba2:	681a      	ldr	r2, [r3, #0]
 23fdba4:	4b02      	ldr	r3, [pc, #8]	; (23fdbb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fdba6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fdba8:	4770      	bx	lr
 23fdbaa:	bf00      	nop
 23fdbac:	1007a898 	.word	0x1007a898
 23fdbb0:	1007aea0 	.word	0x1007aea0

023fdbb4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fdbb4:	2100      	movs	r1, #0
 23fdbb6:	f7fb bfff 	b.w	23f9bb8 <system_delay_ms>
	...

023fdbbc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fdbbc:	2200      	movs	r2, #0
 23fdbbe:	4b01      	ldr	r3, [pc, #4]	; (23fdbc4 <_GLOBAL__sub_I_RGB+0x8>)
 23fdbc0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fdbc2:	4770      	bx	lr
 23fdbc4:	1007aea4 	.word	0x1007aea4

023fdbc8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fdbc8:	4b01      	ldr	r3, [pc, #4]	; (23fdbd0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fdbca:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fdbcc:	4770      	bx	lr
 23fdbce:	bf00      	nop
 23fdbd0:	1007a89c 	.word	0x1007a89c

023fdbd4 <serialEventRun>:
{
 23fdbd4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fdbd6:	4b0f      	ldr	r3, [pc, #60]	; (23fdc14 <serialEventRun+0x40>)
 23fdbd8:	b143      	cbz	r3, 23fdbec <serialEventRun+0x18>
 23fdbda:	f000 fc3f 	bl	23fe45c <_Z16_fetch_usbserialv>
 23fdbde:	6803      	ldr	r3, [r0, #0]
 23fdbe0:	691b      	ldr	r3, [r3, #16]
 23fdbe2:	4798      	blx	r3
 23fdbe4:	2800      	cmp	r0, #0
 23fdbe6:	dd01      	ble.n	23fdbec <serialEventRun+0x18>
        serialEvent();
 23fdbe8:	e000      	b.n	23fdbec <serialEventRun+0x18>
 23fdbea:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fdbec:	4b0a      	ldr	r3, [pc, #40]	; (23fdc18 <serialEventRun+0x44>)
 23fdbee:	b143      	cbz	r3, 23fdc02 <serialEventRun+0x2e>
 23fdbf0:	f001 f8d6 	bl	23feda0 <_Z22__fetch_global_Serial1v>
 23fdbf4:	6803      	ldr	r3, [r0, #0]
 23fdbf6:	691b      	ldr	r3, [r3, #16]
 23fdbf8:	4798      	blx	r3
 23fdbfa:	2800      	cmp	r0, #0
 23fdbfc:	dd01      	ble.n	23fdc02 <serialEventRun+0x2e>
        serialEvent1();
 23fdbfe:	e000      	b.n	23fdc02 <serialEventRun+0x2e>
 23fdc00:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fdc02:	4b06      	ldr	r3, [pc, #24]	; (23fdc1c <serialEventRun+0x48>)
 23fdc04:	b10b      	cbz	r3, 23fdc0a <serialEventRun+0x36>
 23fdc06:	f001 f911 	bl	23fee2c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fdc0a:	4b05      	ldr	r3, [pc, #20]	; (23fdc20 <serialEventRun+0x4c>)
 23fdc0c:	b10b      	cbz	r3, 23fdc12 <serialEventRun+0x3e>
 23fdc0e:	f001 f943 	bl	23fee98 <_Z15serialEventRun3v>
}
 23fdc12:	bd08      	pop	{r3, pc}
	...

023fdc24 <_post_loop>:
{
 23fdc24:	b508      	push	{r3, lr}
	serialEventRun();
 23fdc26:	f7ff ffd5 	bl	23fdbd4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fdc2a:	f7fb fcd1 	bl	23f95d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fdc2e:	4b01      	ldr	r3, [pc, #4]	; (23fdc34 <_post_loop+0x10>)
 23fdc30:	6018      	str	r0, [r3, #0]
}
 23fdc32:	bd08      	pop	{r3, pc}
 23fdc34:	1007af4c 	.word	0x1007af4c

023fdc38 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdc38:	4805      	ldr	r0, [pc, #20]	; (23fdc50 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fdc3a:	4a06      	ldr	r2, [pc, #24]	; (23fdc54 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fdc3c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdc3e:	1a12      	subs	r2, r2, r0
 23fdc40:	4905      	ldr	r1, [pc, #20]	; (23fdc58 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fdc42:	f001 fab5 	bl	23ff1b0 <memcpy>
    __backup_sram_signature = signature;
 23fdc46:	4b05      	ldr	r3, [pc, #20]	; (23fdc5c <_Z33system_initialize_user_backup_ramv+0x24>)
 23fdc48:	4a05      	ldr	r2, [pc, #20]	; (23fdc60 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fdc4a:	601a      	str	r2, [r3, #0]
}
 23fdc4c:	bd08      	pop	{r3, pc}
 23fdc4e:	bf00      	nop
 23fdc50:	1007b400 	.word	0x1007b400
 23fdc54:	1007b404 	.word	0x1007b404
 23fdc58:	085ff6b0 	.word	0x085ff6b0
 23fdc5c:	1007b400 	.word	0x1007b400
 23fdc60:	9a271c1e 	.word	0x9a271c1e

023fdc64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdc64:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fdc66:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdc68:	461a      	mov	r2, r3
 23fdc6a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdc6e:	9300      	str	r3, [sp, #0]
 23fdc70:	f7fb ffda 	bl	23f9c28 <system_ctrl_set_result>
}
 23fdc74:	b003      	add	sp, #12
 23fdc76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fdc7c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fdc7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fdc7e:	8843      	ldrh	r3, [r0, #2]
 23fdc80:	2b0a      	cmp	r3, #10
 23fdc82:	d008      	beq.n	23fdc96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fdc84:	2b50      	cmp	r3, #80	; 0x50
 23fdc86:	d10b      	bne.n	23fdca0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fdc88:	4b09      	ldr	r3, [pc, #36]	; (23fdcb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fdc8a:	681b      	ldr	r3, [r3, #0]
 23fdc8c:	b14b      	cbz	r3, 23fdca2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fdc8e:	b003      	add	sp, #12
 23fdc90:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fdc94:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fdc96:	f7ff ffe5 	bl	23fdc64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fdc9a:	b003      	add	sp, #12
 23fdc9c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdca0:	2300      	movs	r3, #0
 23fdca2:	461a      	mov	r2, r3
 23fdca4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdca8:	9300      	str	r3, [sp, #0]
 23fdcaa:	f7fb ffbd 	bl	23f9c28 <system_ctrl_set_result>
}
 23fdcae:	e7f4      	b.n	23fdc9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fdcb0:	1007aeb8 	.word	0x1007aeb8

023fdcb4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fdcb4:	2100      	movs	r1, #0
{
 23fdcb6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fdcb8:	4811      	ldr	r0, [pc, #68]	; (23fdd00 <module_user_init_hook+0x4c>)
 23fdcba:	f7fc f94b 	bl	23f9f54 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fdcbe:	4b11      	ldr	r3, [pc, #68]	; (23fdd04 <module_user_init_hook+0x50>)
 23fdcc0:	681a      	ldr	r2, [r3, #0]
 23fdcc2:	4b11      	ldr	r3, [pc, #68]	; (23fdd08 <module_user_init_hook+0x54>)
 23fdcc4:	429a      	cmp	r2, r3
 23fdcc6:	bf0c      	ite	eq
 23fdcc8:	2201      	moveq	r2, #1
 23fdcca:	2200      	movne	r2, #0
 23fdccc:	4b0f      	ldr	r3, [pc, #60]	; (23fdd0c <module_user_init_hook+0x58>)
 23fdcce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fdcd0:	d001      	beq.n	23fdcd6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fdcd2:	f7ff ffb1 	bl	23fdc38 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fdcd6:	f7fb fc5f 	bl	23f9598 <HAL_RNG_GetRandomNumber>
 23fdcda:	4604      	mov	r4, r0
    srand(seed);
 23fdcdc:	f001 fa98 	bl	23ff210 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fdce0:	4b0b      	ldr	r3, [pc, #44]	; (23fdd10 <module_user_init_hook+0x5c>)
 23fdce2:	b113      	cbz	r3, 23fdcea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fdce4:	4620      	mov	r0, r4
 23fdce6:	e000      	b.n	23fdcea <module_user_init_hook+0x36>
 23fdce8:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fdcea:	2100      	movs	r1, #0
 23fdcec:	4808      	ldr	r0, [pc, #32]	; (23fdd10 <module_user_init_hook+0x5c>)
 23fdcee:	f7fc f8b3 	bl	23f9e58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fdcf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fdcf6:	2100      	movs	r1, #0
 23fdcf8:	4806      	ldr	r0, [pc, #24]	; (23fdd14 <module_user_init_hook+0x60>)
 23fdcfa:	f7fb bf87 	b.w	23f9c0c <system_ctrl_set_app_request_handler>
 23fdcfe:	bf00      	nop
 23fdd00:	023fdbc9 	.word	0x023fdbc9
 23fdd04:	1007b400 	.word	0x1007b400
 23fdd08:	9a271c1e 	.word	0x9a271c1e
 23fdd0c:	1007aeb4 	.word	0x1007aeb4
 23fdd10:	00000000 	.word	0x00000000
 23fdd14:	023fdc7d 	.word	0x023fdc7d

023fdd18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fdd18:	4770      	bx	lr

023fdd1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fdd1a:	2000      	movs	r0, #0
 23fdd1c:	4770      	bx	lr

023fdd1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fdd1e:	b510      	push	{r4, lr}
 23fdd20:	4604      	mov	r4, r0
 23fdd22:	2110      	movs	r1, #16
 23fdd24:	f7fa fed7 	bl	23f8ad6 <_ZdlPvj>
 23fdd28:	4620      	mov	r0, r4
 23fdd2a:	bd10      	pop	{r4, pc}

023fdd2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fdd2c:	b508      	push	{r3, lr}
      { delete this; }
 23fdd2e:	f7ff fff6 	bl	23fdd1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fdd32:	bd08      	pop	{r3, pc}

023fdd34 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fdd34:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fdd36:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fdd38:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fdd3c:	6002      	str	r2, [r0, #0]
 23fdd3e:	8084      	strh	r4, [r0, #4]
 23fdd40:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdd42:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdd44:	680c      	ldr	r4, [r1, #0]
 23fdd46:	8085      	strh	r5, [r0, #4]
 23fdd48:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdd4a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fdd4c:	bd30      	pop	{r4, r5, pc}

023fdd4e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fdd4e:	b510      	push	{r4, lr}
 23fdd50:	4604      	mov	r4, r0
    free((void*)msg_);
 23fdd52:	6800      	ldr	r0, [r0, #0]
 23fdd54:	f7fc f89c 	bl	23f9e90 <free>
}
 23fdd58:	4620      	mov	r0, r4
 23fdd5a:	bd10      	pop	{r4, pc}

023fdd5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fdd5c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fdd5e:	68c4      	ldr	r4, [r0, #12]
 23fdd60:	b314      	cbz	r4, 23fdda8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fdd62:	7823      	ldrb	r3, [r4, #0]
 23fdd64:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fdd66:	2b02      	cmp	r3, #2
 23fdd68:	d103      	bne.n	23fdd72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fdd6a:	f104 000c 	add.w	r0, r4, #12
 23fdd6e:	f7ff ffee 	bl	23fdd4e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fdd72:	1d23      	adds	r3, r4, #4
 23fdd74:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fdd76:	b135      	cbz	r5, 23fdd86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fdd78:	4628      	mov	r0, r5
 23fdd7a:	f7fc f94a 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
 23fdd7e:	2110      	movs	r1, #16
 23fdd80:	4628      	mov	r0, r5
 23fdd82:	f7fa fea8 	bl	23f8ad6 <_ZdlPvj>
 23fdd86:	f104 0308 	add.w	r3, r4, #8
 23fdd8a:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fdd8c:	b135      	cbz	r5, 23fdd9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fdd8e:	4628      	mov	r0, r5
 23fdd90:	f7fc f93f 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
 23fdd94:	2110      	movs	r1, #16
 23fdd96:	4628      	mov	r0, r5
 23fdd98:	f7fa fe9d 	bl	23f8ad6 <_ZdlPvj>
 23fdd9c:	4620      	mov	r0, r4
 23fdd9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fdda2:	2114      	movs	r1, #20
 23fdda4:	f7fa be97 	b.w	23f8ad6 <_ZdlPvj>
 23fdda8:	bd38      	pop	{r3, r4, r5, pc}

023fddaa <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession, options->reconnect_immediately);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23fddaa:	b510      	push	{r4, lr}
 23fddac:	b088      	sub	sp, #32
 23fddae:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23fddb0:	4668      	mov	r0, sp
 23fddb2:	f7fc f994 	bl	23fa0de <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23fddb6:	4669      	mov	r1, sp
 23fddb8:	a804      	add	r0, sp, #16
 23fddba:	f7fc f9e8 	bl	23fa18e <_ZN6StringC1ERKS_>
 23fddbe:	a804      	add	r0, sp, #16
 23fddc0:	47a0      	blx	r4
 23fddc2:	4604      	mov	r4, r0
 23fddc4:	a804      	add	r0, sp, #16
 23fddc6:	f7fc f93f 	bl	23fa048 <_ZN6StringD1Ev>
    String p(param);
 23fddca:	4668      	mov	r0, sp
 23fddcc:	f7fc f93c 	bl	23fa048 <_ZN6StringD1Ev>
}
 23fddd0:	4620      	mov	r0, r4
 23fddd2:	b008      	add	sp, #32
 23fddd4:	bd10      	pop	{r4, pc}

023fddd6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23fddd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23fddd8:	2300      	movs	r3, #0
         size = sizeof(*this);
 23fddda:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23fdddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23fdde0:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23fdde2:	4669      	mov	r1, sp
 23fdde4:	461a      	mov	r2, r3
 23fdde6:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23fdde8:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23fddec:	f8ad 4000 	strh.w	r4, [sp]
 23fddf0:	f7fb fffa 	bl	23f9de8 <spark_function>
}
 23fddf4:	b004      	add	sp, #16
 23fddf6:	bd10      	pop	{r4, pc}

023fddf8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fddf8:	680b      	ldr	r3, [r1, #0]
 23fddfa:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fddfc:	684b      	ldr	r3, [r1, #4]
 23fddfe:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fde00:	b113      	cbz	r3, 23fde08 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fde02:	685a      	ldr	r2, [r3, #4]
 23fde04:	3201      	adds	r2, #1
 23fde06:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fde08:	4770      	bx	lr

023fde0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fde0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fde0c:	4604      	mov	r4, r0
 23fde0e:	4668      	mov	r0, sp
 23fde10:	460d      	mov	r5, r1
 23fde12:	f7ff fff1 	bl	23fddf8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fde16:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fde18:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fde1a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fde1c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fde1e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fde20:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fde22:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
 23fde24:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fde26:	f7fb f935 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fde2a:	b135      	cbz	r5, 23fde3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fde2c:	1d28      	adds	r0, r5, #4
 23fde2e:	f7fb f931 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fde32:	2108      	movs	r1, #8
 23fde34:	4628      	mov	r0, r5
 23fde36:	f7fa fe4e 	bl	23f8ad6 <_ZdlPvj>
        return p;
    }
 23fde3a:	4620      	mov	r0, r4
 23fde3c:	b003      	add	sp, #12
 23fde3e:	bd30      	pop	{r4, r5, pc}

023fde40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fde40:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fde42:	b510      	push	{r4, lr}
      if (_M_empty())
 23fde44:	b90a      	cbnz	r2, 23fde4a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fde46:	f001 f87f 	bl	23fef48 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fde4a:	68c3      	ldr	r3, [r0, #12]
    }
 23fde4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fde50:	4718      	bx	r3

023fde52 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fde52:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fde54:	6800      	ldr	r0, [r0, #0]
 23fde56:	f100 0110 	add.w	r1, r0, #16
 23fde5a:	f7ff fff1 	bl	23fde40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fde5e:	bd08      	pop	{r3, pc}

023fde60 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fde60:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fde62:	b510      	push	{r4, lr}
      if (_M_empty())
 23fde64:	b90a      	cbnz	r2, 23fde6a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fde66:	f001 f86f 	bl	23fef48 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fde6a:	68c3      	ldr	r3, [r0, #12]
    }
 23fde6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fde70:	4718      	bx	r3

023fde72 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fde72:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fde74:	6800      	ldr	r0, [r0, #0]
 23fde76:	f100 0110 	add.w	r1, r0, #16
 23fde7a:	f7ff fff1 	bl	23fde60 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fde7e:	bd08      	pop	{r3, pc}

023fde80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fde80:	b538      	push	{r3, r4, r5, lr}
 23fde82:	2300      	movs	r3, #0
 23fde84:	4604      	mov	r4, r0
 23fde86:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fde88:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fde8a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fde8c:	f7fa fe1f 	bl	23f8ace <_Znwj>
 23fde90:	b128      	cbz	r0, 23fde9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fde92:	2301      	movs	r3, #1
 23fde94:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fde98:	4b02      	ldr	r3, [pc, #8]	; (23fdea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fde9a:	60c5      	str	r5, [r0, #12]
 23fde9c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fde9e:	6020      	str	r0, [r4, #0]
	}
 23fdea0:	4620      	mov	r0, r4
 23fdea2:	bd38      	pop	{r3, r4, r5, pc}
 23fdea4:	023ffbe8 	.word	0x023ffbe8

023fdea8 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>:
    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
    }

    explicit FutureBase(Error::Type error) :
 23fdea8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        type_(type) {
 23fdeaa:	2600      	movs	r6, #0
 23fdeac:	f8ad 1004 	strh.w	r1, [sp, #4]
 23fdeb0:	4605      	mov	r5, r0
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fdeb2:	4669      	mov	r1, sp
 23fdeb4:	a802      	add	r0, sp, #8
 23fdeb6:	9600      	str	r6, [sp, #0]
 23fdeb8:	f7ff ff3c 	bl	23fdd34 <_ZN8particle5ErrorC1EOS0_>
 23fdebc:	2014      	movs	r0, #20
 23fdebe:	f7fa fe06 	bl	23f8ace <_Znwj>
 23fdec2:	4604      	mov	r4, r0
 23fdec4:	b148      	cbz	r0, 23fdeda <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE+0x32>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fdec6:	2302      	movs	r3, #2
 23fdec8:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fdeca:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fdecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fded0:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fded2:	a902      	add	r1, sp, #8
 23fded4:	300c      	adds	r0, #12
 23fded6:	f7ff ff2d 	bl	23fdd34 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fdeda:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fdedc:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fdede:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fdee2:	f7ff ffcd 	bl	23fde80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fdee6:	a802      	add	r0, sp, #8
 23fdee8:	f7ff ff31 	bl	23fdd4e <_ZN8particle5ErrorD1Ev>
            FutureBase(Error(error)) {
 23fdeec:	4668      	mov	r0, sp
 23fdeee:	f7ff ff2e 	bl	23fdd4e <_ZN8particle5ErrorD1Ev>
    }
 23fdef2:	4628      	mov	r0, r5
 23fdef4:	b004      	add	sp, #16
 23fdef6:	bd70      	pop	{r4, r5, r6, pc}

023fdef8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fdef8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fdefa:	2300      	movs	r3, #0
 23fdefc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fdefe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fdf00:	4604      	mov	r4, r0
 23fdf02:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fdf04:	b12b      	cbz	r3, 23fdf12 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fdf06:	2202      	movs	r2, #2
 23fdf08:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fdf0a:	68eb      	ldr	r3, [r5, #12]
 23fdf0c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fdf0e:	68ab      	ldr	r3, [r5, #8]
 23fdf10:	60a3      	str	r3, [r4, #8]
    }
 23fdf12:	4620      	mov	r0, r4
 23fdf14:	bd38      	pop	{r3, r4, r5, pc}
	...

023fdf18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fdf18:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdf1a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
 23fdf1c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fdf1e:	4668      	mov	r0, sp
 23fdf20:	f7ff ff08 	bl	23fdd34 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fdf24:	f04f 0302 	mov.w	r3, #2
 23fdf28:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fdf2c:	2a00      	cmp	r2, #0
 23fdf2e:	d103      	bne.n	23fdf38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fdf30:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fdf34:	2900      	cmp	r1, #0
 23fdf36:	d1f7      	bne.n	23fdf28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fdf38:	d121      	bne.n	23fdf7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fdf3a:	f104 050c 	add.w	r5, r4, #12
 23fdf3e:	4669      	mov	r1, sp
 23fdf40:	4628      	mov	r0, r5
 23fdf42:	f7ff fef7 	bl	23fdd34 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fdf46:	2201      	movs	r2, #1
 23fdf48:	1c63      	adds	r3, r4, #1
 23fdf4a:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fdf4e:	2000      	movs	r0, #0
 23fdf50:	f104 0308 	add.w	r3, r4, #8
 23fdf54:	e8d3 6fef 	ldaex	r6, [r3]
 23fdf58:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fdf5c:	2a00      	cmp	r2, #0
 23fdf5e:	d1f9      	bne.n	23fdf54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fdf60:	b16e      	cbz	r6, 23fdf7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fdf62:	f7fb fe37 	bl	23f9bd4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fdf66:	b178      	cbz	r0, 23fdf88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fdf68:	4629      	mov	r1, r5
 23fdf6a:	4630      	mov	r0, r6
 23fdf6c:	f7ff ff68 	bl	23fde40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fdf70:	4630      	mov	r0, r6
 23fdf72:	f7fc f84e 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fdf76:	2110      	movs	r1, #16
 23fdf78:	4630      	mov	r0, r6
 23fdf7a:	f7fa fdac 	bl	23f8ad6 <_ZdlPvj>
        p_->setError(std::move(error));
 23fdf7e:	4668      	mov	r0, sp
 23fdf80:	f7ff fee5 	bl	23fdd4e <_ZN8particle5ErrorD1Ev>
    }
 23fdf84:	b009      	add	sp, #36	; 0x24
 23fdf86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fdf88:	4631      	mov	r1, r6
 23fdf8a:	a802      	add	r0, sp, #8
 23fdf8c:	f7ff ffb4 	bl	23fdef8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fdf90:	68e0      	ldr	r0, [r4, #12]
 23fdf92:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fdf96:	b108      	cbz	r0, 23fdf9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fdf98:	f001 f988 	bl	23ff2ac <strdup>
        type_(type) {
 23fdf9c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fdf9e:	2010      	movs	r0, #16
 23fdfa0:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fdfa4:	f7fa fd93 	bl	23f8ace <_Znwj>
 23fdfa8:	4605      	mov	r5, r0
 23fdfaa:	b1e8      	cbz	r0, 23fdfe8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fdfac:	2700      	movs	r7, #0
 23fdfae:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fdfb0:	2018      	movs	r0, #24
 23fdfb2:	f7fa fd8c 	bl	23f8ace <_Znwj>
 23fdfb6:	4604      	mov	r4, r0
 23fdfb8:	b188      	cbz	r0, 23fdfde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fdfba:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fdfbc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fdfbe:	a802      	add	r0, sp, #8
 23fdfc0:	f7fd ff02 	bl	23fbdc8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdfc4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fdfc6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdfc8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdfca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fdfcc:	9204      	str	r2, [sp, #16]
 23fdfce:	68e2      	ldr	r2, [r4, #12]
 23fdfd0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fdfd2:	60e3      	str	r3, [r4, #12]
 23fdfd4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fdfd8:	9205      	str	r2, [sp, #20]
 23fdfda:	f7ff feab 	bl	23fdd34 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fdfde:	4b08      	ldr	r3, [pc, #32]	; (23fe000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fdfe0:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fdfe2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fdfe4:	4b07      	ldr	r3, [pc, #28]	; (23fe004 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fdfe6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fdfe8:	a806      	add	r0, sp, #24
 23fdfea:	f7ff feb0 	bl	23fdd4e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fdfee:	a802      	add	r0, sp, #8
 23fdff0:	f7fc f80f 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fdff4:	2200      	movs	r2, #0
 23fdff6:	4629      	mov	r1, r5
 23fdff8:	4803      	ldr	r0, [pc, #12]	; (23fe008 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fdffa:	f7fb fdf9 	bl	23f9bf0 <application_thread_invoke>
 23fdffe:	e7b7      	b.n	23fdf70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fe000:	023fde53 	.word	0x023fde53
 23fe004:	023fe0e5 	.word	0x023fe0e5
 23fe008:	023fe913 	.word	0x023fe913

023fe00c <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char* name, const char* data, size_t size, int type, int ttl,
        PublishFlags flags) {
 23fe00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe010:	b08d      	sub	sp, #52	; 0x34
 23fe012:	4604      	mov	r4, r0
 23fe014:	460e      	mov	r6, r1
 23fe016:	4617      	mov	r7, r2
 23fe018:	4699      	mov	r9, r3
 23fe01a:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fe01e:	f7fb feff 	bl	23f9e20 <spark_cloud_flag_connected>
    if (!connected()) {
 23fe022:	b940      	cbnz	r0, 23fe036 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x2a>
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 23fe024:	f06f 01d1 	mvn.w	r1, #209	; 0xd1
 23fe028:	4620      	mov	r0, r4
 23fe02a:	f7ff ff3d 	bl	23fdea8 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fe02e:	4620      	mov	r0, r4
 23fe030:	b00d      	add	sp, #52	; 0x34
 23fe032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d.size = sizeof(spark_send_event_data);
 23fe036:	2014      	movs	r0, #20
    spark_send_event_data d = {};
 23fe038:	2500      	movs	r5, #0
    d.content_type = static_cast<int>(type);
 23fe03a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    spark_send_event_data d = {};
 23fe03c:	e9cd 5508 	strd	r5, r5, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fe040:	9007      	str	r0, [sp, #28]
    d.data_size = size;
 23fe042:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d.content_type = static_cast<int>(type);
 23fe046:	930b      	str	r3, [sp, #44]	; 0x2c
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fe048:	f7fa fd41 	bl	23f8ace <_Znwj>
 23fe04c:	4601      	mov	r1, r0
 23fe04e:	b118      	cbz	r0, 23fe058 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fe050:	e9c0 5501 	strd	r5, r5, [r0, #4]
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fe054:	7005      	strb	r5, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fe056:	7045      	strb	r5, [r0, #1]
	: __shared_count(__p)
 23fe058:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fe05a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fe05c:	f7ff ff10 	bl	23fde80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fe060:	4b1f      	ldr	r3, [pc, #124]	; (23fe0e0 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xd4>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fe062:	2008      	movs	r0, #8
 23fe064:	9308      	str	r3, [sp, #32]
 23fe066:	f7fa fd32 	bl	23f8ace <_Znwj>
 23fe06a:	4605      	mov	r5, r0
 23fe06c:	b110      	cbz	r0, 23fe074 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x68>
 23fe06e:	a903      	add	r1, sp, #12
 23fe070:	f7ff fec2 	bl	23fddf8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23fe074:	ab07      	add	r3, sp, #28
 23fe076:	9300      	str	r3, [sp, #0]
 23fe078:	4639      	mov	r1, r7
 23fe07a:	4630      	mov	r0, r6
 23fe07c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 23fe07e:	fa5f f388 	uxtb.w	r3, r8
    d.handler_data = p.dataPtr();
 23fe082:	9509      	str	r5, [sp, #36]	; 0x24
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23fe084:	f7fb feda 	bl	23f9e3c <spark_send_event>
 23fe088:	b9b8      	cbnz	r0, 23fe0ba <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
	return __atomic_load_n(&_M_i, int(__m));
 23fe08a:	9b03      	ldr	r3, [sp, #12]
 23fe08c:	3301      	adds	r3, #1
 23fe08e:	781b      	ldrb	r3, [r3, #0]
 23fe090:	b2db      	uxtb	r3, r3
 23fe092:	b993      	cbnz	r3, 23fe0ba <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
        type_(type) {
 23fe094:	9305      	str	r3, [sp, #20]
 23fe096:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fe09a:	a905      	add	r1, sp, #20
 23fe09c:	a803      	add	r0, sp, #12
 23fe09e:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fe0a2:	f7ff ff39 	bl	23fdf18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fe0a6:	a805      	add	r0, sp, #20
 23fe0a8:	f7ff fe51 	bl	23fdd4e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fe0ac:	a805      	add	r0, sp, #20
 23fe0ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fe0b0:	f7ff feab 	bl	23fde0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fe0b4:	a806      	add	r0, sp, #24
 23fe0b6:	f7fa ffed 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe0ba:	a903      	add	r1, sp, #12
 23fe0bc:	a805      	add	r0, sp, #20
 23fe0be:	f7ff fe9b 	bl	23fddf8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fe0c2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fe0c4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fe0c6:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fe0c8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fe0ca:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fe0cc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fe0ce:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fe0d0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fe0d2:	f7fa ffdf 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe0d6:	a804      	add	r0, sp, #16
 23fe0d8:	f7fa ffdc 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fe0dc:	e7a7      	b.n	23fe02e <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x22>
 23fe0de:	bf00      	nop
 23fe0e0:	023fe1a9 	.word	0x023fe1a9

023fe0e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fe0e4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fe0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe0e8:	4605      	mov	r5, r0
	switch (__op)
 23fe0ea:	d103      	bne.n	23fe0f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fe0ec:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fe0ee:	6003      	str	r3, [r0, #0]
      }
 23fe0f0:	2000      	movs	r0, #0
 23fe0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fe0f4:	2a02      	cmp	r2, #2
 23fe0f6:	d010      	beq.n	23fe11a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fe0f8:	2a03      	cmp	r2, #3
 23fe0fa:	d1f9      	bne.n	23fe0f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fe0fc:	6804      	ldr	r4, [r0, #0]
 23fe0fe:	2c00      	cmp	r4, #0
 23fe100:	d0f6      	beq.n	23fe0f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fe102:	f104 0010 	add.w	r0, r4, #16
 23fe106:	f7ff fe22 	bl	23fdd4e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fe10a:	4620      	mov	r0, r4
 23fe10c:	f7fb ff81 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fe110:	2118      	movs	r1, #24
 23fe112:	4620      	mov	r0, r4
 23fe114:	f7fa fcdf 	bl	23f8ad6 <_ZdlPvj>
 23fe118:	e7ea      	b.n	23fe0f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fe11a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fe11c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fe11e:	f7fa fcd6 	bl	23f8ace <_Znwj>
 23fe122:	4604      	mov	r4, r0
 23fe124:	b150      	cbz	r0, 23fe13c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
 23fe126:	4631      	mov	r1, r6
 23fe128:	f7ff fee6 	bl	23fdef8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fe12c:	6930      	ldr	r0, [r6, #16]
 23fe12e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fe132:	b108      	cbz	r0, 23fe138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fe134:	f001 f8ba 	bl	23ff2ac <strdup>
        type_(type) {
 23fe138:	6120      	str	r0, [r4, #16]
 23fe13a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fe13c:	602c      	str	r4, [r5, #0]
	}
 23fe13e:	e7d7      	b.n	23fe0f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fe140 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fe140:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fe142:	2300      	movs	r3, #0
 23fe144:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fe146:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fe148:	4604      	mov	r4, r0
 23fe14a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fe14c:	b12b      	cbz	r3, 23fe15a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fe14e:	2202      	movs	r2, #2
 23fe150:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fe152:	68eb      	ldr	r3, [r5, #12]
 23fe154:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fe156:	68ab      	ldr	r3, [r5, #8]
 23fe158:	60a3      	str	r3, [r4, #8]
    }
 23fe15a:	4620      	mov	r0, r4
 23fe15c:	bd38      	pop	{r3, r4, r5, pc}

023fe15e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fe15e:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fe160:	b570      	push	{r4, r5, r6, lr}
 23fe162:	4604      	mov	r4, r0
	switch (__op)
 23fe164:	d103      	bne.n	23fe16e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fe166:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fe168:	6003      	str	r3, [r0, #0]
      }
 23fe16a:	2000      	movs	r0, #0
 23fe16c:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fe16e:	2a02      	cmp	r2, #2
 23fe170:	d00c      	beq.n	23fe18c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fe172:	2a03      	cmp	r2, #3
 23fe174:	d1f9      	bne.n	23fe16a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fe176:	6804      	ldr	r4, [r0, #0]
 23fe178:	2c00      	cmp	r4, #0
 23fe17a:	d0f6      	beq.n	23fe16a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fe17c:	4620      	mov	r0, r4
 23fe17e:	f7fb ff48 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fe182:	2114      	movs	r1, #20
 23fe184:	4620      	mov	r0, r4
 23fe186:	f7fa fca6 	bl	23f8ad6 <_ZdlPvj>
 23fe18a:	e7ee      	b.n	23fe16a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fe18c:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fe18e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fe190:	f7fa fc9d 	bl	23f8ace <_Znwj>
 23fe194:	4605      	mov	r5, r0
 23fe196:	b120      	cbz	r0, 23fe1a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
 23fe198:	4631      	mov	r1, r6
 23fe19a:	f7ff ffd1 	bl	23fe140 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fe19e:	7c33      	ldrb	r3, [r6, #16]
 23fe1a0:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fe1a2:	6025      	str	r5, [r4, #0]
	}
 23fe1a4:	e7e1      	b.n	23fe16a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

023fe1a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fe1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe1aa:	4604      	mov	r4, r0
 23fe1ac:	b089      	sub	sp, #36	; 0x24
 23fe1ae:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fe1b0:	a801      	add	r0, sp, #4
 23fe1b2:	4611      	mov	r1, r2
 23fe1b4:	f7ff fe29 	bl	23fde0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fe1b8:	b1a4      	cbz	r4, 23fe1e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fe1ba:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fe1bc:	b11d      	cbz	r5, 23fe1c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fe1be:	4628      	mov	r0, r5
 23fe1c0:	f001 f874 	bl	23ff2ac <strdup>
 23fe1c4:	4605      	mov	r5, r0
 23fe1c6:	a801      	add	r0, sp, #4
 23fe1c8:	a903      	add	r1, sp, #12
        type_(type) {
 23fe1ca:	9503      	str	r5, [sp, #12]
 23fe1cc:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fe1d0:	f7ff fea2 	bl	23fdf18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fe1d4:	a803      	add	r0, sp, #12
 23fe1d6:	f7ff fdba 	bl	23fdd4e <_ZN8particle5ErrorD1Ev>
 23fe1da:	a802      	add	r0, sp, #8
 23fe1dc:	f7fa ff5a 	bl	23f9094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe1e0:	b009      	add	sp, #36	; 0x24
 23fe1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fe1e4:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fe1e6:	9d01      	ldr	r5, [sp, #4]
 23fe1e8:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fe1ec:	2a00      	cmp	r2, #0
 23fe1ee:	d103      	bne.n	23fe1f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fe1f0:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fe1f4:	2900      	cmp	r1, #0
 23fe1f6:	d1f7      	bne.n	23fe1e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fe1f8:	d1ef      	bne.n	23fe1da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fe1fa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fe1fc:	2201      	movs	r2, #1
 23fe1fe:	18eb      	adds	r3, r5, r3
 23fe200:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fe204:	1d2b      	adds	r3, r5, #4
 23fe206:	e8d3 6fef 	ldaex	r6, [r3]
 23fe20a:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fe20e:	2a00      	cmp	r2, #0
 23fe210:	d1f9      	bne.n	23fe206 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fe212:	2e00      	cmp	r6, #0
 23fe214:	d0e1      	beq.n	23fe1da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fe216:	4620      	mov	r0, r4
 23fe218:	f7fb fcdc 	bl	23f9bd4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fe21c:	4607      	mov	r7, r0
 23fe21e:	b160      	cbz	r0, 23fe23a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fe220:	4630      	mov	r0, r6
 23fe222:	f105 010c 	add.w	r1, r5, #12
 23fe226:	f7ff fe1b 	bl	23fde60 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fe22a:	4630      	mov	r0, r6
 23fe22c:	f7fb fef1 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fe230:	2110      	movs	r1, #16
 23fe232:	4630      	mov	r0, r6
 23fe234:	f7fa fc4f 	bl	23f8ad6 <_ZdlPvj>
 23fe238:	e7cf      	b.n	23fe1da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fe23a:	4631      	mov	r1, r6
 23fe23c:	a803      	add	r0, sp, #12
 23fe23e:	f7ff ff7f 	bl	23fe140 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fe242:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fe244:	2010      	movs	r0, #16
 23fe246:	f88d 301c 	strb.w	r3, [sp, #28]
 23fe24a:	f7fa fc40 	bl	23f8ace <_Znwj>
 23fe24e:	4605      	mov	r5, r0
 23fe250:	b1d0      	cbz	r0, 23fe288 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fe252:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe254:	2014      	movs	r0, #20
 23fe256:	f7fa fc3a 	bl	23f8ace <_Znwj>
 23fe25a:	4604      	mov	r4, r0
 23fe25c:	b178      	cbz	r0, 23fe27e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fe25e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fe260:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fe262:	a803      	add	r0, sp, #12
 23fe264:	f7fd fdb0 	bl	23fbdc8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe268:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe26a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe26c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe26e:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fe270:	9205      	str	r2, [sp, #20]
 23fe272:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe274:	60e3      	str	r3, [r4, #12]
 23fe276:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fe27a:	9206      	str	r2, [sp, #24]
 23fe27c:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fe27e:	4b07      	ldr	r3, [pc, #28]	; (23fe29c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe280:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fe282:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fe284:	4b06      	ldr	r3, [pc, #24]	; (23fe2a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fe286:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fe288:	a803      	add	r0, sp, #12
 23fe28a:	f7fb fec2 	bl	23fa012 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fe28e:	2200      	movs	r2, #0
 23fe290:	4629      	mov	r1, r5
 23fe292:	4804      	ldr	r0, [pc, #16]	; (23fe2a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fe294:	f7fb fcac 	bl	23f9bf0 <application_thread_invoke>
 23fe298:	e7c7      	b.n	23fe22a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fe29a:	bf00      	nop
 23fe29c:	023fde73 	.word	0x023fde73
 23fe2a0:	023fe15f 	.word	0x023fe15f
 23fe2a4:	023fe913 	.word	0x023fe913

023fe2a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fe2a8:	4770      	bx	lr

023fe2aa <_ZN9IPAddressD0Ev>:
 23fe2aa:	b510      	push	{r4, lr}
 23fe2ac:	4604      	mov	r4, r0
 23fe2ae:	2118      	movs	r1, #24
 23fe2b0:	f7fa fc11 	bl	23f8ad6 <_ZdlPvj>
 23fe2b4:	4620      	mov	r0, r4
 23fe2b6:	bd10      	pop	{r4, pc}

023fe2b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fe2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fe2ba:	7d03      	ldrb	r3, [r0, #20]
{
 23fe2bc:	460e      	mov	r6, r1
	if (address.v==6) {
 23fe2be:	2b06      	cmp	r3, #6
 23fe2c0:	f04f 0400 	mov.w	r4, #0
{
 23fe2c4:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe2c6:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fe2ca:	d012      	beq.n	23fe2f2 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fe2cc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fe2d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fe2d4:	220a      	movs	r2, #10
 23fe2d6:	4630      	mov	r0, r6
 23fe2d8:	f7fe fc75 	bl	23fcbc6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fe2dc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fe2de:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fe2e0:	d019      	beq.n	23fe316 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fe2e2:	2c00      	cmp	r4, #0
 23fe2e4:	d0f4      	beq.n	23fe2d0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fe2e6:	212e      	movs	r1, #46	; 0x2e
 23fe2e8:	4630      	mov	r0, r6
 23fe2ea:	f7fe fc53 	bl	23fcb94 <_ZN5Print5printEc>
 23fe2ee:	4404      	add	r4, r0
 23fe2f0:	e7ee      	b.n	23fe2d0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe2f2:	232f      	movs	r3, #47	; 0x2f
 23fe2f4:	466a      	mov	r2, sp
 23fe2f6:	4639      	mov	r1, r7
 23fe2f8:	200a      	movs	r0, #10
		buf[0] = 0;
 23fe2fa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe2fe:	f7fb fa7f 	bl	23f9800 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fe302:	4668      	mov	r0, sp
 23fe304:	f7fa fbbe 	bl	23f8a84 <strlen>
 23fe308:	6833      	ldr	r3, [r6, #0]
 23fe30a:	4602      	mov	r2, r0
 23fe30c:	4669      	mov	r1, sp
 23fe30e:	4630      	mov	r0, r6
 23fe310:	68db      	ldr	r3, [r3, #12]
 23fe312:	4798      	blx	r3
 23fe314:	4604      	mov	r4, r0
    }
    return n;
}
 23fe316:	4620      	mov	r0, r4
 23fe318:	b00d      	add	sp, #52	; 0x34
 23fe31a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fe31c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fe31c:	b510      	push	{r4, lr}
 23fe31e:	4604      	mov	r4, r0
 23fe320:	4b04      	ldr	r3, [pc, #16]	; (23fe334 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fe322:	2211      	movs	r2, #17
 23fe324:	2100      	movs	r1, #0
 23fe326:	f840 3b04 	str.w	r3, [r0], #4
 23fe32a:	f000 ff68 	bl	23ff1fe <memset>
}
 23fe32e:	4620      	mov	r0, r4
 23fe330:	bd10      	pop	{r4, pc}
 23fe332:	bf00      	nop
 23fe334:	023ffc04 	.word	0x023ffc04

023fe338 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fe338:	4603      	mov	r3, r0
 23fe33a:	4a07      	ldr	r2, [pc, #28]	; (23fe358 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fe33c:	b510      	push	{r4, lr}
 23fe33e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fe342:	f101 0210 	add.w	r2, r1, #16
 23fe346:	f851 4b04 	ldr.w	r4, [r1], #4
 23fe34a:	4291      	cmp	r1, r2
 23fe34c:	f843 4b04 	str.w	r4, [r3], #4
 23fe350:	d1f9      	bne.n	23fe346 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fe352:	780a      	ldrb	r2, [r1, #0]
 23fe354:	701a      	strb	r2, [r3, #0]
}
 23fe356:	bd10      	pop	{r4, pc}
 23fe358:	023ffc04 	.word	0x023ffc04

023fe35c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fe35c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fe35e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fe362:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fe366:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fe36a:	2304      	movs	r3, #4
 23fe36c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fe370:	6041      	str	r1, [r0, #4]
 23fe372:	7503      	strb	r3, [r0, #20]
}
 23fe374:	bd10      	pop	{r4, pc}
	...

023fe378 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fe378:	b507      	push	{r0, r1, r2, lr}
 23fe37a:	4b06      	ldr	r3, [pc, #24]	; (23fe394 <_ZN9IPAddressC1EPKh+0x1c>)
 23fe37c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fe37e:	78cb      	ldrb	r3, [r1, #3]
 23fe380:	9300      	str	r3, [sp, #0]
 23fe382:	788b      	ldrb	r3, [r1, #2]
 23fe384:	784a      	ldrb	r2, [r1, #1]
 23fe386:	7809      	ldrb	r1, [r1, #0]
 23fe388:	f7ff ffe8 	bl	23fe35c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fe38c:	b003      	add	sp, #12
 23fe38e:	f85d fb04 	ldr.w	pc, [sp], #4
 23fe392:	bf00      	nop
 23fe394:	023ffc04 	.word	0x023ffc04

023fe398 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe398:	7441      	strb	r1, [r0, #17]
}
 23fe39a:	4770      	bx	lr

023fe39c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe39c:	4770      	bx	lr

023fe39e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fe39e:	4770      	bx	lr

023fe3a0 <_ZN9USBSerial4readEv>:
{
 23fe3a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fe3a2:	2100      	movs	r1, #0
 23fe3a4:	7c00      	ldrb	r0, [r0, #16]
 23fe3a6:	f7fb fb89 	bl	23f9abc <HAL_USB_USART_Receive_Data>
}
 23fe3aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe3ae:	bd08      	pop	{r3, pc}

023fe3b0 <_ZN9USBSerial4peekEv>:
{
 23fe3b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fe3b2:	2101      	movs	r1, #1
 23fe3b4:	7c00      	ldrb	r0, [r0, #16]
 23fe3b6:	f7fb fb81 	bl	23f9abc <HAL_USB_USART_Receive_Data>
}
 23fe3ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe3be:	bd08      	pop	{r3, pc}

023fe3c0 <_ZN9USBSerial17availableForWriteEv>:
{
 23fe3c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fe3c2:	7c00      	ldrb	r0, [r0, #16]
 23fe3c4:	f7fb fb6c 	bl	23f9aa0 <HAL_USB_USART_Available_Data_For_Write>
}
 23fe3c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe3cc:	bd08      	pop	{r3, pc}

023fe3ce <_ZN9USBSerial9availableEv>:
{
 23fe3ce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fe3d0:	7c00      	ldrb	r0, [r0, #16]
 23fe3d2:	f7fb fb57 	bl	23f9a84 <HAL_USB_USART_Available_Data>
}
 23fe3d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe3da:	bd08      	pop	{r3, pc}

023fe3dc <_ZN9USBSerial5writeEh>:
{
 23fe3dc:	b513      	push	{r0, r1, r4, lr}
 23fe3de:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe3e0:	7c00      	ldrb	r0, [r0, #16]
{
 23fe3e2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe3e4:	f7fb fb5c 	bl	23f9aa0 <HAL_USB_USART_Available_Data_For_Write>
 23fe3e8:	2800      	cmp	r0, #0
 23fe3ea:	9901      	ldr	r1, [sp, #4]
 23fe3ec:	dc01      	bgt.n	23fe3f2 <_ZN9USBSerial5writeEh+0x16>
 23fe3ee:	7c60      	ldrb	r0, [r4, #17]
 23fe3f0:	b120      	cbz	r0, 23fe3fc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fe3f2:	7c20      	ldrb	r0, [r4, #16]
 23fe3f4:	f7fb fb70 	bl	23f9ad8 <HAL_USB_USART_Send_Data>
 23fe3f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fe3fc:	b002      	add	sp, #8
 23fe3fe:	bd10      	pop	{r4, pc}

023fe400 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fe400:	7c00      	ldrb	r0, [r0, #16]
 23fe402:	f7fb bb77 	b.w	23f9af4 <HAL_USB_USART_Flush_Data>

023fe406 <_ZN9USBSerialD0Ev>:
 23fe406:	b510      	push	{r4, lr}
 23fe408:	4604      	mov	r4, r0
 23fe40a:	2114      	movs	r1, #20
 23fe40c:	f7fa fb63 	bl	23f8ad6 <_ZdlPvj>
 23fe410:	4620      	mov	r0, r4
 23fe412:	bd10      	pop	{r4, pc}

023fe414 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe414:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fe416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe41a:	4604      	mov	r4, r0
 23fe41c:	4608      	mov	r0, r1
 23fe41e:	2100      	movs	r1, #0
 23fe420:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fe424:	4b04      	ldr	r3, [pc, #16]	; (23fe438 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fe426:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe428:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe42a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fe42c:	4611      	mov	r1, r2
  _blocking = true;
 23fe42e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fe430:	f7fb fafe 	bl	23f9a30 <HAL_USB_USART_Init>
}
 23fe434:	4620      	mov	r0, r4
 23fe436:	bd10      	pop	{r4, pc}
 23fe438:	023ffc18 	.word	0x023ffc18

023fe43c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fe43c:	2200      	movs	r2, #0
 23fe43e:	7c00      	ldrb	r0, [r0, #16]
 23fe440:	f7fb bb04 	b.w	23f9a4c <HAL_USB_USART_Begin>

023fe444 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fe444:	7c00      	ldrb	r0, [r0, #16]
 23fe446:	f7fb bb0f 	b.w	23f9a68 <HAL_USB_USART_End>

023fe44a <_Z19acquireSerialBufferv>:
{
 23fe44a:	b510      	push	{r4, lr}
 23fe44c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fe44e:	2214      	movs	r2, #20
 23fe450:	2100      	movs	r1, #0
 23fe452:	f000 fed4 	bl	23ff1fe <memset>
}
 23fe456:	4620      	mov	r0, r4
 23fe458:	bd10      	pop	{r4, pc}
	...

023fe45c <_Z16_fetch_usbserialv>:
{
 23fe45c:	b510      	push	{r4, lr}
 23fe45e:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fe460:	a803      	add	r0, sp, #12
 23fe462:	f7ff fff2 	bl	23fe44a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe466:	4c0c      	ldr	r4, [pc, #48]	; (23fe498 <_Z16_fetch_usbserialv+0x3c>)
 23fe468:	e8d4 1f8f 	ldab	r1, [r4]
 23fe46c:	f011 0101 	ands.w	r1, r1, #1
 23fe470:	d10f      	bne.n	23fe492 <_Z16_fetch_usbserialv+0x36>
 23fe472:	4620      	mov	r0, r4
 23fe474:	9101      	str	r1, [sp, #4]
 23fe476:	f7fa fb3d 	bl	23f8af4 <__cxa_guard_acquire>
 23fe47a:	9901      	ldr	r1, [sp, #4]
 23fe47c:	b148      	cbz	r0, 23fe492 <_Z16_fetch_usbserialv+0x36>
 23fe47e:	aa03      	add	r2, sp, #12
 23fe480:	4806      	ldr	r0, [pc, #24]	; (23fe49c <_Z16_fetch_usbserialv+0x40>)
 23fe482:	f7ff ffc7 	bl	23fe414 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fe486:	4620      	mov	r0, r4
 23fe488:	f7fa fb39 	bl	23f8afe <__cxa_guard_release>
 23fe48c:	4804      	ldr	r0, [pc, #16]	; (23fe4a0 <_Z16_fetch_usbserialv+0x44>)
 23fe48e:	f000 fe71 	bl	23ff174 <atexit>
	return _usbserial;
}
 23fe492:	4802      	ldr	r0, [pc, #8]	; (23fe49c <_Z16_fetch_usbserialv+0x40>)
 23fe494:	b008      	add	sp, #32
 23fe496:	bd10      	pop	{r4, pc}
 23fe498:	1007aebc 	.word	0x1007aebc
 23fe49c:	1007aec0 	.word	0x1007aec0
 23fe4a0:	023fe39d 	.word	0x023fe39d

023fe4a4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fe4a4:	2201      	movs	r2, #1
 23fe4a6:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fe4aa:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fe4ae:	4618      	mov	r0, r3
 23fe4b0:	2901      	cmp	r1, #1
 23fe4b2:	d108      	bne.n	23fe4c6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fe4b4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fe4b8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fe4bc:	3a01      	subs	r2, #1
 23fe4be:	f103 0310 	add.w	r3, r3, #16
 23fe4c2:	d1f2      	bne.n	23fe4aa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fe4c4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fe4c6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fe4c8:	bf04      	itt	eq
 23fe4ca:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fe4ce:	1852      	addeq	r2, r2, r1
 23fe4d0:	e7f4      	b.n	23fe4bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fe4d2 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fe4d2:	b40e      	push	{r1, r2, r3}
 23fe4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe4d6:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe4d8:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fe4da:	af00      	add	r7, sp, #0
 23fe4dc:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fe4e0:	f855 2b04 	ldr.w	r2, [r5], #4
 23fe4e4:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe4e6:	462b      	mov	r3, r5
 23fe4e8:	1878      	adds	r0, r7, r1
 23fe4ea:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fe4ec:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe4ee:	f7fb fceb 	bl	23f9ec8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fe4f2:	280f      	cmp	r0, #15
 23fe4f4:	687a      	ldr	r2, [r7, #4]
 23fe4f6:	d91a      	bls.n	23fe52e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fe4f8:	f100 0308 	add.w	r3, r0, #8
 23fe4fc:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fe500:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fe502:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe506:	1c41      	adds	r1, r0, #1
 23fe508:	462b      	mov	r3, r5
 23fe50a:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fe50c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe50e:	f7fb fcdb 	bl	23f9ec8 <vsnprintf>
        if (n > 0) {
 23fe512:	1e02      	subs	r2, r0, #0
 23fe514:	dd04      	ble.n	23fe520 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fe516:	6823      	ldr	r3, [r4, #0]
 23fe518:	4669      	mov	r1, sp
 23fe51a:	4620      	mov	r0, r4
 23fe51c:	689b      	ldr	r3, [r3, #8]
 23fe51e:	4798      	blx	r3
 23fe520:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fe522:	3720      	adds	r7, #32
 23fe524:	46bd      	mov	sp, r7
 23fe526:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fe52a:	b003      	add	sp, #12
 23fe52c:	4770      	bx	lr
    } else if (n > 0) {
 23fe52e:	2800      	cmp	r0, #0
 23fe530:	d0f7      	beq.n	23fe522 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fe532:	6823      	ldr	r3, [r4, #0]
 23fe534:	4602      	mov	r2, r0
 23fe536:	689b      	ldr	r3, [r3, #8]
 23fe538:	4620      	mov	r0, r4
 23fe53a:	f107 0110 	add.w	r1, r7, #16
 23fe53e:	4798      	blx	r3
}
 23fe540:	e7ef      	b.n	23fe522 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fe542 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe542:	b538      	push	{r3, r4, r5, lr}
 23fe544:	680b      	ldr	r3, [r1, #0]
 23fe546:	4604      	mov	r4, r0
 23fe548:	6003      	str	r3, [r0, #0]
 23fe54a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fe54c:	6843      	ldr	r3, [r0, #4]
 23fe54e:	429d      	cmp	r5, r3
 23fe550:	d008      	beq.n	23fe564 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fe552:	b115      	cbz	r5, 23fe55a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fe554:	686b      	ldr	r3, [r5, #4]
 23fe556:	3301      	adds	r3, #1
 23fe558:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fe55a:	6860      	ldr	r0, [r4, #4]
 23fe55c:	b108      	cbz	r0, 23fe562 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fe55e:	f7fa fb0b 	bl	23f8b78 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fe562:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe564:	bd38      	pop	{r3, r4, r5, pc}

023fe566 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 23fe566:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fe568:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fe56a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fe56e:	2201      	movs	r2, #1
 23fe570:	689b      	ldr	r3, [r3, #8]
 23fe572:	f10d 0107 	add.w	r1, sp, #7
 23fe576:	4798      	blx	r3
}
 23fe578:	b003      	add	sp, #12
 23fe57a:	f85d fb04 	ldr.w	pc, [sp], #4

023fe57e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fe57e:	460b      	mov	r3, r1
 23fe580:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fe582:	2200      	movs	r2, #0
 23fe584:	b510      	push	{r4, lr}
 23fe586:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fe588:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fe58c:	6083      	str	r3, [r0, #8]
    if (t) {
 23fe58e:	b90b      	cbnz	r3, 23fe594 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fe590:	4620      	mov	r0, r4
 23fe592:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fe594:	f7ff ffd5 	bl	23fe542 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fe598:	e7fa      	b.n	23fe590 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fe59a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fe59a:	6883      	ldr	r3, [r0, #8]
 23fe59c:	b1eb      	cbz	r3, 23fe5da <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fe59e:	781a      	ldrb	r2, [r3, #0]
 23fe5a0:	2a03      	cmp	r2, #3
 23fe5a2:	d81a      	bhi.n	23fe5da <_ZNK5spark9JSONValue4typeEv+0x40>
 23fe5a4:	e8df f002 	tbb	[pc, r2]
 23fe5a8:	1b021704 	.word	0x1b021704
 23fe5ac:	2005      	movs	r0, #5
 23fe5ae:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fe5b0:	6802      	ldr	r2, [r0, #0]
 23fe5b2:	685b      	ldr	r3, [r3, #4]
 23fe5b4:	6852      	ldr	r2, [r2, #4]
 23fe5b6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fe5b8:	282d      	cmp	r0, #45	; 0x2d
 23fe5ba:	d012      	beq.n	23fe5e2 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fe5bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fe5c0:	2b09      	cmp	r3, #9
 23fe5c2:	d90e      	bls.n	23fe5e2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fe5c4:	2874      	cmp	r0, #116	; 0x74
 23fe5c6:	d00e      	beq.n	23fe5e6 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fe5c8:	2866      	cmp	r0, #102	; 0x66
 23fe5ca:	d00c      	beq.n	23fe5e6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fe5cc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fe5d0:	4258      	negs	r0, r3
 23fe5d2:	4158      	adcs	r0, r3
 23fe5d4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fe5d6:	2006      	movs	r0, #6
 23fe5d8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fe5da:	2000      	movs	r0, #0
 23fe5dc:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fe5de:	2004      	movs	r0, #4
 23fe5e0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fe5e2:	2003      	movs	r0, #3
 23fe5e4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fe5e6:	2002      	movs	r0, #2
}
 23fe5e8:	4770      	bx	lr

023fe5ea <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fe5ea:	b510      	push	{r4, lr}
 23fe5ec:	4604      	mov	r4, r0
    switch (type()) {
 23fe5ee:	f7ff ffd4 	bl	23fe59a <_ZNK5spark9JSONValue4typeEv>
 23fe5f2:	2802      	cmp	r0, #2
 23fe5f4:	d00e      	beq.n	23fe614 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fe5f6:	1ec3      	subs	r3, r0, #3
 23fe5f8:	b2db      	uxtb	r3, r3
 23fe5fa:	2b01      	cmp	r3, #1
 23fe5fc:	d814      	bhi.n	23fe628 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fe5fe:	6822      	ldr	r2, [r4, #0]
 23fe600:	68a3      	ldr	r3, [r4, #8]
 23fe602:	6850      	ldr	r0, [r2, #4]
 23fe604:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fe606:	220a      	movs	r2, #10
}
 23fe608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fe60c:	2100      	movs	r1, #0
 23fe60e:	4418      	add	r0, r3
 23fe610:	f000 bf20 	b.w	23ff454 <strtol>
        const char* const s = d_->json + t_->start;
 23fe614:	6822      	ldr	r2, [r4, #0]
 23fe616:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fe618:	6852      	ldr	r2, [r2, #4]
 23fe61a:	685b      	ldr	r3, [r3, #4]
 23fe61c:	5cd0      	ldrb	r0, [r2, r3]
 23fe61e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fe622:	4258      	negs	r0, r3
 23fe624:	4158      	adcs	r0, r3
}
 23fe626:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fe628:	2000      	movs	r0, #0
 23fe62a:	e7fc      	b.n	23fe626 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fe62c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fe62c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fe62e:	2300      	movs	r3, #0
 23fe630:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fe632:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fe636:	480e      	ldr	r0, [pc, #56]	; (23fe670 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fe638:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fe63c:	b1a9      	cbz	r1, 23fe66a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fe63e:	780b      	ldrb	r3, [r1, #0]
 23fe640:	2b03      	cmp	r3, #3
 23fe642:	d006      	beq.n	23fe652 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fe644:	b98b      	cbnz	r3, 23fe66a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fe646:	6813      	ldr	r3, [r2, #0]
 23fe648:	6858      	ldr	r0, [r3, #4]
 23fe64a:	684b      	ldr	r3, [r1, #4]
 23fe64c:	5cc3      	ldrb	r3, [r0, r3]
 23fe64e:	2b6e      	cmp	r3, #110	; 0x6e
 23fe650:	d007      	beq.n	23fe662 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fe652:	6813      	ldr	r3, [r2, #0]
 23fe654:	684d      	ldr	r5, [r1, #4]
 23fe656:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fe658:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fe65a:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fe65c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fe65e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fe660:	60e3      	str	r3, [r4, #12]
 23fe662:	4611      	mov	r1, r2
 23fe664:	4620      	mov	r0, r4
 23fe666:	f7ff ff6c 	bl	23fe542 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fe66a:	4620      	mov	r0, r4
 23fe66c:	bd38      	pop	{r3, r4, r5, pc}
 23fe66e:	bf00      	nop
 23fe670:	023ffb49 	.word	0x023ffb49

023fe674 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fe674:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fe676:	2500      	movs	r5, #0
 23fe678:	460b      	mov	r3, r1
 23fe67a:	4604      	mov	r4, r0
 23fe67c:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fe67e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fe682:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fe686:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fe68a:	b14b      	cbz	r3, 23fe6a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fe68c:	781a      	ldrb	r2, [r3, #0]
 23fe68e:	2a01      	cmp	r2, #1
 23fe690:	d106      	bne.n	23fe6a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fe692:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fe696:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fe698:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fe69a:	6143      	str	r3, [r0, #20]
 23fe69c:	f7ff ff51 	bl	23fe542 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fe6a0:	4620      	mov	r0, r4
 23fe6a2:	bd38      	pop	{r3, r4, r5, pc}

023fe6a4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fe6a4:	b510      	push	{r4, lr}
    if (!n_) {
 23fe6a6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fe6a8:	4604      	mov	r4, r0
    if (!n_) {
 23fe6aa:	b163      	cbz	r3, 23fe6c6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fe6ac:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fe6ae:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fe6b0:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fe6b2:	3010      	adds	r0, #16
 23fe6b4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fe6b6:	6120      	str	r0, [r4, #16]
    --n_;
 23fe6b8:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fe6ba:	b113      	cbz	r3, 23fe6c2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fe6bc:	f7ff fef2 	bl	23fe4a4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fe6c0:	60a0      	str	r0, [r4, #8]
    return true;
 23fe6c2:	2001      	movs	r0, #1
 23fe6c4:	e000      	b.n	23fe6c8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fe6c6:	4618      	mov	r0, r3
}
 23fe6c8:	bd10      	pop	{r4, pc}

023fe6ca <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fe6ca:	b510      	push	{r4, lr}
    write('}');
 23fe6cc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fe6ce:	4604      	mov	r4, r0
    write('}');
 23fe6d0:	f7ff ff49 	bl	23fe566 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fe6d4:	2301      	movs	r3, #1
}
 23fe6d6:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe6d8:	7123      	strb	r3, [r4, #4]
}
 23fe6da:	bd10      	pop	{r4, pc}

023fe6dc <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fe6dc:	b508      	push	{r3, lr}
    switch (state_) {
 23fe6de:	7903      	ldrb	r3, [r0, #4]
 23fe6e0:	2b01      	cmp	r3, #1
 23fe6e2:	d002      	beq.n	23fe6ea <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fe6e4:	2b02      	cmp	r3, #2
 23fe6e6:	d004      	beq.n	23fe6f2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fe6e8:	bd08      	pop	{r3, pc}
        write(',');
 23fe6ea:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fe6ec:	f7ff ff3b 	bl	23fe566 <_ZN5spark10JSONWriter5writeEc>
}
 23fe6f0:	e7fa      	b.n	23fe6e8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fe6f2:	213a      	movs	r1, #58	; 0x3a
 23fe6f4:	e7fa      	b.n	23fe6ec <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fe6f6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fe6f6:	b510      	push	{r4, lr}
 23fe6f8:	4604      	mov	r4, r0
    writeSeparator();
 23fe6fa:	f7ff ffef 	bl	23fe6dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fe6fe:	4620      	mov	r0, r4
 23fe700:	217b      	movs	r1, #123	; 0x7b
 23fe702:	f7ff ff30 	bl	23fe566 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fe706:	2300      	movs	r3, #0
}
 23fe708:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fe70a:	7123      	strb	r3, [r4, #4]
}
 23fe70c:	bd10      	pop	{r4, pc}
	...

023fe710 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fe710:	b513      	push	{r0, r1, r4, lr}
 23fe712:	4604      	mov	r4, r0
 23fe714:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fe716:	f7ff ffe1 	bl	23fe6dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fe71a:	6823      	ldr	r3, [r4, #0]
 23fe71c:	4620      	mov	r0, r4
 23fe71e:	68db      	ldr	r3, [r3, #12]
 23fe720:	9a01      	ldr	r2, [sp, #4]
 23fe722:	4903      	ldr	r1, [pc, #12]	; (23fe730 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fe724:	4798      	blx	r3
    state_ = NEXT;
 23fe726:	2301      	movs	r3, #1
}
 23fe728:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe72a:	7123      	strb	r3, [r4, #4]
}
 23fe72c:	b002      	add	sp, #8
 23fe72e:	bd10      	pop	{r4, pc}
 23fe730:	023ffb23 	.word	0x023ffb23

023fe734 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fe734:	b513      	push	{r0, r1, r4, lr}
 23fe736:	4604      	mov	r4, r0
 23fe738:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fe73a:	f7ff ffcf 	bl	23fe6dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fe73e:	6823      	ldr	r3, [r4, #0]
 23fe740:	4620      	mov	r0, r4
 23fe742:	68db      	ldr	r3, [r3, #12]
 23fe744:	9a01      	ldr	r2, [sp, #4]
 23fe746:	4903      	ldr	r1, [pc, #12]	; (23fe754 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fe748:	4798      	blx	r3
    state_ = NEXT;
 23fe74a:	2301      	movs	r3, #1
}
 23fe74c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe74e:	7123      	strb	r3, [r4, #4]
}
 23fe750:	b002      	add	sp, #8
 23fe752:	bd10      	pop	{r4, pc}
 23fe754:	023ffc44 	.word	0x023ffc44

023fe758 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fe758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe75c:	460d      	mov	r5, r1
 23fe75e:	4690      	mov	r8, r2
    write('"');
 23fe760:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fe762:	4604      	mov	r4, r0
 23fe764:	462f      	mov	r7, r5
    write('"');
 23fe766:	f7ff fefe 	bl	23fe566 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fe76a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fe810 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fe76e:	44a8      	add	r8, r5
    while (s != end) {
 23fe770:	4547      	cmp	r7, r8
 23fe772:	46ba      	mov	sl, r7
 23fe774:	d03d      	beq.n	23fe7f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fe776:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fe77a:	2e22      	cmp	r6, #34	; 0x22
 23fe77c:	d006      	beq.n	23fe78c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fe77e:	2e5c      	cmp	r6, #92	; 0x5c
 23fe780:	d004      	beq.n	23fe78c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fe782:	4630      	mov	r0, r6
 23fe784:	f000 fcfc 	bl	23ff180 <isprint>
 23fe788:	2800      	cmp	r0, #0
 23fe78a:	d1f1      	bne.n	23fe770 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fe78c:	6823      	ldr	r3, [r4, #0]
 23fe78e:	4629      	mov	r1, r5
 23fe790:	4620      	mov	r0, r4
 23fe792:	689b      	ldr	r3, [r3, #8]
 23fe794:	ebaa 0205 	sub.w	r2, sl, r5
 23fe798:	4798      	blx	r3
            write('\\');
 23fe79a:	215c      	movs	r1, #92	; 0x5c
 23fe79c:	4620      	mov	r0, r4
 23fe79e:	f7ff fee2 	bl	23fe566 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fe7a2:	2e0d      	cmp	r6, #13
 23fe7a4:	d80a      	bhi.n	23fe7bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fe7a6:	2e07      	cmp	r6, #7
 23fe7a8:	d91c      	bls.n	23fe7e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fe7aa:	f1a6 0308 	sub.w	r3, r6, #8
 23fe7ae:	2b05      	cmp	r3, #5
 23fe7b0:	d818      	bhi.n	23fe7e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fe7b2:	e8df f003 	tbb	[pc, r3]
 23fe7b6:	0f0d      	.short	0x0f0d
 23fe7b8:	15131711 	.word	0x15131711
 23fe7bc:	2e22      	cmp	r6, #34	; 0x22
 23fe7be:	d001      	beq.n	23fe7c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fe7c0:	2e5c      	cmp	r6, #92	; 0x5c
 23fe7c2:	d10f      	bne.n	23fe7e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fe7c4:	4631      	mov	r1, r6
                write('b');
 23fe7c6:	4620      	mov	r0, r4
 23fe7c8:	f7ff fecd 	bl	23fe566 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fe7cc:	463d      	mov	r5, r7
    while (s != end) {
 23fe7ce:	e7cf      	b.n	23fe770 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fe7d0:	2162      	movs	r1, #98	; 0x62
 23fe7d2:	e7f8      	b.n	23fe7c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fe7d4:	2174      	movs	r1, #116	; 0x74
 23fe7d6:	e7f6      	b.n	23fe7c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fe7d8:	216e      	movs	r1, #110	; 0x6e
 23fe7da:	e7f4      	b.n	23fe7c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fe7dc:	2166      	movs	r1, #102	; 0x66
 23fe7de:	e7f2      	b.n	23fe7c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fe7e0:	2172      	movs	r1, #114	; 0x72
 23fe7e2:	e7f0      	b.n	23fe7c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fe7e4:	6823      	ldr	r3, [r4, #0]
 23fe7e6:	4632      	mov	r2, r6
 23fe7e8:	4649      	mov	r1, r9
 23fe7ea:	4620      	mov	r0, r4
 23fe7ec:	68db      	ldr	r3, [r3, #12]
 23fe7ee:	4798      	blx	r3
                break;
 23fe7f0:	e7ec      	b.n	23fe7cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fe7f2:	42bd      	cmp	r5, r7
 23fe7f4:	d005      	beq.n	23fe802 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fe7f6:	6823      	ldr	r3, [r4, #0]
 23fe7f8:	4629      	mov	r1, r5
 23fe7fa:	4620      	mov	r0, r4
 23fe7fc:	689b      	ldr	r3, [r3, #8]
 23fe7fe:	1b7a      	subs	r2, r7, r5
 23fe800:	4798      	blx	r3
    }
    write('"');
 23fe802:	2122      	movs	r1, #34	; 0x22
 23fe804:	4620      	mov	r0, r4
 23fe806:	f7ff feae 	bl	23fe566 <_ZN5spark10JSONWriter5writeEc>
}
 23fe80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe80e:	bf00      	nop
 23fe810:	023ffc47 	.word	0x023ffc47

023fe814 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fe814:	b513      	push	{r0, r1, r4, lr}
 23fe816:	4604      	mov	r4, r0
 23fe818:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fe81c:	f7ff ff5e 	bl	23fe6dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fe820:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fe824:	4620      	mov	r0, r4
 23fe826:	f7ff ff97 	bl	23fe758 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fe82a:	2302      	movs	r3, #2
}
 23fe82c:	4620      	mov	r0, r4
    state_ = VALUE;
 23fe82e:	7123      	strb	r3, [r4, #4]
}
 23fe830:	b002      	add	sp, #8
 23fe832:	bd10      	pop	{r4, pc}

023fe834 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fe834:	b513      	push	{r0, r1, r4, lr}
 23fe836:	4604      	mov	r4, r0
 23fe838:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fe83c:	f7ff ff4e 	bl	23fe6dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fe840:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fe844:	4620      	mov	r0, r4
 23fe846:	f7ff ff87 	bl	23fe758 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fe84a:	2301      	movs	r3, #1
}
 23fe84c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe84e:	7123      	strb	r3, [r4, #4]
}
 23fe850:	b002      	add	sp, #8
 23fe852:	bd10      	pop	{r4, pc}

023fe854 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fe854:	4770      	bx	lr

023fe856 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe856:	7441      	strb	r1, [r0, #17]
}
 23fe858:	4770      	bx	lr

023fe85a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fe85a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fe85c:	7c00      	ldrb	r0, [r0, #16]
 23fe85e:	f7fb f83f 	bl	23f98e0 <hal_usart_available_data_for_write>
}
 23fe862:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe866:	bd08      	pop	{r3, pc}

023fe868 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fe868:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fe86a:	7c00      	ldrb	r0, [r0, #16]
 23fe86c:	f7fa fff2 	bl	23f9854 <hal_usart_available>
}
 23fe870:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe874:	bd08      	pop	{r3, pc}

023fe876 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fe876:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fe878:	7c00      	ldrb	r0, [r0, #16]
 23fe87a:	f7fb f807 	bl	23f988c <hal_usart_peek>
}
 23fe87e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe882:	bd08      	pop	{r3, pc}

023fe884 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fe884:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fe886:	7c00      	ldrb	r0, [r0, #16]
 23fe888:	f7fa fff2 	bl	23f9870 <hal_usart_read>
}
 23fe88c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe890:	bd08      	pop	{r3, pc}

023fe892 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fe892:	7c00      	ldrb	r0, [r0, #16]
 23fe894:	f7fb b808 	b.w	23f98a8 <hal_usart_flush>

023fe898 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fe898:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe89a:	7c45      	ldrb	r5, [r0, #17]
{
 23fe89c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe89e:	b12d      	cbz	r5, 23fe8ac <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fe8a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fe8a2:	b003      	add	sp, #12
 23fe8a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fe8a8:	f7fa bfc6 	b.w	23f9838 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe8ac:	7c00      	ldrb	r0, [r0, #16]
 23fe8ae:	9101      	str	r1, [sp, #4]
 23fe8b0:	f7fb f816 	bl	23f98e0 <hal_usart_available_data_for_write>
 23fe8b4:	2800      	cmp	r0, #0
 23fe8b6:	9901      	ldr	r1, [sp, #4]
 23fe8b8:	dcf2      	bgt.n	23fe8a0 <_ZN11USARTSerial5writeEh+0x8>
}
 23fe8ba:	4628      	mov	r0, r5
 23fe8bc:	b003      	add	sp, #12
 23fe8be:	bd30      	pop	{r4, r5, pc}

023fe8c0 <_ZN11USARTSerialD0Ev>:
 23fe8c0:	b510      	push	{r4, lr}
 23fe8c2:	4604      	mov	r4, r0
 23fe8c4:	2114      	movs	r1, #20
 23fe8c6:	f7fa f906 	bl	23f8ad6 <_ZdlPvj>
 23fe8ca:	4620      	mov	r0, r4
 23fe8cc:	bd10      	pop	{r4, pc}
	...

023fe8d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe8d0:	b510      	push	{r4, lr}
 23fe8d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe8d6:	4604      	mov	r4, r0
 23fe8d8:	4608      	mov	r0, r1
 23fe8da:	4611      	mov	r1, r2
 23fe8dc:	2200      	movs	r2, #0
 23fe8de:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe8e2:	4b04      	ldr	r3, [pc, #16]	; (23fe8f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fe8e4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe8e6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe8e8:	2301      	movs	r3, #1
 23fe8ea:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fe8ec:	f7fb f814 	bl	23f9918 <hal_usart_init_ex>
}
 23fe8f0:	4620      	mov	r0, r4
 23fe8f2:	bd10      	pop	{r4, pc}
 23fe8f4:	023ffc58 	.word	0x023ffc58

023fe8f8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fe8f8:	2300      	movs	r3, #0
 23fe8fa:	7c00      	ldrb	r0, [r0, #16]
 23fe8fc:	f7fa bffe 	b.w	23f98fc <hal_usart_begin_config>

023fe900 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fe900:	2200      	movs	r2, #0
 23fe902:	f7ff bff9 	b.w	23fe8f8 <_ZN11USARTSerial5beginEmm>

023fe906 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fe906:	7c00      	ldrb	r0, [r0, #16]
 23fe908:	f7fa bf88 	b.w	23f981c <hal_usart_end>

023fe90c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fe90c:	7c00      	ldrb	r0, [r0, #16]
 23fe90e:	f7fa bfd9 	b.w	23f98c4 <hal_usart_is_enabled>

023fe912 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fe912:	b510      	push	{r4, lr}
      if (_M_empty())
 23fe914:	6883      	ldr	r3, [r0, #8]
 23fe916:	4604      	mov	r4, r0
 23fe918:	b90b      	cbnz	r3, 23fe91e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fe91a:	f000 fb15 	bl	23fef48 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe91e:	68c3      	ldr	r3, [r0, #12]
 23fe920:	4798      	blx	r3
      if (_M_manager)
 23fe922:	68a3      	ldr	r3, [r4, #8]
 23fe924:	b11b      	cbz	r3, 23fe92e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe926:	2203      	movs	r2, #3
 23fe928:	4621      	mov	r1, r4
 23fe92a:	4620      	mov	r0, r4
 23fe92c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fe92e:	4620      	mov	r0, r4
}
 23fe930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fe934:	2110      	movs	r1, #16
 23fe936:	f7fa b8ce 	b.w	23f8ad6 <_ZdlPvj>

023fe93a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fe93a:	4770      	bx	lr

023fe93c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fe93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe93e:	4606      	mov	r6, r0
 23fe940:	4615      	mov	r5, r2
 23fe942:	460c      	mov	r4, r1
 23fe944:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fe946:	42bc      	cmp	r4, r7
 23fe948:	d006      	beq.n	23fe958 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fe94a:	6833      	ldr	r3, [r6, #0]
 23fe94c:	4630      	mov	r0, r6
 23fe94e:	689b      	ldr	r3, [r3, #8]
 23fe950:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fe954:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fe956:	e7f6      	b.n	23fe946 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fe958:	4628      	mov	r0, r5
 23fe95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe95c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fe95c:	2200      	movs	r2, #0
 23fe95e:	7c00      	ldrb	r0, [r0, #16]
 23fe960:	f7fa bfe8 	b.w	23f9934 <hal_i2c_write>

023fe964 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fe964:	2100      	movs	r1, #0
 23fe966:	7c00      	ldrb	r0, [r0, #16]
 23fe968:	f7fa bff2 	b.w	23f9950 <hal_i2c_available>

023fe96c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fe96c:	2100      	movs	r1, #0
 23fe96e:	7c00      	ldrb	r0, [r0, #16]
 23fe970:	f7fa bffc 	b.w	23f996c <hal_i2c_read>

023fe974 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fe974:	2100      	movs	r1, #0
 23fe976:	7c00      	ldrb	r0, [r0, #16]
 23fe978:	f7fb b806 	b.w	23f9988 <hal_i2c_peek>

023fe97c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fe97c:	2100      	movs	r1, #0
 23fe97e:	7c00      	ldrb	r0, [r0, #16]
 23fe980:	f7fb b810 	b.w	23f99a4 <hal_i2c_flush>

023fe984 <_ZN7TwoWireD0Ev>:
 23fe984:	b510      	push	{r4, lr}
 23fe986:	4604      	mov	r4, r0
 23fe988:	2114      	movs	r1, #20
 23fe98a:	f7fa f8a4 	bl	23f8ad6 <_ZdlPvj>
 23fe98e:	4620      	mov	r0, r4
 23fe990:	bd10      	pop	{r4, pc}
	...

023fe994 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe994:	b538      	push	{r3, r4, r5, lr}
 23fe996:	4604      	mov	r4, r0
 23fe998:	4615      	mov	r5, r2
 23fe99a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe99e:	2200      	movs	r2, #0
 23fe9a0:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe9a4:	4b09      	ldr	r3, [pc, #36]	; (23fe9cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fe9a6:	4608      	mov	r0, r1
  _i2c = i2c;
 23fe9a8:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe9aa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fe9ac:	4629      	mov	r1, r5
 23fe9ae:	f7fb f815 	bl	23f99dc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe9b2:	30bf      	adds	r0, #191	; 0xbf
 23fe9b4:	d108      	bne.n	23fe9c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fe9b6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe9b8:	07db      	lsls	r3, r3, #31
 23fe9ba:	d505      	bpl.n	23fe9c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fe9bc:	6868      	ldr	r0, [r5, #4]
 23fe9be:	f7fb fa67 	bl	23f9e90 <free>
    free(conf.tx_buffer);
 23fe9c2:	68e8      	ldr	r0, [r5, #12]
 23fe9c4:	f7fb fa64 	bl	23f9e90 <free>
}
 23fe9c8:	4620      	mov	r0, r4
 23fe9ca:	bd38      	pop	{r3, r4, r5, pc}
 23fe9cc:	023ffc8c 	.word	0x023ffc8c

023fe9d0 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23fe9d0:	21ff      	movs	r1, #255	; 0xff
 23fe9d2:	2200      	movs	r2, #0
      : address_{address},
 23fe9d4:	4b04      	ldr	r3, [pc, #16]	; (23fe9e8 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23fe9d6:	2001      	movs	r0, #1
 23fe9d8:	e9c3 1200 	strd	r1, r2, [r3]
 23fe9dc:	2164      	movs	r1, #100	; 0x64
 23fe9de:	611a      	str	r2, [r3, #16]
 23fe9e0:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23fe9e4:	4770      	bx	lr
 23fe9e6:	bf00      	nop
 23fe9e8:	1007aed4 	.word	0x1007aed4

023fe9ec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fe9ec:	2200      	movs	r2, #0
 23fe9ee:	6840      	ldr	r0, [r0, #4]
 23fe9f0:	4611      	mov	r1, r2
 23fe9f2:	f7fb b951 	b.w	23f9c98 <network_ready>

023fe9f6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe9f6:	2200      	movs	r2, #0
 23fe9f8:	6840      	ldr	r0, [r0, #4]
 23fe9fa:	4611      	mov	r1, r2
 23fe9fc:	f7fb b984 	b.w	23f9d08 <network_listening>

023fea00 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fea00:	2200      	movs	r2, #0
 23fea02:	6840      	ldr	r0, [r0, #4]
 23fea04:	4611      	mov	r1, r2
 23fea06:	f7fb b99b 	b.w	23f9d40 <network_get_listen_timeout>

023fea0a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fea0a:	2200      	movs	r2, #0
 23fea0c:	6840      	ldr	r0, [r0, #4]
 23fea0e:	f7fb b989 	b.w	23f9d24 <network_set_listen_timeout>

023fea12 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fea12:	2200      	movs	r2, #0
 23fea14:	6840      	ldr	r0, [r0, #4]
 23fea16:	f081 0101 	eor.w	r1, r1, #1
 23fea1a:	f7fb b967 	b.w	23f9cec <network_listen>

023fea1e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fea1e:	2300      	movs	r3, #0
 23fea20:	6840      	ldr	r0, [r0, #4]
 23fea22:	461a      	mov	r2, r3
 23fea24:	4619      	mov	r1, r3
 23fea26:	f7fb b953 	b.w	23f9cd0 <network_off>

023fea2a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fea2a:	2300      	movs	r3, #0
 23fea2c:	6840      	ldr	r0, [r0, #4]
 23fea2e:	461a      	mov	r2, r3
 23fea30:	4619      	mov	r1, r3
 23fea32:	f7fb b93f 	b.w	23f9cb4 <network_on>

023fea36 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fea36:	2200      	movs	r2, #0
 23fea38:	6840      	ldr	r0, [r0, #4]
 23fea3a:	4611      	mov	r1, r2
 23fea3c:	f7fb b910 	b.w	23f9c60 <network_connecting>

023fea40 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fea40:	2200      	movs	r2, #0
 23fea42:	2102      	movs	r1, #2
 23fea44:	6840      	ldr	r0, [r0, #4]
 23fea46:	f7fb b919 	b.w	23f9c7c <network_disconnect>

023fea4a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fea4a:	2300      	movs	r3, #0
 23fea4c:	6840      	ldr	r0, [r0, #4]
 23fea4e:	461a      	mov	r2, r3
 23fea50:	f7fb b8f8 	b.w	23f9c44 <network_connect>

023fea54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fea54:	2204      	movs	r2, #4
 23fea56:	4b02      	ldr	r3, [pc, #8]	; (23fea60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fea58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fea5a:	4a02      	ldr	r2, [pc, #8]	; (23fea64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fea5c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fea5e:	4770      	bx	lr
 23fea60:	1007aee8 	.word	0x1007aee8
 23fea64:	023ffcb8 	.word	0x023ffcb8

023fea68 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fea68:	2300      	movs	r3, #0
 23fea6a:	6840      	ldr	r0, [r0, #4]
 23fea6c:	461a      	mov	r2, r3
 23fea6e:	f7fb b8e9 	b.w	23f9c44 <network_connect>

023fea72 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fea72:	2200      	movs	r2, #0
 23fea74:	2102      	movs	r1, #2
 23fea76:	6840      	ldr	r0, [r0, #4]
 23fea78:	f7fb b900 	b.w	23f9c7c <network_disconnect>

023fea7c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fea7c:	2200      	movs	r2, #0
 23fea7e:	6840      	ldr	r0, [r0, #4]
 23fea80:	4611      	mov	r1, r2
 23fea82:	f7fb b8ed 	b.w	23f9c60 <network_connecting>

023fea86 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fea86:	2200      	movs	r2, #0
 23fea88:	6840      	ldr	r0, [r0, #4]
 23fea8a:	4611      	mov	r1, r2
 23fea8c:	f7fb b904 	b.w	23f9c98 <network_ready>

023fea90 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fea90:	2300      	movs	r3, #0
 23fea92:	6840      	ldr	r0, [r0, #4]
 23fea94:	461a      	mov	r2, r3
 23fea96:	4619      	mov	r1, r3
 23fea98:	f7fb b90c 	b.w	23f9cb4 <network_on>

023fea9c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fea9c:	2300      	movs	r3, #0
 23fea9e:	6840      	ldr	r0, [r0, #4]
 23feaa0:	461a      	mov	r2, r3
 23feaa2:	4619      	mov	r1, r3
 23feaa4:	f7fb b914 	b.w	23f9cd0 <network_off>

023feaa8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23feaa8:	2100      	movs	r1, #0
 23feaaa:	6840      	ldr	r0, [r0, #4]
 23feaac:	f7fb b956 	b.w	23f9d5c <network_is_on>

023feab0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23feab0:	2100      	movs	r1, #0
 23feab2:	6840      	ldr	r0, [r0, #4]
 23feab4:	f7fb b960 	b.w	23f9d78 <network_is_off>

023feab8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23feab8:	2200      	movs	r2, #0
 23feaba:	6840      	ldr	r0, [r0, #4]
 23feabc:	f081 0101 	eor.w	r1, r1, #1
 23feac0:	f7fb b914 	b.w	23f9cec <network_listen>

023feac4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23feac4:	2200      	movs	r2, #0
 23feac6:	6840      	ldr	r0, [r0, #4]
 23feac8:	f7fb b92c 	b.w	23f9d24 <network_set_listen_timeout>

023feacc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23feacc:	2200      	movs	r2, #0
 23feace:	6840      	ldr	r0, [r0, #4]
 23fead0:	4611      	mov	r1, r2
 23fead2:	f7fb b935 	b.w	23f9d40 <network_get_listen_timeout>

023fead6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fead6:	2200      	movs	r2, #0
 23fead8:	6840      	ldr	r0, [r0, #4]
 23feada:	4611      	mov	r1, r2
 23feadc:	f7fb b914 	b.w	23f9d08 <network_listening>

023feae0 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23feae0:	2100      	movs	r1, #0
 23feae2:	6840      	ldr	r0, [r0, #4]
 23feae4:	f7fb b964 	b.w	23f9db0 <network_is_preferred>

023feae8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23feae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23feaec:	b095      	sub	sp, #84	; 0x54
 23feaee:	4614      	mov	r4, r2
 23feaf0:	460d      	mov	r5, r1
 23feaf2:	4607      	mov	r7, r0
    IPAddress addr;
 23feaf4:	f7ff fc12 	bl	23fe31c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23feaf8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23feafa:	221c      	movs	r2, #28
 23feafc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23feafe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23feb00:	f000 fb7d 	bl	23ff1fe <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23feb04:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23feb06:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23feb08:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23feb0a:	2100      	movs	r1, #0
 23feb0c:	466b      	mov	r3, sp
 23feb0e:	aa0c      	add	r2, sp, #48	; 0x30
 23feb10:	f7fa fcd2 	bl	23f94b8 <netdb_getaddrinfo>
    if (!r) {
 23feb14:	4604      	mov	r4, r0
 23feb16:	2800      	cmp	r0, #0
 23feb18:	d14b      	bne.n	23febb2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23feb1a:	4602      	mov	r2, r0
 23feb1c:	2101      	movs	r1, #1
 23feb1e:	6868      	ldr	r0, [r5, #4]
 23feb20:	f7fb f8ba 	bl	23f9c98 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23feb24:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23feb26:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23feb28:	4622      	mov	r2, r4
 23feb2a:	6868      	ldr	r0, [r5, #4]
 23feb2c:	f7fb f8b4 	bl	23f9c98 <network_ready>
        bool ok = false;
 23feb30:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23feb32:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23feb34:	9e00      	ldr	r6, [sp, #0]
 23feb36:	2e00      	cmp	r6, #0
 23feb38:	d03b      	beq.n	23febb2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23feb3a:	2900      	cmp	r1, #0
 23feb3c:	d139      	bne.n	23febb2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23feb3e:	6873      	ldr	r3, [r6, #4]
 23feb40:	2b02      	cmp	r3, #2
 23feb42:	d003      	beq.n	23feb4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23feb44:	2b0a      	cmp	r3, #10
 23feb46:	d011      	beq.n	23feb6c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23feb48:	69f6      	ldr	r6, [r6, #28]
 23feb4a:	e7f4      	b.n	23feb36 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23feb4c:	f1b8 0f00 	cmp.w	r8, #0
 23feb50:	d0fa      	beq.n	23feb48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23feb52:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23feb54:	a806      	add	r0, sp, #24
 23feb56:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23feb58:	1d3c      	adds	r4, r7, #4
 23feb5a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23feb5c:	f7ff fc0c 	bl	23fe378 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23feb60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23feb62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23feb64:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23feb66:	4641      	mov	r1, r8
 23feb68:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23feb6a:	e7ed      	b.n	23feb48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23feb6c:	f1b9 0f00 	cmp.w	r9, #0
 23feb70:	d0ea      	beq.n	23feb48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23feb72:	2210      	movs	r2, #16
 23feb74:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23feb76:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23feb78:	f000 fb41 	bl	23ff1fe <memset>
                    a.v = 6;
 23feb7c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23feb7e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23feb80:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23feb84:	f104 0308 	add.w	r3, r4, #8
 23feb88:	3418      	adds	r4, #24
 23feb8a:	462a      	mov	r2, r5
 23feb8c:	6818      	ldr	r0, [r3, #0]
 23feb8e:	6859      	ldr	r1, [r3, #4]
 23feb90:	3308      	adds	r3, #8
 23feb92:	c203      	stmia	r2!, {r0, r1}
 23feb94:	42a3      	cmp	r3, r4
 23feb96:	4615      	mov	r5, r2
 23feb98:	d1f7      	bne.n	23feb8a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23feb9a:	a901      	add	r1, sp, #4
 23feb9c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23feb9e:	1d3c      	adds	r4, r7, #4
 23feba0:	ad07      	add	r5, sp, #28
 23feba2:	f7ff fbc9 	bl	23fe338 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23feba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23feba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23febaa:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23febac:	4649      	mov	r1, r9
 23febae:	7023      	strb	r3, [r4, #0]
                    break;
 23febb0:	e7ca      	b.n	23feb48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23febb2:	9800      	ldr	r0, [sp, #0]
 23febb4:	f7fa fc72 	bl	23f949c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23febb8:	4638      	mov	r0, r7
 23febba:	b015      	add	sp, #84	; 0x54
 23febbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023febc0 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23febc0:	3803      	subs	r0, #3
 23febc2:	2802      	cmp	r0, #2
 23febc4:	bf9a      	itte	ls
 23febc6:	4b02      	ldrls	r3, [pc, #8]	; (23febd0 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23febc8:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23febcc:	4801      	ldrhi	r0, [pc, #4]	; (23febd4 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23febce:	4770      	bx	lr
 23febd0:	023ffcf4 	.word	0x023ffcf4
 23febd4:	1007aef0 	.word	0x1007aef0

023febd8 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23febd8:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23febda:	2200      	movs	r2, #0
 23febdc:	6840      	ldr	r0, [r0, #4]
 23febde:	f7fb f8d9 	bl	23f9d94 <network_prefer>
}
 23febe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23febe6:	f7ff bfeb 	b.w	23febc0 <_ZN5spark12NetworkClass4fromEm>
	...

023febec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23febec:	4b02      	ldr	r3, [pc, #8]	; (23febf8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23febee:	4a03      	ldr	r2, [pc, #12]	; (23febfc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23febf0:	601a      	str	r2, [r3, #0]
 23febf2:	2200      	movs	r2, #0
 23febf4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23febf6:	4770      	bx	lr
 23febf8:	1007aef0 	.word	0x1007aef0
 23febfc:	023ffd08 	.word	0x023ffd08

023fec00 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fec00:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fec02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fec04:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fec06:	d902      	bls.n	23fec0e <pinAvailable+0xe>
    return false;
 23fec08:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fec0a:	b003      	add	sp, #12
 23fec0c:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fec0e:	f1a0 030f 	sub.w	r3, r0, #15
 23fec12:	2b02      	cmp	r3, #2
 23fec14:	d90b      	bls.n	23fec2e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fec16:	2801      	cmp	r0, #1
 23fec18:	d821      	bhi.n	23fec5e <pinAvailable+0x5e>
 23fec1a:	f000 f96d 	bl	23feef8 <_Z19__fetch_global_Wirev>
 23fec1e:	2100      	movs	r1, #0
 23fec20:	7c00      	ldrb	r0, [r0, #16]
 23fec22:	f7fa fecd 	bl	23f99c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fec26:	f080 0001 	eor.w	r0, r0, #1
 23fec2a:	b2c0      	uxtb	r0, r0
 23fec2c:	e7ed      	b.n	23fec0a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fec2e:	4d11      	ldr	r5, [pc, #68]	; (23fec74 <pinAvailable+0x74>)
 23fec30:	e8d5 1f8f 	ldab	r1, [r5]
 23fec34:	f011 0101 	ands.w	r1, r1, #1
 23fec38:	d10b      	bne.n	23fec52 <pinAvailable+0x52>
 23fec3a:	4628      	mov	r0, r5
 23fec3c:	9101      	str	r1, [sp, #4]
 23fec3e:	f7f9 ff59 	bl	23f8af4 <__cxa_guard_acquire>
 23fec42:	9901      	ldr	r1, [sp, #4]
 23fec44:	b128      	cbz	r0, 23fec52 <pinAvailable+0x52>
 23fec46:	480c      	ldr	r0, [pc, #48]	; (23fec78 <pinAvailable+0x78>)
 23fec48:	f7fb f9d9 	bl	23f9ffe <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fec4c:	4628      	mov	r0, r5
 23fec4e:	f7f9 ff56 	bl	23f8afe <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fec52:	4b09      	ldr	r3, [pc, #36]	; (23fec78 <pinAvailable+0x78>)
 23fec54:	7818      	ldrb	r0, [r3, #0]
 23fec56:	f7fa fedd 	bl	23f9a14 <hal_spi_is_enabled>
 23fec5a:	2800      	cmp	r0, #0
 23fec5c:	d1d4      	bne.n	23fec08 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fec5e:	3c08      	subs	r4, #8
 23fec60:	2c01      	cmp	r4, #1
 23fec62:	d805      	bhi.n	23fec70 <pinAvailable+0x70>
 23fec64:	f000 f89c 	bl	23feda0 <_Z22__fetch_global_Serial1v>
 23fec68:	7c00      	ldrb	r0, [r0, #16]
 23fec6a:	f7fa fe2b 	bl	23f98c4 <hal_usart_is_enabled>
 23fec6e:	e7da      	b.n	23fec26 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fec70:	2001      	movs	r0, #1
 23fec72:	e7ca      	b.n	23fec0a <pinAvailable+0xa>
 23fec74:	1007aef8 	.word	0x1007aef8
 23fec78:	1007aefc 	.word	0x1007aefc

023fec7c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fec7c:	281b      	cmp	r0, #27
{
 23fec7e:	b538      	push	{r3, r4, r5, lr}
 23fec80:	4604      	mov	r4, r0
 23fec82:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fec84:	d80a      	bhi.n	23fec9c <pinMode+0x20>
 23fec86:	29ff      	cmp	r1, #255	; 0xff
 23fec88:	d008      	beq.n	23fec9c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fec8a:	f7ff ffb9 	bl	23fec00 <pinAvailable>
 23fec8e:	b128      	cbz	r0, 23fec9c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fec90:	4629      	mov	r1, r5
 23fec92:	4620      	mov	r0, r4
}
 23fec94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fec98:	f7fa bc2a 	b.w	23f94f0 <hal_gpio_mode>
}
 23fec9c:	bd38      	pop	{r3, r4, r5, pc}

023fec9e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fec9e:	b538      	push	{r3, r4, r5, lr}
 23feca0:	4604      	mov	r4, r0
 23feca2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23feca4:	f7fa fc32 	bl	23f950c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23feca8:	28ff      	cmp	r0, #255	; 0xff
 23fecaa:	d010      	beq.n	23fecce <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fecac:	2806      	cmp	r0, #6
 23fecae:	d804      	bhi.n	23fecba <digitalWrite+0x1c>
 23fecb0:	234d      	movs	r3, #77	; 0x4d
 23fecb2:	fa23 f000 	lsr.w	r0, r3, r0
 23fecb6:	07c3      	lsls	r3, r0, #31
 23fecb8:	d409      	bmi.n	23fecce <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fecba:	4620      	mov	r0, r4
 23fecbc:	f7ff ffa0 	bl	23fec00 <pinAvailable>
 23fecc0:	b128      	cbz	r0, 23fecce <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fecc2:	4629      	mov	r1, r5
 23fecc4:	4620      	mov	r0, r4
}
 23fecc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fecca:	f7fa bc2d 	b.w	23f9528 <hal_gpio_write>
}
 23fecce:	bd38      	pop	{r3, r4, r5, pc}

023fecd0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23fecd0:	b510      	push	{r4, lr}
 23fecd2:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23fecd4:	f7fa fc1a 	bl	23f950c <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23fecd8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23fecda:	b2db      	uxtb	r3, r3
 23fecdc:	2b01      	cmp	r3, #1
 23fecde:	d908      	bls.n	23fecf2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23fece0:	4620      	mov	r0, r4
 23fece2:	f7ff ff8d 	bl	23fec00 <pinAvailable>
 23fece6:	b120      	cbz	r0, 23fecf2 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23fece8:	4620      	mov	r0, r4
}
 23fecea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23fecee:	f7fa bc29 	b.w	23f9544 <hal_gpio_read>
}
 23fecf2:	2000      	movs	r0, #0
 23fecf4:	bd10      	pop	{r4, pc}

023fecf6 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
 23fecf6:	b538      	push	{r3, r4, r5, lr}
 23fecf8:	4604      	mov	r4, r0
 23fecfa:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 23fecfc:	f7ff ff80 	bl	23fec00 <pinAvailable>
 23fed00:	b1f0      	cbz	r0, 23fed40 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
 23fed02:	2104      	movs	r1, #4
 23fed04:	4620      	mov	r0, r4
 23fed06:	f7fa fbe5 	bl	23f94d4 <hal_pin_validate_function>
 23fed0a:	2804      	cmp	r0, #4
 23fed0c:	d105      	bne.n	23fed1a <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 23fed0e:	4620      	mov	r0, r4
 23fed10:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 23fed12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 23fed16:	f7fa bc23 	b.w	23f9560 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
 23fed1a:	2102      	movs	r1, #2
 23fed1c:	4620      	mov	r0, r4
 23fed1e:	f7fa fbd9 	bl	23f94d4 <hal_pin_validate_function>
 23fed22:	2802      	cmp	r0, #2
 23fed24:	d10c      	bne.n	23fed40 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
 23fed26:	4620      	mov	r0, r4
 23fed28:	f7fa fbf0 	bl	23f950c <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 23fed2c:	2801      	cmp	r0, #1
 23fed2e:	d001      	beq.n	23fed34 <_Z11analogWritetm+0x3e>
 23fed30:	2804      	cmp	r0, #4
 23fed32:	d105      	bne.n	23fed40 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 23fed34:	4629      	mov	r1, r5
 23fed36:	4620      	mov	r0, r4
}
 23fed38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 23fed3c:	f7fa bc1e 	b.w	23f957c <hal_pwm_write_ext>
}
 23fed40:	bd38      	pop	{r3, r4, r5, pc}

023fed42 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fed42:	4770      	bx	lr

023fed44 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fed44:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fed46:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fed48:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fed4a:	462a      	mov	r2, r5
 23fed4c:	2100      	movs	r1, #0
 23fed4e:	f000 fa56 	bl	23ff1fe <memset>
 23fed52:	8025      	strh	r5, [r4, #0]
 23fed54:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fed56:	4907      	ldr	r1, [pc, #28]	; (23fed74 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fed58:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fed5a:	8125      	strh	r5, [r4, #8]
 23fed5c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fed5e:	f000 f8f1 	bl	23fef44 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fed62:	4904      	ldr	r1, [pc, #16]	; (23fed74 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fed64:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fed66:	4628      	mov	r0, r5
 23fed68:	f000 f8ec 	bl	23fef44 <_ZnajRKSt9nothrow_t>
    };
 23fed6c:	60e0      	str	r0, [r4, #12]
}
 23fed6e:	4620      	mov	r0, r4
 23fed70:	bd38      	pop	{r3, r4, r5, pc}
 23fed72:	bf00      	nop
 23fed74:	023ffd44 	.word	0x023ffd44

023fed78 <__tcf_2>:
 23fed78:	4770      	bx	lr

023fed7a <__tcf_1>:
 23fed7a:	4770      	bx	lr

023fed7c <_Z20acquireSerial1Bufferv>:
{
 23fed7c:	b510      	push	{r4, lr}
 23fed7e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fed80:	f7ff ffe0 	bl	23fed44 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fed84:	4620      	mov	r0, r4
 23fed86:	bd10      	pop	{r4, pc}

023fed88 <_Z20acquireSerial2Bufferv>:
 23fed88:	b510      	push	{r4, lr}
 23fed8a:	4604      	mov	r4, r0
 23fed8c:	f7ff ffda 	bl	23fed44 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fed90:	4620      	mov	r0, r4
 23fed92:	bd10      	pop	{r4, pc}

023fed94 <_Z20acquireSerial3Bufferv>:
 23fed94:	b510      	push	{r4, lr}
 23fed96:	4604      	mov	r4, r0
 23fed98:	f7ff ffd4 	bl	23fed44 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fed9c:	4620      	mov	r0, r4
 23fed9e:	bd10      	pop	{r4, pc}

023feda0 <_Z22__fetch_global_Serial1v>:
{
 23feda0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23feda2:	4d0e      	ldr	r5, [pc, #56]	; (23feddc <_Z22__fetch_global_Serial1v+0x3c>)
{
 23feda4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23feda6:	e8d5 1f8f 	ldab	r1, [r5]
 23fedaa:	f011 0401 	ands.w	r4, r1, #1
 23fedae:	d111      	bne.n	23fedd4 <_Z22__fetch_global_Serial1v+0x34>
 23fedb0:	4628      	mov	r0, r5
 23fedb2:	f7f9 fe9f 	bl	23f8af4 <__cxa_guard_acquire>
 23fedb6:	b168      	cbz	r0, 23fedd4 <_Z22__fetch_global_Serial1v+0x34>
 23fedb8:	a801      	add	r0, sp, #4
 23fedba:	f7ff ffdf 	bl	23fed7c <_Z20acquireSerial1Bufferv>
 23fedbe:	4621      	mov	r1, r4
 23fedc0:	aa01      	add	r2, sp, #4
 23fedc2:	4807      	ldr	r0, [pc, #28]	; (23fede0 <_Z22__fetch_global_Serial1v+0x40>)
 23fedc4:	f7ff fd84 	bl	23fe8d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fedc8:	4628      	mov	r0, r5
 23fedca:	f7f9 fe98 	bl	23f8afe <__cxa_guard_release>
 23fedce:	4805      	ldr	r0, [pc, #20]	; (23fede4 <_Z22__fetch_global_Serial1v+0x44>)
 23fedd0:	f000 f9d0 	bl	23ff174 <atexit>
    return serial1;
}
 23fedd4:	4802      	ldr	r0, [pc, #8]	; (23fede0 <_Z22__fetch_global_Serial1v+0x40>)
 23fedd6:	b007      	add	sp, #28
 23fedd8:	bd30      	pop	{r4, r5, pc}
 23fedda:	bf00      	nop
 23feddc:	1007af04 	.word	0x1007af04
 23fede0:	1007af10 	.word	0x1007af10
 23fede4:	023fed43 	.word	0x023fed43

023fede8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fede8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fedea:	4c0d      	ldr	r4, [pc, #52]	; (23fee20 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fedec:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fedee:	e8d4 3f8f 	ldab	r3, [r4]
 23fedf2:	07db      	lsls	r3, r3, #31
 23fedf4:	d411      	bmi.n	23fee1a <_Z22__fetch_global_Serial2v+0x32>
 23fedf6:	4620      	mov	r0, r4
 23fedf8:	f7f9 fe7c 	bl	23f8af4 <__cxa_guard_acquire>
 23fedfc:	b168      	cbz	r0, 23fee1a <_Z22__fetch_global_Serial2v+0x32>
 23fedfe:	a801      	add	r0, sp, #4
 23fee00:	f7ff ffc2 	bl	23fed88 <_Z20acquireSerial2Bufferv>
 23fee04:	2101      	movs	r1, #1
 23fee06:	aa01      	add	r2, sp, #4
 23fee08:	4806      	ldr	r0, [pc, #24]	; (23fee24 <_Z22__fetch_global_Serial2v+0x3c>)
 23fee0a:	f7ff fd61 	bl	23fe8d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fee0e:	4620      	mov	r0, r4
 23fee10:	f7f9 fe75 	bl	23f8afe <__cxa_guard_release>
 23fee14:	4804      	ldr	r0, [pc, #16]	; (23fee28 <_Z22__fetch_global_Serial2v+0x40>)
 23fee16:	f000 f9ad 	bl	23ff174 <atexit>
	return serial2;
}
 23fee1a:	4802      	ldr	r0, [pc, #8]	; (23fee24 <_Z22__fetch_global_Serial2v+0x3c>)
 23fee1c:	b006      	add	sp, #24
 23fee1e:	bd10      	pop	{r4, pc}
 23fee20:	1007af08 	.word	0x1007af08
 23fee24:	1007af24 	.word	0x1007af24
 23fee28:	023fed7b 	.word	0x023fed7b

023fee2c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fee2c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fee2e:	f7ff ffdb 	bl	23fede8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fee32:	4b07      	ldr	r3, [pc, #28]	; (23fee50 <_Z15serialEventRun2v+0x24>)
 23fee34:	4604      	mov	r4, r0
 23fee36:	b153      	cbz	r3, 23fee4e <_Z15serialEventRun2v+0x22>
 23fee38:	f7ff fd68 	bl	23fe90c <_ZN11USARTSerial9isEnabledEv>
 23fee3c:	b138      	cbz	r0, 23fee4e <_Z15serialEventRun2v+0x22>
 23fee3e:	6823      	ldr	r3, [r4, #0]
 23fee40:	4620      	mov	r0, r4
 23fee42:	691b      	ldr	r3, [r3, #16]
 23fee44:	4798      	blx	r3
 23fee46:	2800      	cmp	r0, #0
 23fee48:	dd01      	ble.n	23fee4e <_Z15serialEventRun2v+0x22>
        handler();
 23fee4a:	e000      	b.n	23fee4e <_Z15serialEventRun2v+0x22>
 23fee4c:	bf00      	nop
}
 23fee4e:	bd10      	pop	{r4, pc}
 23fee50:	00000000 	.word	0x00000000

023fee54 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fee54:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fee56:	4c0d      	ldr	r4, [pc, #52]	; (23fee8c <_Z22__fetch_global_Serial3v+0x38>)
{
 23fee58:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fee5a:	e8d4 3f8f 	ldab	r3, [r4]
 23fee5e:	07db      	lsls	r3, r3, #31
 23fee60:	d411      	bmi.n	23fee86 <_Z22__fetch_global_Serial3v+0x32>
 23fee62:	4620      	mov	r0, r4
 23fee64:	f7f9 fe46 	bl	23f8af4 <__cxa_guard_acquire>
 23fee68:	b168      	cbz	r0, 23fee86 <_Z22__fetch_global_Serial3v+0x32>
 23fee6a:	a801      	add	r0, sp, #4
 23fee6c:	f7ff ff92 	bl	23fed94 <_Z20acquireSerial3Bufferv>
 23fee70:	2102      	movs	r1, #2
 23fee72:	aa01      	add	r2, sp, #4
 23fee74:	4806      	ldr	r0, [pc, #24]	; (23fee90 <_Z22__fetch_global_Serial3v+0x3c>)
 23fee76:	f7ff fd2b 	bl	23fe8d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fee7a:	4620      	mov	r0, r4
 23fee7c:	f7f9 fe3f 	bl	23f8afe <__cxa_guard_release>
 23fee80:	4804      	ldr	r0, [pc, #16]	; (23fee94 <_Z22__fetch_global_Serial3v+0x40>)
 23fee82:	f000 f977 	bl	23ff174 <atexit>
	return serial3;
}
 23fee86:	4802      	ldr	r0, [pc, #8]	; (23fee90 <_Z22__fetch_global_Serial3v+0x3c>)
 23fee88:	b006      	add	sp, #24
 23fee8a:	bd10      	pop	{r4, pc}
 23fee8c:	1007af0c 	.word	0x1007af0c
 23fee90:	1007af38 	.word	0x1007af38
 23fee94:	023fed79 	.word	0x023fed79

023fee98 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fee98:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fee9a:	f7ff ffdb 	bl	23fee54 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fee9e:	4b07      	ldr	r3, [pc, #28]	; (23feebc <_Z15serialEventRun3v+0x24>)
 23feea0:	4604      	mov	r4, r0
 23feea2:	b153      	cbz	r3, 23feeba <_Z15serialEventRun3v+0x22>
 23feea4:	f7ff fd32 	bl	23fe90c <_ZN11USARTSerial9isEnabledEv>
 23feea8:	b138      	cbz	r0, 23feeba <_Z15serialEventRun3v+0x22>
 23feeaa:	6823      	ldr	r3, [r4, #0]
 23feeac:	4620      	mov	r0, r4
 23feeae:	691b      	ldr	r3, [r3, #16]
 23feeb0:	4798      	blx	r3
 23feeb2:	2800      	cmp	r0, #0
 23feeb4:	dd01      	ble.n	23feeba <_Z15serialEventRun3v+0x22>
        handler();
 23feeb6:	e000      	b.n	23feeba <_Z15serialEventRun3v+0x22>
 23feeb8:	bf00      	nop
}
 23feeba:	bd10      	pop	{r4, pc}
 23feebc:	00000000 	.word	0x00000000

023feec0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23feec0:	4770      	bx	lr
	...

023feec4 <_Z17acquireWireBufferv>:
{
 23feec4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23feec6:	4b0a      	ldr	r3, [pc, #40]	; (23feef0 <_Z17acquireWireBufferv+0x2c>)
{
 23feec8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23feeca:	6003      	str	r3, [r0, #0]
 23feecc:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23feece:	4909      	ldr	r1, [pc, #36]	; (23feef4 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23feed0:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23feed2:	2020      	movs	r0, #32
 23feed4:	f000 f836 	bl	23fef44 <_ZnajRKSt9nothrow_t>
	};
 23feed8:	2520      	movs	r5, #32
 23feeda:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23feedc:	4905      	ldr	r1, [pc, #20]	; (23feef4 <_Z17acquireWireBufferv+0x30>)
 23feede:	4628      	mov	r0, r5
	};
 23feee0:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23feee2:	f000 f82f 	bl	23fef44 <_ZnajRKSt9nothrow_t>
	};
 23feee6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23feeea:	4620      	mov	r0, r4
 23feeec:	bd38      	pop	{r3, r4, r5, pc}
 23feeee:	bf00      	nop
 23feef0:	00010018 	.word	0x00010018
 23feef4:	023ffd44 	.word	0x023ffd44

023feef8 <_Z19__fetch_global_Wirev>:
{
 23feef8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23feefa:	4d0e      	ldr	r5, [pc, #56]	; (23fef34 <_Z19__fetch_global_Wirev+0x3c>)
{
 23feefc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23feefe:	e8d5 1f8f 	ldab	r1, [r5]
 23fef02:	f011 0401 	ands.w	r4, r1, #1
 23fef06:	d111      	bne.n	23fef2c <_Z19__fetch_global_Wirev+0x34>
 23fef08:	4628      	mov	r0, r5
 23fef0a:	f7f9 fdf3 	bl	23f8af4 <__cxa_guard_acquire>
 23fef0e:	b168      	cbz	r0, 23fef2c <_Z19__fetch_global_Wirev+0x34>
 23fef10:	4668      	mov	r0, sp
 23fef12:	f7ff ffd7 	bl	23feec4 <_Z17acquireWireBufferv>
 23fef16:	466a      	mov	r2, sp
 23fef18:	4621      	mov	r1, r4
 23fef1a:	4807      	ldr	r0, [pc, #28]	; (23fef38 <_Z19__fetch_global_Wirev+0x40>)
 23fef1c:	f7ff fd3a 	bl	23fe994 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fef20:	4628      	mov	r0, r5
 23fef22:	f7f9 fdec 	bl	23f8afe <__cxa_guard_release>
 23fef26:	4805      	ldr	r0, [pc, #20]	; (23fef3c <_Z19__fetch_global_Wirev+0x44>)
 23fef28:	f000 f924 	bl	23ff174 <atexit>
	return wire;
}
 23fef2c:	4802      	ldr	r0, [pc, #8]	; (23fef38 <_Z19__fetch_global_Wirev+0x40>)
 23fef2e:	b007      	add	sp, #28
 23fef30:	bd30      	pop	{r4, r5, pc}
 23fef32:	bf00      	nop
 23fef34:	1007af50 	.word	0x1007af50
 23fef38:	1007af54 	.word	0x1007af54
 23fef3c:	023feec1 	.word	0x023feec1

023fef40 <_ZnwjRKSt9nothrow_t>:
 23fef40:	f7f9 bdc5 	b.w	23f8ace <_Znwj>

023fef44 <_ZnajRKSt9nothrow_t>:
 23fef44:	f7f9 bdc5 	b.w	23f8ad2 <_Znaj>

023fef48 <_ZSt25__throw_bad_function_callv>:
 23fef48:	b508      	push	{r3, lr}
 23fef4a:	f7fa ffcb 	bl	23f9ee4 <abort>
	...

023fef50 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fef50:	4901      	ldr	r1, [pc, #4]	; (23fef58 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fef52:	f000 b8f9 	b.w	23ff148 <_ZNKSt9type_infoeqERKS_>
 23fef56:	bf00      	nop
 23fef58:	023ffd60 	.word	0x023ffd60

023fef5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fef5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fef5e:	2400      	movs	r4, #0
 23fef60:	2310      	movs	r3, #16
 23fef62:	4615      	mov	r5, r2
 23fef64:	6812      	ldr	r2, [r2, #0]
 23fef66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fef6a:	6803      	ldr	r3, [r0, #0]
 23fef6c:	e9cd 4400 	strd	r4, r4, [sp]
 23fef70:	699e      	ldr	r6, [r3, #24]
 23fef72:	466b      	mov	r3, sp
 23fef74:	47b0      	blx	r6
 23fef76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fef7a:	f003 0306 	and.w	r3, r3, #6
 23fef7e:	2b06      	cmp	r3, #6
 23fef80:	bf05      	ittet	eq
 23fef82:	9b00      	ldreq	r3, [sp, #0]
 23fef84:	2001      	moveq	r0, #1
 23fef86:	4620      	movne	r0, r4
 23fef88:	602b      	streq	r3, [r5, #0]
 23fef8a:	b004      	add	sp, #16
 23fef8c:	bd70      	pop	{r4, r5, r6, pc}

023fef8e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fef8e:	9800      	ldr	r0, [sp, #0]
 23fef90:	4290      	cmp	r0, r2
 23fef92:	bf14      	ite	ne
 23fef94:	2001      	movne	r0, #1
 23fef96:	2006      	moveq	r0, #6
 23fef98:	4770      	bx	lr
	...

023fef9c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fef9c:	4b03      	ldr	r3, [pc, #12]	; (23fefac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fef9e:	b510      	push	{r4, lr}
 23fefa0:	4604      	mov	r4, r0
 23fefa2:	6003      	str	r3, [r0, #0]
 23fefa4:	f000 f8cd 	bl	23ff142 <_ZNSt9type_infoD1Ev>
 23fefa8:	4620      	mov	r0, r4
 23fefaa:	bd10      	pop	{r4, pc}
 23fefac:	023ffda0 	.word	0x023ffda0

023fefb0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fefb0:	b510      	push	{r4, lr}
 23fefb2:	4604      	mov	r4, r0
 23fefb4:	f7ff fff2 	bl	23fef9c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fefb8:	2108      	movs	r1, #8
 23fefba:	4620      	mov	r0, r4
 23fefbc:	f7f9 fd8b 	bl	23f8ad6 <_ZdlPvj>
 23fefc0:	4620      	mov	r0, r4
 23fefc2:	bd10      	pop	{r4, pc}

023fefc4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fefc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fefc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fefcc:	461f      	mov	r7, r3
 23fefce:	4606      	mov	r6, r0
 23fefd0:	4615      	mov	r5, r2
 23fefd2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fefd6:	4598      	cmp	r8, r3
 23fefd8:	d107      	bne.n	23fefea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fefda:	9907      	ldr	r1, [sp, #28]
 23fefdc:	f000 f8b4 	bl	23ff148 <_ZNKSt9type_infoeqERKS_>
 23fefe0:	b118      	cbz	r0, 23fefea <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fefe2:	7165      	strb	r5, [r4, #5]
 23fefe4:	2000      	movs	r0, #0
 23fefe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fefea:	4639      	mov	r1, r7
 23fefec:	4630      	mov	r0, r6
 23fefee:	f000 f8ab 	bl	23ff148 <_ZNKSt9type_infoeqERKS_>
 23feff2:	2800      	cmp	r0, #0
 23feff4:	d0f6      	beq.n	23fefe4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23feff6:	2301      	movs	r3, #1
 23feff8:	f8c4 8000 	str.w	r8, [r4]
 23feffc:	7125      	strb	r5, [r4, #4]
 23feffe:	71a3      	strb	r3, [r4, #6]
 23ff000:	e7f0      	b.n	23fefe4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023ff002 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23ff002:	b538      	push	{r3, r4, r5, lr}
 23ff004:	4615      	mov	r5, r2
 23ff006:	461c      	mov	r4, r3
 23ff008:	f000 f89e 	bl	23ff148 <_ZNKSt9type_infoeqERKS_>
 23ff00c:	b120      	cbz	r0, 23ff018 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23ff00e:	2308      	movs	r3, #8
 23ff010:	6025      	str	r5, [r4, #0]
 23ff012:	60e3      	str	r3, [r4, #12]
 23ff014:	2306      	movs	r3, #6
 23ff016:	7123      	strb	r3, [r4, #4]
 23ff018:	bd38      	pop	{r3, r4, r5, pc}

023ff01a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23ff01a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ff01c:	4605      	mov	r5, r0
 23ff01e:	460c      	mov	r4, r1
 23ff020:	461e      	mov	r6, r3
 23ff022:	9201      	str	r2, [sp, #4]
 23ff024:	f000 f890 	bl	23ff148 <_ZNKSt9type_infoeqERKS_>
 23ff028:	b950      	cbnz	r0, 23ff040 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff02a:	2e03      	cmp	r6, #3
 23ff02c:	d808      	bhi.n	23ff040 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff02e:	6823      	ldr	r3, [r4, #0]
 23ff030:	4629      	mov	r1, r5
 23ff032:	9a01      	ldr	r2, [sp, #4]
 23ff034:	4620      	mov	r0, r4
 23ff036:	695b      	ldr	r3, [r3, #20]
 23ff038:	b002      	add	sp, #8
 23ff03a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23ff03e:	4718      	bx	r3
 23ff040:	b002      	add	sp, #8
 23ff042:	bd70      	pop	{r4, r5, r6, pc}

023ff044 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23ff044:	4b03      	ldr	r3, [pc, #12]	; (23ff054 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23ff046:	b510      	push	{r4, lr}
 23ff048:	4604      	mov	r4, r0
 23ff04a:	6003      	str	r3, [r0, #0]
 23ff04c:	f7ff ffa6 	bl	23fef9c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff050:	4620      	mov	r0, r4
 23ff052:	bd10      	pop	{r4, pc}
 23ff054:	023ffe00 	.word	0x023ffe00

023ff058 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23ff058:	b510      	push	{r4, lr}
 23ff05a:	4604      	mov	r4, r0
 23ff05c:	f7ff fff2 	bl	23ff044 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23ff060:	210c      	movs	r1, #12
 23ff062:	4620      	mov	r0, r4
 23ff064:	f7f9 fd37 	bl	23f8ad6 <_ZdlPvj>
 23ff068:	4620      	mov	r0, r4
 23ff06a:	bd10      	pop	{r4, pc}

023ff06c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23ff06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ff06e:	9f08      	ldr	r7, [sp, #32]
 23ff070:	4605      	mov	r5, r0
 23ff072:	460e      	mov	r6, r1
 23ff074:	4614      	mov	r4, r2
 23ff076:	4297      	cmp	r7, r2
 23ff078:	d00a      	beq.n	23ff090 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23ff07a:	68a8      	ldr	r0, [r5, #8]
 23ff07c:	4631      	mov	r1, r6
 23ff07e:	6802      	ldr	r2, [r0, #0]
 23ff080:	9708      	str	r7, [sp, #32]
 23ff082:	6a15      	ldr	r5, [r2, #32]
 23ff084:	4622      	mov	r2, r4
 23ff086:	46ac      	mov	ip, r5
 23ff088:	b003      	add	sp, #12
 23ff08a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff08e:	4760      	bx	ip
 23ff090:	4619      	mov	r1, r3
 23ff092:	9301      	str	r3, [sp, #4]
 23ff094:	f000 f858 	bl	23ff148 <_ZNKSt9type_infoeqERKS_>
 23ff098:	9b01      	ldr	r3, [sp, #4]
 23ff09a:	2800      	cmp	r0, #0
 23ff09c:	d0ed      	beq.n	23ff07a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23ff09e:	2006      	movs	r0, #6
 23ff0a0:	b003      	add	sp, #12
 23ff0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff0a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23ff0a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff0a8:	460d      	mov	r5, r1
 23ff0aa:	4619      	mov	r1, r3
 23ff0ac:	4681      	mov	r9, r0
 23ff0ae:	4617      	mov	r7, r2
 23ff0b0:	4698      	mov	r8, r3
 23ff0b2:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23ff0b6:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23ff0ba:	f000 f845 	bl	23ff148 <_ZNKSt9type_infoeqERKS_>
 23ff0be:	b190      	cbz	r0, 23ff0e6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23ff0c0:	2d00      	cmp	r5, #0
 23ff0c2:	6034      	str	r4, [r6, #0]
 23ff0c4:	7137      	strb	r7, [r6, #4]
 23ff0c6:	db09      	blt.n	23ff0dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23ff0c8:	1961      	adds	r1, r4, r5
 23ff0ca:	458a      	cmp	sl, r1
 23ff0cc:	bf0c      	ite	eq
 23ff0ce:	2106      	moveq	r1, #6
 23ff0d0:	2101      	movne	r1, #1
 23ff0d2:	71b1      	strb	r1, [r6, #6]
 23ff0d4:	2000      	movs	r0, #0
 23ff0d6:	b001      	add	sp, #4
 23ff0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff0dc:	3502      	adds	r5, #2
 23ff0de:	d1f9      	bne.n	23ff0d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff0e0:	2301      	movs	r3, #1
 23ff0e2:	71b3      	strb	r3, [r6, #6]
 23ff0e4:	e7f6      	b.n	23ff0d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff0e6:	4554      	cmp	r4, sl
 23ff0e8:	d106      	bne.n	23ff0f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff0ea:	4659      	mov	r1, fp
 23ff0ec:	4648      	mov	r0, r9
 23ff0ee:	f000 f82b 	bl	23ff148 <_ZNKSt9type_infoeqERKS_>
 23ff0f2:	b108      	cbz	r0, 23ff0f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff0f4:	7177      	strb	r7, [r6, #5]
 23ff0f6:	e7ed      	b.n	23ff0d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff0f8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23ff0fc:	463a      	mov	r2, r7
 23ff0fe:	4629      	mov	r1, r5
 23ff100:	6803      	ldr	r3, [r0, #0]
 23ff102:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23ff106:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23ff10a:	69dc      	ldr	r4, [r3, #28]
 23ff10c:	4643      	mov	r3, r8
 23ff10e:	46a4      	mov	ip, r4
 23ff110:	b001      	add	sp, #4
 23ff112:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff116:	4760      	bx	ip

023ff118 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23ff118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff11c:	4607      	mov	r7, r0
 23ff11e:	460c      	mov	r4, r1
 23ff120:	4615      	mov	r5, r2
 23ff122:	461e      	mov	r6, r3
 23ff124:	f7ff ff6d 	bl	23ff002 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23ff128:	b948      	cbnz	r0, 23ff13e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23ff12a:	68b8      	ldr	r0, [r7, #8]
 23ff12c:	462a      	mov	r2, r5
 23ff12e:	4621      	mov	r1, r4
 23ff130:	6803      	ldr	r3, [r0, #0]
 23ff132:	699f      	ldr	r7, [r3, #24]
 23ff134:	4633      	mov	r3, r6
 23ff136:	46bc      	mov	ip, r7
 23ff138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23ff13c:	4760      	bx	ip
 23ff13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff142 <_ZNSt9type_infoD1Ev>:
 23ff142:	4770      	bx	lr

023ff144 <_ZNKSt9type_info14__is_pointer_pEv>:
 23ff144:	2000      	movs	r0, #0
 23ff146:	4770      	bx	lr

023ff148 <_ZNKSt9type_infoeqERKS_>:
 23ff148:	4281      	cmp	r1, r0
 23ff14a:	b508      	push	{r3, lr}
 23ff14c:	d00e      	beq.n	23ff16c <_ZNKSt9type_infoeqERKS_+0x24>
 23ff14e:	6840      	ldr	r0, [r0, #4]
 23ff150:	7803      	ldrb	r3, [r0, #0]
 23ff152:	2b2a      	cmp	r3, #42	; 0x2a
 23ff154:	d00c      	beq.n	23ff170 <_ZNKSt9type_infoeqERKS_+0x28>
 23ff156:	6849      	ldr	r1, [r1, #4]
 23ff158:	780b      	ldrb	r3, [r1, #0]
 23ff15a:	2b2a      	cmp	r3, #42	; 0x2a
 23ff15c:	bf08      	it	eq
 23ff15e:	3101      	addeq	r1, #1
 23ff160:	f7f9 fc86 	bl	23f8a70 <strcmp>
 23ff164:	fab0 f080 	clz	r0, r0
 23ff168:	0940      	lsrs	r0, r0, #5
 23ff16a:	bd08      	pop	{r3, pc}
 23ff16c:	2001      	movs	r0, #1
 23ff16e:	e7fc      	b.n	23ff16a <_ZNKSt9type_infoeqERKS_+0x22>
 23ff170:	2000      	movs	r0, #0
 23ff172:	e7fa      	b.n	23ff16a <_ZNKSt9type_infoeqERKS_+0x22>

023ff174 <atexit>:
 23ff174:	2300      	movs	r3, #0
 23ff176:	4601      	mov	r1, r0
 23ff178:	461a      	mov	r2, r3
 23ff17a:	4618      	mov	r0, r3
 23ff17c:	f000 b974 	b.w	23ff468 <__register_exitproc>

023ff180 <isprint>:
 23ff180:	4b02      	ldr	r3, [pc, #8]	; (23ff18c <isprint+0xc>)
 23ff182:	4418      	add	r0, r3
 23ff184:	7840      	ldrb	r0, [r0, #1]
 23ff186:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff18a:	4770      	bx	lr
 23ff18c:	023ffecd 	.word	0x023ffecd

023ff190 <memcmp>:
 23ff190:	3901      	subs	r1, #1
 23ff192:	4402      	add	r2, r0
 23ff194:	b510      	push	{r4, lr}
 23ff196:	4290      	cmp	r0, r2
 23ff198:	d101      	bne.n	23ff19e <memcmp+0xe>
 23ff19a:	2000      	movs	r0, #0
 23ff19c:	e005      	b.n	23ff1aa <memcmp+0x1a>
 23ff19e:	7803      	ldrb	r3, [r0, #0]
 23ff1a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23ff1a4:	42a3      	cmp	r3, r4
 23ff1a6:	d001      	beq.n	23ff1ac <memcmp+0x1c>
 23ff1a8:	1b18      	subs	r0, r3, r4
 23ff1aa:	bd10      	pop	{r4, pc}
 23ff1ac:	3001      	adds	r0, #1
 23ff1ae:	e7f2      	b.n	23ff196 <memcmp+0x6>

023ff1b0 <memcpy>:
 23ff1b0:	440a      	add	r2, r1
 23ff1b2:	1e43      	subs	r3, r0, #1
 23ff1b4:	4291      	cmp	r1, r2
 23ff1b6:	d100      	bne.n	23ff1ba <memcpy+0xa>
 23ff1b8:	4770      	bx	lr
 23ff1ba:	b510      	push	{r4, lr}
 23ff1bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff1c0:	4291      	cmp	r1, r2
 23ff1c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff1c6:	d1f9      	bne.n	23ff1bc <memcpy+0xc>
 23ff1c8:	bd10      	pop	{r4, pc}

023ff1ca <memmove>:
 23ff1ca:	4288      	cmp	r0, r1
 23ff1cc:	b510      	push	{r4, lr}
 23ff1ce:	eb01 0402 	add.w	r4, r1, r2
 23ff1d2:	d902      	bls.n	23ff1da <memmove+0x10>
 23ff1d4:	4284      	cmp	r4, r0
 23ff1d6:	4623      	mov	r3, r4
 23ff1d8:	d807      	bhi.n	23ff1ea <memmove+0x20>
 23ff1da:	1e43      	subs	r3, r0, #1
 23ff1dc:	42a1      	cmp	r1, r4
 23ff1de:	d008      	beq.n	23ff1f2 <memmove+0x28>
 23ff1e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff1e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff1e8:	e7f8      	b.n	23ff1dc <memmove+0x12>
 23ff1ea:	4402      	add	r2, r0
 23ff1ec:	4601      	mov	r1, r0
 23ff1ee:	428a      	cmp	r2, r1
 23ff1f0:	d100      	bne.n	23ff1f4 <memmove+0x2a>
 23ff1f2:	bd10      	pop	{r4, pc}
 23ff1f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff1f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff1fc:	e7f7      	b.n	23ff1ee <memmove+0x24>

023ff1fe <memset>:
 23ff1fe:	4402      	add	r2, r0
 23ff200:	4603      	mov	r3, r0
 23ff202:	4293      	cmp	r3, r2
 23ff204:	d100      	bne.n	23ff208 <memset+0xa>
 23ff206:	4770      	bx	lr
 23ff208:	f803 1b01 	strb.w	r1, [r3], #1
 23ff20c:	e7f9      	b.n	23ff202 <memset+0x4>
	...

023ff210 <srand>:
 23ff210:	b538      	push	{r3, r4, r5, lr}
 23ff212:	4b10      	ldr	r3, [pc, #64]	; (23ff254 <srand+0x44>)
 23ff214:	4604      	mov	r4, r0
 23ff216:	681d      	ldr	r5, [r3, #0]
 23ff218:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff21a:	b9b3      	cbnz	r3, 23ff24a <srand+0x3a>
 23ff21c:	2018      	movs	r0, #24
 23ff21e:	f7fa fe29 	bl	23f9e74 <malloc>
 23ff222:	4602      	mov	r2, r0
 23ff224:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff226:	b920      	cbnz	r0, 23ff232 <srand+0x22>
 23ff228:	4b0b      	ldr	r3, [pc, #44]	; (23ff258 <srand+0x48>)
 23ff22a:	2142      	movs	r1, #66	; 0x42
 23ff22c:	480b      	ldr	r0, [pc, #44]	; (23ff25c <srand+0x4c>)
 23ff22e:	f7fa fe83 	bl	23f9f38 <__assert_func>
 23ff232:	490b      	ldr	r1, [pc, #44]	; (23ff260 <srand+0x50>)
 23ff234:	4b0b      	ldr	r3, [pc, #44]	; (23ff264 <srand+0x54>)
 23ff236:	e9c0 1300 	strd	r1, r3, [r0]
 23ff23a:	4b0b      	ldr	r3, [pc, #44]	; (23ff268 <srand+0x58>)
 23ff23c:	2100      	movs	r1, #0
 23ff23e:	6083      	str	r3, [r0, #8]
 23ff240:	230b      	movs	r3, #11
 23ff242:	8183      	strh	r3, [r0, #12]
 23ff244:	2001      	movs	r0, #1
 23ff246:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff24a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff24c:	2200      	movs	r2, #0
 23ff24e:	611c      	str	r4, [r3, #16]
 23ff250:	615a      	str	r2, [r3, #20]
 23ff252:	bd38      	pop	{r3, r4, r5, pc}
 23ff254:	1007a89c 	.word	0x1007a89c
 23ff258:	023ffe39 	.word	0x023ffe39
 23ff25c:	023ffe50 	.word	0x023ffe50
 23ff260:	abcd330e 	.word	0xabcd330e
 23ff264:	e66d1234 	.word	0xe66d1234
 23ff268:	0005deec 	.word	0x0005deec

023ff26c <strchr>:
 23ff26c:	b2c9      	uxtb	r1, r1
 23ff26e:	4603      	mov	r3, r0
 23ff270:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff274:	b11a      	cbz	r2, 23ff27e <strchr+0x12>
 23ff276:	428a      	cmp	r2, r1
 23ff278:	d1f9      	bne.n	23ff26e <strchr+0x2>
 23ff27a:	4618      	mov	r0, r3
 23ff27c:	4770      	bx	lr
 23ff27e:	2900      	cmp	r1, #0
 23ff280:	bf18      	it	ne
 23ff282:	2300      	movne	r3, #0
 23ff284:	e7f9      	b.n	23ff27a <strchr+0xe>

023ff286 <strchrnul>:
 23ff286:	b510      	push	{r4, lr}
 23ff288:	4604      	mov	r4, r0
 23ff28a:	f7ff ffef 	bl	23ff26c <strchr>
 23ff28e:	b918      	cbnz	r0, 23ff298 <strchrnul+0x12>
 23ff290:	4620      	mov	r0, r4
 23ff292:	f7f9 fbf7 	bl	23f8a84 <strlen>
 23ff296:	4420      	add	r0, r4
 23ff298:	bd10      	pop	{r4, pc}

023ff29a <strcpy>:
 23ff29a:	4603      	mov	r3, r0
 23ff29c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff2a0:	f803 2b01 	strb.w	r2, [r3], #1
 23ff2a4:	2a00      	cmp	r2, #0
 23ff2a6:	d1f9      	bne.n	23ff29c <strcpy+0x2>
 23ff2a8:	4770      	bx	lr
	...

023ff2ac <strdup>:
 23ff2ac:	4b02      	ldr	r3, [pc, #8]	; (23ff2b8 <strdup+0xc>)
 23ff2ae:	4601      	mov	r1, r0
 23ff2b0:	6818      	ldr	r0, [r3, #0]
 23ff2b2:	f000 b803 	b.w	23ff2bc <_strdup_r>
 23ff2b6:	bf00      	nop
 23ff2b8:	1007a89c 	.word	0x1007a89c

023ff2bc <_strdup_r>:
 23ff2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff2be:	4604      	mov	r4, r0
 23ff2c0:	4608      	mov	r0, r1
 23ff2c2:	460d      	mov	r5, r1
 23ff2c4:	f7f9 fbde 	bl	23f8a84 <strlen>
 23ff2c8:	1c42      	adds	r2, r0, #1
 23ff2ca:	4620      	mov	r0, r4
 23ff2cc:	4611      	mov	r1, r2
 23ff2ce:	9201      	str	r2, [sp, #4]
 23ff2d0:	f7fa fe16 	bl	23f9f00 <_malloc_r>
 23ff2d4:	4604      	mov	r4, r0
 23ff2d6:	b118      	cbz	r0, 23ff2e0 <_strdup_r+0x24>
 23ff2d8:	9a01      	ldr	r2, [sp, #4]
 23ff2da:	4629      	mov	r1, r5
 23ff2dc:	f7ff ff68 	bl	23ff1b0 <memcpy>
 23ff2e0:	4620      	mov	r0, r4
 23ff2e2:	b003      	add	sp, #12
 23ff2e4:	bd30      	pop	{r4, r5, pc}

023ff2e6 <strncmp>:
 23ff2e6:	b510      	push	{r4, lr}
 23ff2e8:	b17a      	cbz	r2, 23ff30a <strncmp+0x24>
 23ff2ea:	4603      	mov	r3, r0
 23ff2ec:	3901      	subs	r1, #1
 23ff2ee:	1884      	adds	r4, r0, r2
 23ff2f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff2f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff2f8:	4290      	cmp	r0, r2
 23ff2fa:	d101      	bne.n	23ff300 <strncmp+0x1a>
 23ff2fc:	42a3      	cmp	r3, r4
 23ff2fe:	d101      	bne.n	23ff304 <strncmp+0x1e>
 23ff300:	1a80      	subs	r0, r0, r2
 23ff302:	bd10      	pop	{r4, pc}
 23ff304:	2800      	cmp	r0, #0
 23ff306:	d1f3      	bne.n	23ff2f0 <strncmp+0xa>
 23ff308:	e7fa      	b.n	23ff300 <strncmp+0x1a>
 23ff30a:	4610      	mov	r0, r2
 23ff30c:	e7f9      	b.n	23ff302 <strncmp+0x1c>

023ff30e <strnlen>:
 23ff30e:	4602      	mov	r2, r0
 23ff310:	4401      	add	r1, r0
 23ff312:	b510      	push	{r4, lr}
 23ff314:	428a      	cmp	r2, r1
 23ff316:	4613      	mov	r3, r2
 23ff318:	d003      	beq.n	23ff322 <strnlen+0x14>
 23ff31a:	781c      	ldrb	r4, [r3, #0]
 23ff31c:	3201      	adds	r2, #1
 23ff31e:	2c00      	cmp	r4, #0
 23ff320:	d1f8      	bne.n	23ff314 <strnlen+0x6>
 23ff322:	1a18      	subs	r0, r3, r0
 23ff324:	bd10      	pop	{r4, pc}

023ff326 <strrchr>:
 23ff326:	b538      	push	{r3, r4, r5, lr}
 23ff328:	4603      	mov	r3, r0
 23ff32a:	460c      	mov	r4, r1
 23ff32c:	b969      	cbnz	r1, 23ff34a <strrchr+0x24>
 23ff32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff332:	f7ff bf9b 	b.w	23ff26c <strchr>
 23ff336:	1c43      	adds	r3, r0, #1
 23ff338:	4605      	mov	r5, r0
 23ff33a:	4621      	mov	r1, r4
 23ff33c:	4618      	mov	r0, r3
 23ff33e:	f7ff ff95 	bl	23ff26c <strchr>
 23ff342:	2800      	cmp	r0, #0
 23ff344:	d1f7      	bne.n	23ff336 <strrchr+0x10>
 23ff346:	4628      	mov	r0, r5
 23ff348:	bd38      	pop	{r3, r4, r5, pc}
 23ff34a:	2500      	movs	r5, #0
 23ff34c:	e7f5      	b.n	23ff33a <strrchr+0x14>
	...

023ff350 <_strtol_l.constprop.0>:
 23ff350:	2b01      	cmp	r3, #1
 23ff352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff356:	d001      	beq.n	23ff35c <_strtol_l.constprop.0+0xc>
 23ff358:	2b24      	cmp	r3, #36	; 0x24
 23ff35a:	d906      	bls.n	23ff36a <_strtol_l.constprop.0+0x1a>
 23ff35c:	f7fa fdde 	bl	23f9f1c <__errno>
 23ff360:	2316      	movs	r3, #22
 23ff362:	6003      	str	r3, [r0, #0]
 23ff364:	2000      	movs	r0, #0
 23ff366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff36a:	460d      	mov	r5, r1
 23ff36c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff450 <_strtol_l.constprop.0+0x100>
 23ff370:	462e      	mov	r6, r5
 23ff372:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff376:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff37a:	f017 0708 	ands.w	r7, r7, #8
 23ff37e:	d1f7      	bne.n	23ff370 <_strtol_l.constprop.0+0x20>
 23ff380:	2c2d      	cmp	r4, #45	; 0x2d
 23ff382:	d132      	bne.n	23ff3ea <_strtol_l.constprop.0+0x9a>
 23ff384:	782c      	ldrb	r4, [r5, #0]
 23ff386:	2701      	movs	r7, #1
 23ff388:	1cb5      	adds	r5, r6, #2
 23ff38a:	2b00      	cmp	r3, #0
 23ff38c:	d05b      	beq.n	23ff446 <_strtol_l.constprop.0+0xf6>
 23ff38e:	2b10      	cmp	r3, #16
 23ff390:	d109      	bne.n	23ff3a6 <_strtol_l.constprop.0+0x56>
 23ff392:	2c30      	cmp	r4, #48	; 0x30
 23ff394:	d107      	bne.n	23ff3a6 <_strtol_l.constprop.0+0x56>
 23ff396:	782c      	ldrb	r4, [r5, #0]
 23ff398:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff39c:	2c58      	cmp	r4, #88	; 0x58
 23ff39e:	d14d      	bne.n	23ff43c <_strtol_l.constprop.0+0xec>
 23ff3a0:	786c      	ldrb	r4, [r5, #1]
 23ff3a2:	2310      	movs	r3, #16
 23ff3a4:	3502      	adds	r5, #2
 23ff3a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff3aa:	f04f 0c00 	mov.w	ip, #0
 23ff3ae:	f108 38ff 	add.w	r8, r8, #4294967295
 23ff3b2:	4666      	mov	r6, ip
 23ff3b4:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff3b8:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff3bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff3c0:	f1be 0f09 	cmp.w	lr, #9
 23ff3c4:	d816      	bhi.n	23ff3f4 <_strtol_l.constprop.0+0xa4>
 23ff3c6:	4674      	mov	r4, lr
 23ff3c8:	42a3      	cmp	r3, r4
 23ff3ca:	dd24      	ble.n	23ff416 <_strtol_l.constprop.0+0xc6>
 23ff3cc:	f1bc 0f00 	cmp.w	ip, #0
 23ff3d0:	db1e      	blt.n	23ff410 <_strtol_l.constprop.0+0xc0>
 23ff3d2:	45b1      	cmp	r9, r6
 23ff3d4:	d31c      	bcc.n	23ff410 <_strtol_l.constprop.0+0xc0>
 23ff3d6:	d101      	bne.n	23ff3dc <_strtol_l.constprop.0+0x8c>
 23ff3d8:	45a2      	cmp	sl, r4
 23ff3da:	db19      	blt.n	23ff410 <_strtol_l.constprop.0+0xc0>
 23ff3dc:	fb06 4603 	mla	r6, r6, r3, r4
 23ff3e0:	f04f 0c01 	mov.w	ip, #1
 23ff3e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff3e8:	e7e8      	b.n	23ff3bc <_strtol_l.constprop.0+0x6c>
 23ff3ea:	2c2b      	cmp	r4, #43	; 0x2b
 23ff3ec:	bf04      	itt	eq
 23ff3ee:	782c      	ldrbeq	r4, [r5, #0]
 23ff3f0:	1cb5      	addeq	r5, r6, #2
 23ff3f2:	e7ca      	b.n	23ff38a <_strtol_l.constprop.0+0x3a>
 23ff3f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff3f8:	f1be 0f19 	cmp.w	lr, #25
 23ff3fc:	d801      	bhi.n	23ff402 <_strtol_l.constprop.0+0xb2>
 23ff3fe:	3c37      	subs	r4, #55	; 0x37
 23ff400:	e7e2      	b.n	23ff3c8 <_strtol_l.constprop.0+0x78>
 23ff402:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff406:	f1be 0f19 	cmp.w	lr, #25
 23ff40a:	d804      	bhi.n	23ff416 <_strtol_l.constprop.0+0xc6>
 23ff40c:	3c57      	subs	r4, #87	; 0x57
 23ff40e:	e7db      	b.n	23ff3c8 <_strtol_l.constprop.0+0x78>
 23ff410:	f04f 3cff 	mov.w	ip, #4294967295
 23ff414:	e7e6      	b.n	23ff3e4 <_strtol_l.constprop.0+0x94>
 23ff416:	f1bc 0f00 	cmp.w	ip, #0
 23ff41a:	da05      	bge.n	23ff428 <_strtol_l.constprop.0+0xd8>
 23ff41c:	2322      	movs	r3, #34	; 0x22
 23ff41e:	4646      	mov	r6, r8
 23ff420:	6003      	str	r3, [r0, #0]
 23ff422:	b942      	cbnz	r2, 23ff436 <_strtol_l.constprop.0+0xe6>
 23ff424:	4630      	mov	r0, r6
 23ff426:	e79e      	b.n	23ff366 <_strtol_l.constprop.0+0x16>
 23ff428:	b107      	cbz	r7, 23ff42c <_strtol_l.constprop.0+0xdc>
 23ff42a:	4276      	negs	r6, r6
 23ff42c:	2a00      	cmp	r2, #0
 23ff42e:	d0f9      	beq.n	23ff424 <_strtol_l.constprop.0+0xd4>
 23ff430:	f1bc 0f00 	cmp.w	ip, #0
 23ff434:	d000      	beq.n	23ff438 <_strtol_l.constprop.0+0xe8>
 23ff436:	1e69      	subs	r1, r5, #1
 23ff438:	6011      	str	r1, [r2, #0]
 23ff43a:	e7f3      	b.n	23ff424 <_strtol_l.constprop.0+0xd4>
 23ff43c:	2430      	movs	r4, #48	; 0x30
 23ff43e:	2b00      	cmp	r3, #0
 23ff440:	d1b1      	bne.n	23ff3a6 <_strtol_l.constprop.0+0x56>
 23ff442:	2308      	movs	r3, #8
 23ff444:	e7af      	b.n	23ff3a6 <_strtol_l.constprop.0+0x56>
 23ff446:	2c30      	cmp	r4, #48	; 0x30
 23ff448:	d0a5      	beq.n	23ff396 <_strtol_l.constprop.0+0x46>
 23ff44a:	230a      	movs	r3, #10
 23ff44c:	e7ab      	b.n	23ff3a6 <_strtol_l.constprop.0+0x56>
 23ff44e:	bf00      	nop
 23ff450:	023ffece 	.word	0x023ffece

023ff454 <strtol>:
 23ff454:	4613      	mov	r3, r2
 23ff456:	460a      	mov	r2, r1
 23ff458:	4601      	mov	r1, r0
 23ff45a:	4802      	ldr	r0, [pc, #8]	; (23ff464 <strtol+0x10>)
 23ff45c:	6800      	ldr	r0, [r0, #0]
 23ff45e:	f7ff bf77 	b.w	23ff350 <_strtol_l.constprop.0>
 23ff462:	bf00      	nop
 23ff464:	1007a89c 	.word	0x1007a89c

023ff468 <__register_exitproc>:
 23ff468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff46c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff52c <__register_exitproc+0xc4>
 23ff470:	4606      	mov	r6, r0
 23ff472:	461f      	mov	r7, r3
 23ff474:	460d      	mov	r5, r1
 23ff476:	f8d8 0000 	ldr.w	r0, [r8]
 23ff47a:	4691      	mov	r9, r2
 23ff47c:	f000 f858 	bl	23ff530 <__retarget_lock_acquire_recursive>
 23ff480:	4b26      	ldr	r3, [pc, #152]	; (23ff51c <__register_exitproc+0xb4>)
 23ff482:	681c      	ldr	r4, [r3, #0]
 23ff484:	b934      	cbnz	r4, 23ff494 <__register_exitproc+0x2c>
 23ff486:	4c26      	ldr	r4, [pc, #152]	; (23ff520 <__register_exitproc+0xb8>)
 23ff488:	601c      	str	r4, [r3, #0]
 23ff48a:	4b26      	ldr	r3, [pc, #152]	; (23ff524 <__register_exitproc+0xbc>)
 23ff48c:	b113      	cbz	r3, 23ff494 <__register_exitproc+0x2c>
 23ff48e:	681b      	ldr	r3, [r3, #0]
 23ff490:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff494:	6863      	ldr	r3, [r4, #4]
 23ff496:	2b1f      	cmp	r3, #31
 23ff498:	dd07      	ble.n	23ff4aa <__register_exitproc+0x42>
 23ff49a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff49e:	f000 f849 	bl	23ff534 <__retarget_lock_release_recursive>
 23ff4a2:	f04f 30ff 	mov.w	r0, #4294967295
 23ff4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff4aa:	b35e      	cbz	r6, 23ff504 <__register_exitproc+0x9c>
 23ff4ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff4b0:	b988      	cbnz	r0, 23ff4d6 <__register_exitproc+0x6e>
 23ff4b2:	4b1d      	ldr	r3, [pc, #116]	; (23ff528 <__register_exitproc+0xc0>)
 23ff4b4:	b923      	cbnz	r3, 23ff4c0 <__register_exitproc+0x58>
 23ff4b6:	f8d8 0000 	ldr.w	r0, [r8]
 23ff4ba:	f000 f83a 	bl	23ff532 <__retarget_lock_release>
 23ff4be:	e7f0      	b.n	23ff4a2 <__register_exitproc+0x3a>
 23ff4c0:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff4c4:	f7fa fcd6 	bl	23f9e74 <malloc>
 23ff4c8:	2800      	cmp	r0, #0
 23ff4ca:	d0f4      	beq.n	23ff4b6 <__register_exitproc+0x4e>
 23ff4cc:	2300      	movs	r3, #0
 23ff4ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff4d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff4d6:	6863      	ldr	r3, [r4, #4]
 23ff4d8:	2201      	movs	r2, #1
 23ff4da:	2e02      	cmp	r6, #2
 23ff4dc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff4e0:	fa02 f203 	lsl.w	r2, r2, r3
 23ff4e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff4e8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff4ec:	ea43 0302 	orr.w	r3, r3, r2
 23ff4f0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff4f4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff4f8:	bf02      	ittt	eq
 23ff4fa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff4fe:	4313      	orreq	r3, r2
 23ff500:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff504:	6863      	ldr	r3, [r4, #4]
 23ff506:	f8d8 0000 	ldr.w	r0, [r8]
 23ff50a:	1c5a      	adds	r2, r3, #1
 23ff50c:	3302      	adds	r3, #2
 23ff50e:	6062      	str	r2, [r4, #4]
 23ff510:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff514:	f000 f80e 	bl	23ff534 <__retarget_lock_release_recursive>
 23ff518:	2000      	movs	r0, #0
 23ff51a:	e7c4      	b.n	23ff4a6 <__register_exitproc+0x3e>
 23ff51c:	1007aff4 	.word	0x1007aff4
 23ff520:	1007af68 	.word	0x1007af68
 23ff524:	00000000 	.word	0x00000000
 23ff528:	023f9e75 	.word	0x023f9e75
 23ff52c:	1007a900 	.word	0x1007a900

023ff530 <__retarget_lock_acquire_recursive>:
 23ff530:	4770      	bx	lr

023ff532 <__retarget_lock_release>:
 23ff532:	4770      	bx	lr

023ff534 <__retarget_lock_release_recursive>:
 23ff534:	4770      	bx	lr
	...

023ff538 <link_const_data_start>:
 23ff538:	00000000 	.word	0x00000000
 23ff53c:	34fb0000 	.word	0x34fb0000
 23ff540:	00805f9b 	.word	0x00805f9b
 23ff544:	10008000 	.word	0x10008000
	...

023ff550 <dynalib_user>:
 23ff550:	023f8a95 023f8abd 023f8ac1 00000000     ..?...?...?.....
 23ff560:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff570:	6c617574 6f6f4400 74732072 73757461     tual.Door status
 23ff580:	7325203a 6f6f4400 74532072 20657461     : %s.Door State 
 23ff590:	63726f46 203a6465 75007325 636f6c6e     Forced: %s.unloc
 23ff5a0:	0064656b 61766e49 2064696c 6d6d6f43     ked.Invalid Comm
 23ff5b0:	3a646e61 00732520 756e614d 53206c61     and: %s.Manual S
 23ff5c0:	65746174 726f4620 3a646563 00732520     tate Forced: %s.
 23ff5d0:	645f5663 53726f6f 65746174 5f566300     cV_doorState.cV_
 23ff5e0:	756e616d 74536c61 00657461 665f4663     manualState.cF_f
 23ff5f0:	6563726f 726f6f44 74617453 46630065     orceDoorState.cF
 23ff600:	726f665f 614d6563 6c61756e 74617453     _forceManualStat
 23ff610:	63530065 696e6e61 2e2e676e 6f46002e     e.Scanning....Fo
 23ff620:	20646e75 76726573 2e656369 6e6f6320     und service. con
 23ff630:	7463656e 2e676e69 43002e2e 656e6e6f     necting....Conne
 23ff640:	64657463 206f7420 69726570 72656870     cted to peripher
 23ff650:	6e006c61 6620746f 696b6375 6320676e     al.not fucking c
 23ff660:	656e6e6f 6e697463 69702067 20656365     onnecting piece 
 23ff670:	7320666f 20746968 72616863 65746361     of shit characte
 23ff680:	74736972 00736369 72616843 65746361     ristics.Characte
 23ff690:	74736972 20736369 6e756f46 6e550064     ristics Found.Un
 23ff6a0:	6b636f6c 74756220 206e6f74 73657270     lock button pres
 23ff6b0:	00646573 6b636f4c 74756220 206e6f74     sed.Lock button 
 23ff6c0:	73657270 00646573 6b636f4c 6d696c20     pressed.Lock lim
 23ff6d0:	73207469 63746977 72742068 65676769     it switch trigge
 23ff6e0:	20646572 7473202d 6970706f 6d20676e     red - stopping m
 23ff6f0:	726f746f 6c6e5500 206b636f 696d696c     otor.Unlock limi
 23ff700:	77732074 68637469 69727420 72656767     t switch trigger
 23ff710:	2d206465 6f747320 6e697070 6f6d2067     ed - stopping mo
 23ff720:	00726f74 726f6f44 6c6e5520 656b636f     tor.Door Unlocke
 23ff730:	6f440064 4c20726f 656b636f 6f440064     d.Door Locked.Do
 23ff740:	5520726f 6f72666e 006e657a 726f6f44     or Unfrozen.Door
 23ff750:	6f724620 006e657a 746e6553 73655220      Frozen.Sent Res
 23ff760:	736e6f70 61562065 3a65756c 00732520     ponse Value: %s.
 23ff770:	31444131 37464638 3541322d 34342d41     1AD18FF7-2A5A-44
 23ff780:	422d3744 2d364130 42373841 41303041     D7-B0A6-A87BA00A
 23ff790:	35453035 44413200 46463831 41322d37     50E5.2AD18FF7-2A
 23ff7a0:	342d4135 2d374434 36413042 3738412d     5A-44D7-B0A6-A87
 23ff7b0:	30304142 45303541 41330035 46383144     BA00A50E5.3AD18F
 23ff7c0:	322d3746 2d413541 37443434 4130422d     F7-2A5A-44D7-B0A
 23ff7d0:	38412d36 30414237 30354130 34003545     6-A87BA00A50E5.4
 23ff7e0:	38314441 2d374646 41354132 4434342d     AD18FF7-2A5A-44D
 23ff7f0:	30422d37 412d3641 41423738 35413030     7-B0A6-A87BA00A5
 23ff800:	00354530                                0E5.

023ff804 <_ZTVN5spark10LogHandlerE>:
	...
 23ff814:	023f8add 023f8b09                       ..?...?.

023ff81c <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff824:	023f8b31 023f8b65 023fd84d 023fd9f5     1.?.e.?.M.?...?.

023ff834 <_ZTVN5spark13EthernetClassE>:
	...
 23ff83c:	023f9fcf 023f9fc5 023f9fbb 023f9fb1     ..?...?...?...?.
 23ff84c:	023f9fa5 023f9f99 023feaa9 023feab1     ..?...?...?...?.
 23ff85c:	023f9f8d 023f9f85 023f9f7b 023f9f71     ..?...?.{.?.q.?.
 23ff86c:	023febd9 023feae1 023feae9 65737341     ..?...?...?.Asse
 23ff87c:	6f697472 6961466e 6572756c 6c616620     rtionFailure fal
 23ff88c:	77006573 6e697269 6c622e67 74530065     se.wiring.ble.St
 23ff89c:	20747261 63736964 7265766f 20676e69     art discovering 
 23ff8ac:	76726573 73656369 ffff002e ffffffff     services........
 23ff8bc:	73734100 69747265 61466e6f 72756c69     .AssertionFailur
 23ff8cc:	61682065 6c625f6c 74735f65 5f6b6361     e hal_ble_stack_
 23ff8dc:	74696e69 6c756e28 7274706c 3d3d2029     init(nullptr) ==
 23ff8ec:	53595320 5f4d4554 4f525245 4f4e5f52      SYSTEM_ERROR_NO
 23ff8fc:	5000454e 20726565 69766564 69206563     NE.Peer device i
 23ff90c:	696d2073 6e697373 46002167 656c6961     s missing!.Faile
 23ff91c:	6f742064 6c6c6120 7461636f 656d2065     d to allocate me
 23ff92c:	79726f6d 61460021 64656c69 206f7420     mory!.Failed to 
 23ff93c:	65707061 7020646e 20726565 746e6543     append peer Cent
 23ff94c:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
 23ff95c:	65746365 69440064 6e6f6373 7463656e     ected.Disconnect
 23ff96c:	46006465 656c6961 6f742064 70706120     ed.Failed to app
 23ff97c:	20646e65 63736964 7265766f 73206465     end discovered s
 23ff98c:	69767265 002e6563 72617453 69642074     ervice..Start di
 23ff99c:	766f6373 6e697265 68632067 63617261     scovering charac
 23ff9ac:	69726574 63697473 666f2073 72657320     teristics of ser
 23ff9bc:	65636976 7325203a 6143002e 746f6e6e     vice: %s..Cannot
 23ff9cc:	64646120 77656e20 65657020 65642072      add new peer de
 23ff9dc:	65636976 654e002e 65702077 68706972     vice..New periph
 23ff9ec:	6c617265 20736920 6e6e6f63 65746365     eral is connecte
 23ff9fc:	43002e64 61726168 72657463 69747369     d..Characteristi
 23ffa0c:	69642063 766f6373 64657265 6944002e     c discovered..Di
 23ffa1c:	766f6373 64657265 61686320 74636172     scovered charact
 23ffa2c:	73697265 27636974 61682073 656c646e     eristic's handle
 23ffa3c:	20736920 61766e69 2e64696c 69614600      is invalid..Fai
 23ffa4c:	2064656c 61206f74 6e657070 69642064     led to append di
 23ffa5c:	766f6373 64657265 61686320 74636172     scovered charact
 23ffa6c:	73697265 2e636974 00000000              eristic.....

023ffa78 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffa80:	023fa299 023fa2fd 023fa475 023fa327     ..?...?.u.?.'.?.
 23ffa90:	023fa29d                                ..?.

023ffa94 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffa9c:	023fa295 023fa30b 023fa297 023fa32d     ..?...?...?.-.?.
 23ffaac:	023fa2bd                                ..?.

023ffab0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffab8:	023fa293 023fa319 023fb09b 023fa333     ..?...?...?.3.?.
 23ffac8:	023fa2dd                                ..?.

023ffacc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ffad4 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffadc:	023fcb61 023fcb63 023fcb21 023fe4d3     a.?.c.?.!.?...?.
 23ffaec:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
 23ffafc:	00316c61 4e4f534a 65727453 6f4c6d61     al1.JSONStreamLo
 23ffb0c:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
 23ffb1c:	00207530 2500205d 202c0064 3a292800     0u .] .%d., .():
 23ffb2c:	5b200020 646f6300 203d2065 00692500      . [.code = .%i.
 23ffb3c:	61746564 20736c69 0d00203d 006d000a     details = ....m.
 23ffb4c:	6e6c0066 006e6600 6f630074 64006564     f.ln.fn.t.code.d
 23ffb5c:	69617465 0000006c                       etail...

023ffb64 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffb6c:	023fd0d5 023fd0ed 023fd84d 023fd9f5     ..?...?.M.?...?.

023ffb7c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffb84:	023fd101 023fd115 023fda2d 023fcc57     ..?...?.-.?.W.?.

023ffb94 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffb9c:	023fcc69 023fcc8f 023fd7b1 023fcc59     i.?...?...?.Y.?.

023ffbac <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffbb4:	023fcc67 023fcc9d 023fd03d 023fccbf     g.?...?.=.?...?.
 23ffbc4:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 23ffbd4:	007a2553 74637361 00656d69              S%z.asctime.

023ffbe0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffbe8:	023fdd19 023fdd1f 023fdd5d 023fdd2d     ..?...?.].?.-.?.
 23ffbf8:	023fdd1b                                ..?.

023ffbfc <_ZTV9IPAddress>:
	...
 23ffc04:	023fe2b9 023fe2a9 023fe2ab              ..?...?...?.

023ffc10 <_ZTV9USBSerial>:
	...
 23ffc18:	023fe39f 023fe407 023fe3dd 023fcb35     ..?...?...?.5.?.
 23ffc28:	023fe3cf 023fe3a1 023fe3b1 023fe401     ..?...?...?...?.
 23ffc38:	023fcc2d 023fe3c1 023fe399 75007525     -.?...?...?.%u.u
 23ffc48:	78343025 00000000                       %04x....

023ffc50 <_ZTV11USARTSerial>:
	...
 23ffc58:	023fe855 023fe8c1 023fe899 023fcb35     U.?...?...?.5.?.
 23ffc68:	023fe869 023fe885 023fe877 023fe893     i.?...?.w.?...?.
 23ffc78:	023fcc2d 023fe857 023fe85b              -.?.W.?.[.?.

023ffc84 <_ZTV7TwoWire>:
	...
 23ffc8c:	023fe93b 023fe985 023fe95d 023fe93d     ;.?...?.].?.=.?.
 23ffc9c:	023fe965 023fe96d 023fe975 023fe97d     e.?.m.?.u.?.}.?.
 23ffcac:	023fcc2d                                -.?.

023ffcb0 <_ZTVN5spark9WiFiClassE>:
	...
 23ffcb8:	023fea4b 023fea41 023fea37 023fe9ed     K.?.A.?.7.?...?.
 23ffcc8:	023fea2b 023fea1f 023feaa9 023feab1     +.?...?...?...?.
 23ffcd8:	023fea13 023fea0b 023fea01 023fe9f7     ..?...?...?...?.
 23ffce8:	023febd9 023feae1 023feae9              ..?...?...?.

023ffcf4 <CSWTCH.109>:
 23ffcf4:	1007ae44 1007aee8 1007aef0              D...........

023ffd00 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd08:	023fea69 023fea73 023fea7d 023fea87     i.?.s.?.}.?...?.
 23ffd18:	023fea91 023fea9d 023feaa9 023feab1     ..?...?...?...?.
 23ffd28:	023feab9 023feac5 023feacd 023fead7     ..?...?...?...?.
 23ffd38:	023febd9 023feae1 023feae9              ..?...?...?.

023ffd44 <_ZSt7nothrow>:
	...

023ffd45 <_ZTSSt19_Sp_make_shared_tag>:
 23ffd45:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffd55:	5f646572 00676174                        red_tag....

023ffd60 <_ZTISt19_Sp_make_shared_tag>:
 23ffd60:	023ffda0 023ffd45                       ..?.E.?.

023ffd68 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd68:	023ffe00 023ffd74 023ffe24              ..?.t.?.$.?.

023ffd74 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd74:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd84:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd94:	00000045                                E...

023ffd98 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd98:	00000000 023ffd68 023fef9d 023fefb1     ....h.?...?...?.
 23ffda8:	023ff145 023ff145 023ff01b 023fef5d     E.?.E.?...?.].?.
 23ffdb8:	023ff003 023fefc5 023fef8f              ..?...?...?.

023ffdc4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffdc4:	023ffe00 023ffdd0 023ffd68              ..?...?.h.?.

023ffdd0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdd0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffde0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffdf0:	456f666e 00000000                       nfoE....

023ffdf8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffdf8:	00000000 023ffdc4 023ff045 023ff059     ......?.E.?.Y.?.
 23ffe08:	023ff145 023ff145 023ff01b 023fef5d     E.?.E.?...?.].?.
 23ffe18:	023ff119 023ff0a5 023ff06d              ..?...?.m.?.

023ffe24 <_ZTISt9type_info>:
 23ffe24:	023ffda0 023ffe2c                       ..?.,.?.

023ffe2c <_ZTSSt9type_info>:
 23ffe2c:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffe3c:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffe4c:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffe5c:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe6c:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe7c:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe8c:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffe9c:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffeac:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffebc:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffecd <_ctype_>:
 23ffecd:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffedd:	20202020 20202020 20202020 20202020                     
 23ffeed:	10108820 10101010 10101010 10101010      ...............
 23ffefd:	04040410 04040404 10040404 10101010     ................
 23fff0d:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff1d:	01010101 01010101 01010101 10101010     ................
 23fff2d:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff3d:	02020202 02020202 02020202 10101010     ................
 23fff4d:	00000020 00000000 00000000 00000000      ...............
	...

023fffce <link_const_data_end>:
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023f9329 	.word	0x023f9329
 23fffd4:	023f9fd9 	.word	0x023f9fd9
 23fffd8:	023fa025 	.word	0x023fa025
 23fffdc:	023fcb11 	.word	0x023fcb11
 23fffe0:	023fd83d 	.word	0x023fd83d
 23fffe4:	023fdba1 	.word	0x023fdba1
 23fffe8:	023fdbbd 	.word	0x023fdbbd
 23fffec:	023fe9d1 	.word	0x023fe9d1
 23ffff0:	023fea55 	.word	0x023fea55
 23ffff4:	023febed 	.word	0x023febed
